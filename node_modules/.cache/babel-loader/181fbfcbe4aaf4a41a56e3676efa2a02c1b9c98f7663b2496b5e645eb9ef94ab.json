{"ast":null,"code":"const KEY_STORAGE = 'gemini_api_key';\nexport const setGeminiKey = k => {\n  localStorage.setItem(KEY_STORAGE, (k || '').trim());\n};\nexport const getGeminiKey = () => {\n  return localStorage.getItem(KEY_STORAGE) || '';\n};\nexport async function generateQuestionsWithGemini(prompt, count = 10) {\n  var _data$candidates, _data$candidates$, _data$candidates$$con, _data$candidates$$con2, _data$candidates$$con3;\n  const apiKey = getGeminiKey();\n  if (!apiKey) throw new Error('Gemini API 키가 없습니다.');\n  const model = 'gemini-1.5-flash';\n  const sys = `당신은 학습용 문제 제작자입니다.\n반드시 아래 JSON 형식의 배열만 반환하세요(추가 문장/설명 금지).\n각 항목은 { \"type\":\"ox|multiple|short\", \"question\":\"...\", \"options\":[...], \"correctAnswer\":\"...|index\", \"score\":10 } 형태.\n- multiple은 options 필수, correctAnswer는 0부터 시작하는 정답 index.\n- ox는 options 없이 correctAnswer는 \"O\" 또는 \"X\".\n- short는 correctAnswer는 문자열 정답.\n- 문자열 내 개행/따옴표는 이스케이프.\n반드시 length=${count} 맞추세요.`;\n  const user = `요청: ${prompt}\\n개수: ${count}\\n출력: 위 JSON 배열만`;\n  const body = {\n    contents: [{\n      role: 'user',\n      parts: [{\n        text: `${sys}\\n\\n${user}`\n      }]\n    }]\n  };\n  const res = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${encodeURIComponent(apiKey)}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  });\n  if (!res.ok) throw new Error('Gemini 호출 실패');\n  const data = await res.json();\n  const text = (data === null || data === void 0 ? void 0 : (_data$candidates = data.candidates) === null || _data$candidates === void 0 ? void 0 : (_data$candidates$ = _data$candidates[0]) === null || _data$candidates$ === void 0 ? void 0 : (_data$candidates$$con = _data$candidates$.content) === null || _data$candidates$$con === void 0 ? void 0 : (_data$candidates$$con2 = _data$candidates$$con.parts) === null || _data$candidates$$con2 === void 0 ? void 0 : (_data$candidates$$con3 = _data$candidates$$con2[0]) === null || _data$candidates$$con3 === void 0 ? void 0 : _data$candidates$$con3.text) || '';\n  const jsonStart = text.indexOf('[');\n  const jsonEnd = text.lastIndexOf(']');\n  if (jsonStart === -1 || jsonEnd === -1) throw new Error('AI 응답 파싱 실패');\n  const json = text.slice(jsonStart, jsonEnd + 1);\n  const parsed = JSON.parse(json);\n  return (parsed || []).slice(0, count).map((q, i) => ({\n    id: q.id || `ai_${Date.now()}_${i}`,\n    type: q.type,\n    question: q.question,\n    options: q.options,\n    correctAnswer: q.correctAnswer,\n    score: typeof q.score === 'number' ? q.score : 10\n  }));\n}","map":{"version":3,"names":["KEY_STORAGE","setGeminiKey","k","localStorage","setItem","trim","getGeminiKey","getItem","generateQuestionsWithGemini","prompt","count","_data$candidates","_data$candidates$","_data$candidates$$con","_data$candidates$$con2","_data$candidates$$con3","apiKey","Error","model","sys","user","body","contents","role","parts","text","res","fetch","encodeURIComponent","method","headers","JSON","stringify","ok","data","json","candidates","content","jsonStart","indexOf","jsonEnd","lastIndexOf","slice","parsed","parse","map","q","i","id","Date","now","type","question","options","correctAnswer","score"],"sources":["C:/Users/9204r/.cursor/avatar/src/services/ai.ts"],"sourcesContent":["export type AiQuestion = {\r\n  id?: string;\r\n  type: 'ox' | 'multiple' | 'short';\r\n  question: string;\r\n  options?: string[];\r\n  correctAnswer: string | number;\r\n  score?: number;\r\n};\r\n\r\nconst KEY_STORAGE = 'gemini_api_key';\r\n\r\nexport const setGeminiKey = (k: string) => {\r\n  localStorage.setItem(KEY_STORAGE, (k || '').trim());\r\n};\r\n\r\nexport const getGeminiKey = (): string => {\r\n  return localStorage.getItem(KEY_STORAGE) || '';\r\n};\r\n\r\nexport async function generateQuestionsWithGemini(prompt: string, count = 10): Promise<AiQuestion[]> {\r\n  const apiKey = getGeminiKey();\r\n  if (!apiKey) throw new Error('Gemini API 키가 없습니다.');\r\n\r\n  const model = 'gemini-1.5-flash';\r\n\r\n  const sys = `당신은 학습용 문제 제작자입니다.\r\n반드시 아래 JSON 형식의 배열만 반환하세요(추가 문장/설명 금지).\r\n각 항목은 { \"type\":\"ox|multiple|short\", \"question\":\"...\", \"options\":[...], \"correctAnswer\":\"...|index\", \"score\":10 } 형태.\r\n- multiple은 options 필수, correctAnswer는 0부터 시작하는 정답 index.\r\n- ox는 options 없이 correctAnswer는 \"O\" 또는 \"X\".\r\n- short는 correctAnswer는 문자열 정답.\r\n- 문자열 내 개행/따옴표는 이스케이프.\r\n반드시 length=${count} 맞추세요.`;\r\n\r\n  const user = `요청: ${prompt}\\n개수: ${count}\\n출력: 위 JSON 배열만`;\r\n\r\n  const body = {\r\n    contents: [{ role: 'user', parts: [{ text: `${sys}\\n\\n${user}` }]}]\r\n  } as any;\r\n\r\n  const res = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${encodeURIComponent(apiKey)}` , {\r\n    method: 'POST',\r\n    headers: { 'Content-Type':'application/json' },\r\n    body: JSON.stringify(body),\r\n  });\r\n  if (!res.ok) throw new Error('Gemini 호출 실패');\r\n  const data = await res.json();\r\n\r\n  const text: string = data?.candidates?.[0]?.content?.parts?.[0]?.text || '';\r\n  const jsonStart = text.indexOf('[');\r\n  const jsonEnd = text.lastIndexOf(']');\r\n  if (jsonStart === -1 || jsonEnd === -1) throw new Error('AI 응답 파싱 실패');\r\n  const json = text.slice(jsonStart, jsonEnd + 1);\r\n  const parsed = JSON.parse(json) as AiQuestion[];\r\n\r\n  return (parsed || []).slice(0, count).map((q, i) => ({\r\n    id: q.id || `ai_${Date.now()}_${i}`,\r\n    type: q.type,\r\n    question: q.question,\r\n    options: q.options,\r\n    correctAnswer: q.correctAnswer,\r\n    score: typeof q.score === 'number' ? q.score : 10,\r\n  }));\r\n}\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}