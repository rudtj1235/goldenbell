{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\9204r\\\\.cursor\\\\avatar\\\\src\\\\contexts\\\\GameContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  room: null,\n  questions: [],\n  players: [],\n  currentQuestionIndex: 0,\n  gameState: 'waiting',\n  gameSettings: {\n    timeLimit: 5,\n    answerRevealTime: 5,\n    eliminationMode: false,\n    eliminationThreshold: 3,\n    autoMode: true\n  },\n  currentPlayer: null\n};\nfunction generateRoomCode() {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  let result = '';\n  for (let i = 0; i < 4; i++) {\n    result += chars.charAt(Math.floor(Math.random() * chars.length));\n  }\n  return result;\n}\nfunction gameReducer(state, action) {\n  switch (action.type) {\n    case 'CREATE_ROOM':\n      const newRoom = {\n        id: Date.now().toString(),\n        code: generateRoomCode(),\n        subject: action.payload.subject,\n        isPublic: action.payload.isPublic,\n        hostId: action.payload.hostId,\n        players: [],\n        questions: [],\n        currentQuestionIndex: 0,\n        gameState: 'waiting',\n        eliminationMode: state.gameSettings.eliminationMode,\n        eliminationThreshold: state.gameSettings.eliminationThreshold,\n        autoMode: state.gameSettings.autoMode,\n        answerRevealTime: state.gameSettings.answerRevealTime\n      };\n      return {\n        ...state,\n        room: newRoom\n      };\n    case 'JOIN_ROOM':\n      if (!state.room || state.room.code !== action.payload.roomCode) {\n        return state; // 방이 없거나 코드가 맞지 않으면 무시\n      }\n      const playerExists = state.players.some(p => p.id === action.payload.player.id);\n      if (playerExists) {\n        return state; // 이미 참여한 플레이어면 무시\n      }\n      return {\n        ...state,\n        players: [...state.players, action.payload.player],\n        room: {\n          ...state.room,\n          players: [...state.players, action.payload.player]\n        }\n      };\n    case 'ADD_QUESTION':\n      const newQuestions = [...state.questions, action.payload];\n      return {\n        ...state,\n        questions: newQuestions,\n        room: state.room ? {\n          ...state.room,\n          questions: newQuestions\n        } : null\n      };\n    case 'DELETE_QUESTION':\n      const filteredQuestions = state.questions.filter(q => q.id !== action.payload);\n      return {\n        ...state,\n        questions: filteredQuestions,\n        room: state.room ? {\n          ...state.room,\n          questions: filteredQuestions\n        } : null\n      };\n    case 'REORDER_QUESTIONS':\n      return {\n        ...state,\n        questions: action.payload,\n        room: state.room ? {\n          ...state.room,\n          questions: action.payload\n        } : null\n      };\n    case 'UPDATE_GAME_SETTINGS':\n      const newSettings = {\n        ...state.gameSettings,\n        ...action.payload\n      };\n      return {\n        ...state,\n        gameSettings: newSettings,\n        room: state.room ? {\n          ...state.room,\n          eliminationMode: newSettings.eliminationMode,\n          eliminationThreshold: newSettings.eliminationThreshold,\n          autoMode: newSettings.autoMode,\n          answerRevealTime: newSettings.answerRevealTime\n        } : null\n      };\n    case 'START_GAME':\n      if (state.questions.length === 0) return state;\n      return {\n        ...state,\n        gameState: 'playing',\n        currentQuestionIndex: 0,\n        room: state.room ? {\n          ...state.room,\n          gameState: 'playing',\n          currentQuestionIndex: 0\n        } : null\n      };\n    case 'PAUSE_GAME':\n      return {\n        ...state,\n        gameState: 'paused',\n        room: state.room ? {\n          ...state.room,\n          gameState: 'paused'\n        } : null\n      };\n    case 'RESUME_GAME':\n      return {\n        ...state,\n        gameState: 'playing',\n        room: state.room ? {\n          ...state.room,\n          gameState: 'playing'\n        } : null\n      };\n    case 'NEXT_QUESTION':\n      const nextIndex = state.currentQuestionIndex + 1;\n      if (nextIndex >= state.questions.length) {\n        return {\n          ...state,\n          gameState: 'finished',\n          room: state.room ? {\n            ...state.room,\n            gameState: 'finished'\n          } : null\n        };\n      }\n      // 모든 플레이어의 제출 상태 초기화\n      const resetPlayers = state.players.map(player => ({\n        ...player,\n        hasSubmitted: false,\n        currentAnswer: undefined\n      }));\n      return {\n        ...state,\n        currentQuestionIndex: nextIndex,\n        players: resetPlayers,\n        room: state.room ? {\n          ...state.room,\n          currentQuestionIndex: nextIndex,\n          players: resetPlayers\n        } : null\n      };\n    case 'END_GAME':\n      return {\n        ...state,\n        gameState: 'finished',\n        room: state.room ? {\n          ...state.room,\n          gameState: 'finished'\n        } : null\n      };\n    case 'UPDATE_PLAYER':\n      const updatedPlayers = state.players.map(player => player.id === action.payload.id ? action.payload : player);\n      return {\n        ...state,\n        players: updatedPlayers,\n        room: state.room ? {\n          ...state.room,\n          players: updatedPlayers\n        } : null\n      };\n    case 'ELIMINATE_PLAYER':\n      const eliminatedPlayers = state.players.map(player => player.id === action.payload ? {\n        ...player,\n        isEliminated: true\n      } : player);\n      return {\n        ...state,\n        players: eliminatedPlayers,\n        room: state.room ? {\n          ...state.room,\n          players: eliminatedPlayers\n        } : null\n      };\n    case 'REVIVE_PLAYER':\n      const revivedPlayers = state.players.map(player => player.id === action.payload ? {\n        ...player,\n        isEliminated: false\n      } : player);\n      return {\n        ...state,\n        players: revivedPlayers,\n        room: state.room ? {\n          ...state.room,\n          players: revivedPlayers\n        } : null\n      };\n    case 'SUBMIT_ANSWER':\n      const submittedPlayers = state.players.map(player => player.id === action.payload.playerId ? {\n        ...player,\n        hasSubmitted: true,\n        currentAnswer: action.payload.answer.toString()\n      } : player);\n      return {\n        ...state,\n        players: submittedPlayers,\n        room: state.room ? {\n          ...state.room,\n          players: submittedPlayers\n        } : null\n      };\n    case 'CLEAR_SUBMISSIONS':\n      const clearedPlayers = state.players.map(player => ({\n        ...player,\n        hasSubmitted: false,\n        currentAnswer: undefined\n      }));\n      return {\n        ...state,\n        players: clearedPlayers,\n        room: state.room ? {\n          ...state.room,\n          players: clearedPlayers\n        } : null\n      };\n    case 'RESET_GAME':\n      return {\n        ...initialState,\n        gameSettings: state.gameSettings\n      };\n    default:\n      return state;\n  }\n}\nconst GameContext = /*#__PURE__*/createContext(null);\nexport function GameProvider({\n  children\n}) {\n  _s();\n  const [state, dispatch] = useReducer(gameReducer, initialState);\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 305,\n    columnNumber: 5\n  }, this);\n}\n_s(GameProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = GameProvider;\nexport function useGameContext() {\n  _s2();\n  const context = useContext(GameContext);\n  if (!context) {\n    throw new Error('useGameContext must be used within a GameProvider');\n  }\n  return context;\n}\n_s2(useGameContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","jsxDEV","_jsxDEV","initialState","room","questions","players","currentQuestionIndex","gameState","gameSettings","timeLimit","answerRevealTime","eliminationMode","eliminationThreshold","autoMode","currentPlayer","generateRoomCode","chars","result","i","charAt","Math","floor","random","length","gameReducer","state","action","type","newRoom","id","Date","now","toString","code","subject","payload","isPublic","hostId","roomCode","playerExists","some","p","player","newQuestions","filteredQuestions","filter","q","newSettings","nextIndex","resetPlayers","map","hasSubmitted","currentAnswer","undefined","updatedPlayers","eliminatedPlayers","isEliminated","revivedPlayers","submittedPlayers","playerId","answer","clearedPlayers","GameContext","GameProvider","children","_s","dispatch","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useGameContext","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/9204r/.cursor/avatar/src/contexts/GameContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, ReactNode } from 'react';\r\nimport { Question, Player, Room, GameSettings, GameState } from '../types/game';\r\n\r\ninterface AppState {\r\n  room: Room | null;\r\n  questions: Question[];\r\n  players: Player[];\r\n  currentQuestionIndex: number;\r\n  gameState: GameState;\r\n  gameSettings: GameSettings;\r\n  currentPlayer: Player | null;\r\n}\r\n\r\ntype GameAction =\r\n  | { type: 'CREATE_ROOM'; payload: { subject: string; isPublic: boolean; hostId: string } }\r\n  | { type: 'JOIN_ROOM'; payload: { roomCode: string; player: Player } }\r\n  | { type: 'ADD_QUESTION'; payload: Question }\r\n  | { type: 'DELETE_QUESTION'; payload: string }\r\n  | { type: 'REORDER_QUESTIONS'; payload: Question[] }\r\n  | { type: 'UPDATE_GAME_SETTINGS'; payload: Partial<GameSettings> }\r\n  | { type: 'START_GAME' }\r\n  | { type: 'PAUSE_GAME' }\r\n  | { type: 'RESUME_GAME' }\r\n  | { type: 'NEXT_QUESTION' }\r\n  | { type: 'END_GAME' }\r\n  | { type: 'UPDATE_PLAYER'; payload: Player }\r\n  | { type: 'ELIMINATE_PLAYER'; payload: string }\r\n  | { type: 'REVIVE_PLAYER'; payload: string }\r\n  | { type: 'SUBMIT_ANSWER'; payload: { playerId: string; answer: string | number } }\r\n  | { type: 'CLEAR_SUBMISSIONS' }\r\n  | { type: 'RESET_GAME' };\r\n\r\nconst initialState: AppState = {\r\n  room: null,\r\n  questions: [],\r\n  players: [],\r\n  currentQuestionIndex: 0,\r\n  gameState: 'waiting',\r\n  gameSettings: {\r\n    timeLimit: 5,\r\n    answerRevealTime: 5,\r\n    eliminationMode: false,\r\n    eliminationThreshold: 3,\r\n    autoMode: true\r\n  },\r\n  currentPlayer: null\r\n};\r\n\r\nfunction generateRoomCode(): string {\r\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r\n  let result = '';\r\n  for (let i = 0; i < 4; i++) {\r\n    result += chars.charAt(Math.floor(Math.random() * chars.length));\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction gameReducer(state: AppState, action: GameAction): AppState {\r\n  switch (action.type) {\r\n    case 'CREATE_ROOM':\r\n      const newRoom: Room = {\r\n        id: Date.now().toString(),\r\n        code: generateRoomCode(),\r\n        subject: action.payload.subject,\r\n        isPublic: action.payload.isPublic,\r\n        hostId: action.payload.hostId,\r\n        players: [],\r\n        questions: [],\r\n        currentQuestionIndex: 0,\r\n        gameState: 'waiting',\r\n        eliminationMode: state.gameSettings.eliminationMode,\r\n        eliminationThreshold: state.gameSettings.eliminationThreshold,\r\n        autoMode: state.gameSettings.autoMode,\r\n        answerRevealTime: state.gameSettings.answerRevealTime\r\n      };\r\n      return {\r\n        ...state,\r\n        room: newRoom\r\n      };\r\n\r\n    case 'JOIN_ROOM':\r\n      if (!state.room || state.room.code !== action.payload.roomCode) {\r\n        return state; // 방이 없거나 코드가 맞지 않으면 무시\r\n      }\r\n      const playerExists = state.players.some(p => p.id === action.payload.player.id);\r\n      if (playerExists) {\r\n        return state; // 이미 참여한 플레이어면 무시\r\n      }\r\n      return {\r\n        ...state,\r\n        players: [...state.players, action.payload.player],\r\n        room: {\r\n          ...state.room,\r\n          players: [...state.players, action.payload.player]\r\n        }\r\n      };\r\n\r\n    case 'ADD_QUESTION':\r\n      const newQuestions = [...state.questions, action.payload];\r\n      return {\r\n        ...state,\r\n        questions: newQuestions,\r\n        room: state.room ? {\r\n          ...state.room,\r\n          questions: newQuestions\r\n        } : null\r\n      };\r\n\r\n    case 'DELETE_QUESTION':\r\n      const filteredQuestions = state.questions.filter(q => q.id !== action.payload);\r\n      return {\r\n        ...state,\r\n        questions: filteredQuestions,\r\n        room: state.room ? {\r\n          ...state.room,\r\n          questions: filteredQuestions\r\n        } : null\r\n      };\r\n\r\n    case 'REORDER_QUESTIONS':\r\n      return {\r\n        ...state,\r\n        questions: action.payload,\r\n        room: state.room ? {\r\n          ...state.room,\r\n          questions: action.payload\r\n        } : null\r\n      };\r\n\r\n    case 'UPDATE_GAME_SETTINGS':\r\n      const newSettings = { ...state.gameSettings, ...action.payload };\r\n      return {\r\n        ...state,\r\n        gameSettings: newSettings,\r\n        room: state.room ? {\r\n          ...state.room,\r\n          eliminationMode: newSettings.eliminationMode,\r\n          eliminationThreshold: newSettings.eliminationThreshold,\r\n          autoMode: newSettings.autoMode,\r\n          answerRevealTime: newSettings.answerRevealTime\r\n        } : null\r\n      };\r\n\r\n    case 'START_GAME':\r\n      if (state.questions.length === 0) return state;\r\n      return {\r\n        ...state,\r\n        gameState: 'playing',\r\n        currentQuestionIndex: 0,\r\n        room: state.room ? {\r\n          ...state.room,\r\n          gameState: 'playing',\r\n          currentQuestionIndex: 0\r\n        } : null\r\n      };\r\n\r\n    case 'PAUSE_GAME':\r\n      return {\r\n        ...state,\r\n        gameState: 'paused',\r\n        room: state.room ? {\r\n          ...state.room,\r\n          gameState: 'paused'\r\n        } : null\r\n      };\r\n\r\n    case 'RESUME_GAME':\r\n      return {\r\n        ...state,\r\n        gameState: 'playing',\r\n        room: state.room ? {\r\n          ...state.room,\r\n          gameState: 'playing'\r\n        } : null\r\n      };\r\n\r\n    case 'NEXT_QUESTION':\r\n      const nextIndex = state.currentQuestionIndex + 1;\r\n      if (nextIndex >= state.questions.length) {\r\n        return {\r\n          ...state,\r\n          gameState: 'finished',\r\n          room: state.room ? {\r\n            ...state.room,\r\n            gameState: 'finished'\r\n          } : null\r\n        };\r\n      }\r\n      // 모든 플레이어의 제출 상태 초기화\r\n      const resetPlayers = state.players.map(player => ({\r\n        ...player,\r\n        hasSubmitted: false,\r\n        currentAnswer: undefined\r\n      }));\r\n      return {\r\n        ...state,\r\n        currentQuestionIndex: nextIndex,\r\n        players: resetPlayers,\r\n        room: state.room ? {\r\n          ...state.room,\r\n          currentQuestionIndex: nextIndex,\r\n          players: resetPlayers\r\n        } : null\r\n      };\r\n\r\n    case 'END_GAME':\r\n      return {\r\n        ...state,\r\n        gameState: 'finished',\r\n        room: state.room ? {\r\n          ...state.room,\r\n          gameState: 'finished'\r\n        } : null\r\n      };\r\n\r\n    case 'UPDATE_PLAYER':\r\n      const updatedPlayers = state.players.map(player =>\r\n        player.id === action.payload.id ? action.payload : player\r\n      );\r\n      return {\r\n        ...state,\r\n        players: updatedPlayers,\r\n        room: state.room ? {\r\n          ...state.room,\r\n          players: updatedPlayers\r\n        } : null\r\n      };\r\n\r\n    case 'ELIMINATE_PLAYER':\r\n      const eliminatedPlayers = state.players.map(player =>\r\n        player.id === action.payload ? { ...player, isEliminated: true } : player\r\n      );\r\n      return {\r\n        ...state,\r\n        players: eliminatedPlayers,\r\n        room: state.room ? {\r\n          ...state.room,\r\n          players: eliminatedPlayers\r\n        } : null\r\n      };\r\n\r\n    case 'REVIVE_PLAYER':\r\n      const revivedPlayers = state.players.map(player =>\r\n        player.id === action.payload ? { ...player, isEliminated: false } : player\r\n      );\r\n      return {\r\n        ...state,\r\n        players: revivedPlayers,\r\n        room: state.room ? {\r\n          ...state.room,\r\n          players: revivedPlayers\r\n        } : null\r\n      };\r\n\r\n    case 'SUBMIT_ANSWER':\r\n      const submittedPlayers = state.players.map(player =>\r\n        player.id === action.payload.playerId\r\n          ? { ...player, hasSubmitted: true, currentAnswer: action.payload.answer.toString() }\r\n          : player\r\n      );\r\n      return {\r\n        ...state,\r\n        players: submittedPlayers,\r\n        room: state.room ? {\r\n          ...state.room,\r\n          players: submittedPlayers\r\n        } : null\r\n      };\r\n\r\n    case 'CLEAR_SUBMISSIONS':\r\n      const clearedPlayers = state.players.map(player => ({\r\n        ...player,\r\n        hasSubmitted: false,\r\n        currentAnswer: undefined\r\n      }));\r\n      return {\r\n        ...state,\r\n        players: clearedPlayers,\r\n        room: state.room ? {\r\n          ...state.room,\r\n          players: clearedPlayers\r\n        } : null\r\n      };\r\n\r\n    case 'RESET_GAME':\r\n      return {\r\n        ...initialState,\r\n        gameSettings: state.gameSettings\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst GameContext = createContext<{\r\n  state: GameState;\r\n  dispatch: React.Dispatch<GameAction>;\r\n} | null>(null);\r\n\r\nexport function GameProvider({ children }: { children: ReactNode }) {\r\n  const [state, dispatch] = useReducer(gameReducer, initialState);\r\n\r\n  return (\r\n    <GameContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useGameContext() {\r\n  const context = useContext(GameContext);\r\n  if (!context) {\r\n    throw new Error('useGameContext must be used within a GameProvider');\r\n  }\r\n  return context;\r\n}\r\n\r\nexport type { GameAction };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}