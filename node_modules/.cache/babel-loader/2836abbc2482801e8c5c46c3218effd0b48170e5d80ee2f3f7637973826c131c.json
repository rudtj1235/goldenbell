{"ast":null,"code":"/**\n * 방 생명주기 관리자\n * 방 생성, 삭제, 자동 정리를 담당\n */\n\nimport syncManager from './SyncManager';\nimport eventBus from './EventBus';\nclass RoomManager {\n  constructor() {\n    this.rooms = new Map();\n    this.publicRooms = new Map();\n    this.hostSessions = new Map();\n    this.cleanupInterval = null;\n    this.loadRoomsFromStorage();\n    this.startCleanupTimer();\n    this.setupSyncListeners();\n    console.log('🏠 RoomManager 초기화됨');\n  }\n  loadRoomsFromStorage() {\n    try {\n      const savedRooms = localStorage.getItem('publicRooms');\n      if (savedRooms) {\n        const roomData = JSON.parse(savedRooms);\n        const now = Date.now();\n        const filtered = roomData.filter(r => r.hostActive || now - (r.lastHostActivity || r.createdAt) < 60000);\n        filtered.forEach(room => {\n          this.publicRooms.set(room.code, room);\n        });\n        if (filtered.length !== roomData.length) {\n          this.saveRoomsToStorage();\n        }\n      }\n    } catch (e) {\n      console.error('방 데이터 로드 실패:', e);\n    }\n  }\n  saveRoomsToStorage() {\n    try {\n      const roomArray = Array.from(this.publicRooms.values());\n      localStorage.setItem('publicRooms', JSON.stringify(roomArray));\n\n      // 로컬 이벤트 버스로 현재 탭 즉시 갱신만 수행 (브로드캐스트는 호출측에서 단 1회 수행)\n      eventBus.emit('ROOMS_UPDATED', roomArray);\n    } catch (e) {\n      console.error('방 데이터 저장 실패:', e);\n    }\n  }\n  setupSyncListeners() {\n    syncManager.addEventListener('ROOMS_UPDATED', rooms => {\n      this.publicRooms.clear();\n      rooms.forEach(room => {\n        this.publicRooms.set(room.code, room);\n      });\n      this.saveRoomsToStorage();\n      eventBus.emit('ROOMS_UPDATED', rooms);\n      console.log('🏠 공개방 목록 동기화됨:', rooms.length);\n    });\n    syncManager.addEventListener('HOST_ACTIVITY', data => {\n      this.updateHostActivity(data.roomCode, data.sessionId);\n    });\n\n    // ROOM_CREATED/DELETED 개별 이벤트는 사용하지 않고, ROOMS_UPDATED만 사용해 단순화\n\n    syncManager.addEventListener('ROOM_DELETED', roomCode => {\n      this.publicRooms.delete(roomCode);\n      this.rooms.delete(roomCode);\n      this.hostSessions.delete(roomCode);\n      this.saveRoomsToStorage();\n    });\n  }\n  startCleanupTimer() {\n    this.cleanupInterval = setInterval(() => {\n      this.cleanupInactiveRooms();\n    }, 5000); // 5초마다 체크\n  }\n  cleanupInactiveRooms() {\n    const now = Date.now();\n    const INACTIVE_TIMEOUT = 10000; // 10초\n\n    this.publicRooms.forEach((room, roomCode) => {\n      const timeSinceLastActivity = now - room.lastHostActivity;\n      if (timeSinceLastActivity > INACTIVE_TIMEOUT && !room.hostActive) {\n        console.log('🧹 비활성 방 자동 삭제:', roomCode, `(${Math.round(timeSinceLastActivity / 1000)}초 비활성)`);\n        this.deleteRoom(roomCode);\n        // 게임 데이터도 초기화 브로드캐스트\n        syncManager.broadcast('ROOM_DELETED', roomCode);\n      }\n    });\n  }\n  createRoom(subject, isPublic, hostId) {\n    const roomCode = this.generateRoomCode();\n    const now = Date.now();\n    const room = {\n      id: `room_${now}`,\n      code: roomCode,\n      subject,\n      isPublic,\n      hostId,\n      players: [],\n      questions: [],\n      currentQuestionIndex: 0,\n      gameState: 'waiting',\n      eliminationMode: false,\n      eliminationThreshold: 3,\n      autoMode: true,\n      answerRevealTime: 5\n    };\n    this.rooms.set(roomCode, room);\n    if (isPublic) {\n      const publicRoom = {\n        id: room.id,\n        code: roomCode,\n        subject,\n        isPublic: true,\n        playerCount: 0,\n        hostActive: true,\n        lastHostActivity: now,\n        createdAt: now\n      };\n      this.publicRooms.set(roomCode, publicRoom);\n      this.hostSessions.set(roomCode, {\n        sessionId: hostId,\n        lastActivity: now\n      });\n\n      // 저장 및 동기화(한 번만 브로드캐스트)\n      this.saveRoomsToStorage();\n      const payload = this.getPublicRooms();\n      syncManager.broadcast('ROOMS_UPDATED', payload);\n      eventBus.emit('ROOMS_UPDATED', payload);\n    }\n    console.log('🏠 방 생성됨:', roomCode, subject);\n    return room;\n  }\n  deleteRoom(roomCode) {\n    // 항상 삭제 시도하여 흔적 제거\n    this.publicRooms.delete(roomCode);\n    this.rooms.delete(roomCode);\n    this.hostSessions.delete(roomCode);\n    this.saveRoomsToStorage();\n    const payload = this.getPublicRooms();\n    syncManager.broadcast('ROOMS_UPDATED', payload);\n    eventBus.emit('ROOMS_UPDATED', payload);\n    syncManager.broadcast('ROOM_DELETED', roomCode);\n    console.log('🗑️ 방 삭제됨:', roomCode);\n  }\n  updateHostActivity(roomCode, sessionId) {\n    const room = this.publicRooms.get(roomCode);\n    if (room) {\n      room.hostActive = true;\n      room.lastHostActivity = Date.now();\n      this.hostSessions.set(roomCode, {\n        sessionId,\n        lastActivity: Date.now()\n      });\n      this.saveRoomsToStorage();\n    }\n  }\n  markHostInactive(roomCode) {\n    const room = this.publicRooms.get(roomCode);\n    if (room) {\n      // 즉시 영구 삭제하여 흔적 제거\n      this.deleteRoom(roomCode);\n    }\n  }\n  joinRoom(roomCode, player) {\n    let room = this.rooms.get(roomCode);\n\n    // 방이 메모리에 없으면 공개방 목록에서 찾아서 생성\n    if (!room) {\n      const publicRoom = this.publicRooms.get(roomCode);\n      if (publicRoom) {\n        room = {\n          id: publicRoom.id,\n          code: roomCode,\n          subject: publicRoom.subject,\n          isPublic: publicRoom.isPublic,\n          hostId: 'temp_host',\n          players: [],\n          questions: [],\n          currentQuestionIndex: 0,\n          gameState: 'waiting',\n          eliminationMode: false,\n          eliminationThreshold: 3,\n          autoMode: true,\n          answerRevealTime: 5\n        };\n        this.rooms.set(roomCode, room);\n      }\n    }\n    if (room && !room.players.find(p => p.id === player.id)) {\n      room.players.push(player);\n\n      // 공개방 플레이어 수 업데이트\n      const publicRoom = this.publicRooms.get(roomCode);\n      if (publicRoom) {\n        publicRoom.playerCount = room.players.length;\n        this.saveRoomsToStorage();\n      }\n\n      // 동기화 매니저에 알림\n      syncManager.addPlayer(player);\n      syncManager.updateGameData({\n        room,\n        players: room.players\n      });\n      console.log('👤 플레이어 방 참여:', player.nickname, '→', roomCode);\n      return room;\n    }\n    return null;\n  }\n  getRoom(roomCode) {\n    return this.rooms.get(roomCode) || null;\n  }\n  getPublicRooms() {\n    return Array.from(this.publicRooms.values());\n  }\n  generateRoomCode() {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    let result = '';\n    for (let i = 0; i < 6; i++) {\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n  }\n  destroy() {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n      this.cleanupInterval = null;\n    }\n    console.log('🏠 RoomManager 종료됨');\n  }\n}\n\n// 싱글톤 인스턴스\nexport const roomManager = new RoomManager();\nexport default roomManager;","map":{"version":3,"names":["syncManager","eventBus","RoomManager","constructor","rooms","Map","publicRooms","hostSessions","cleanupInterval","loadRoomsFromStorage","startCleanupTimer","setupSyncListeners","console","log","savedRooms","localStorage","getItem","roomData","JSON","parse","now","Date","filtered","filter","r","hostActive","lastHostActivity","createdAt","forEach","room","set","code","length","saveRoomsToStorage","e","error","roomArray","Array","from","values","setItem","stringify","emit","addEventListener","clear","data","updateHostActivity","roomCode","sessionId","delete","setInterval","cleanupInactiveRooms","INACTIVE_TIMEOUT","timeSinceLastActivity","Math","round","deleteRoom","broadcast","createRoom","subject","isPublic","hostId","generateRoomCode","id","players","questions","currentQuestionIndex","gameState","eliminationMode","eliminationThreshold","autoMode","answerRevealTime","publicRoom","playerCount","lastActivity","payload","getPublicRooms","get","markHostInactive","joinRoom","player","find","p","push","addPlayer","updateGameData","nickname","getRoom","chars","result","i","charAt","floor","random","destroy","clearInterval","roomManager"],"sources":["C:/Users/9204r/.cursor/avatar/src/services/RoomManager.ts"],"sourcesContent":["/**\n * 방 생명주기 관리자\n * 방 생성, 삭제, 자동 정리를 담당\n */\n\nimport { Room, Player } from '../types/game';\nimport syncManager from './SyncManager';\nimport eventBus from './EventBus';\n\nexport interface PublicRoom {\n  id: string;\n  code: string;\n  subject: string;\n  isPublic: boolean;\n  playerCount: number;\n  hostActive: boolean;\n  lastHostActivity: number;\n  createdAt: number;\n}\n\nclass RoomManager {\n  private rooms: Map<string, Room> = new Map();\n  private publicRooms: Map<string, PublicRoom> = new Map();\n  private hostSessions: Map<string, { sessionId: string; lastActivity: number }> = new Map();\n  private cleanupInterval: NodeJS.Timeout | null = null;\n\n  constructor() {\n    this.loadRoomsFromStorage();\n    this.startCleanupTimer();\n    this.setupSyncListeners();\n    \n    console.log('🏠 RoomManager 초기화됨');\n  }\n\n  private loadRoomsFromStorage() {\n    try {\n      const savedRooms = localStorage.getItem('publicRooms');\n      if (savedRooms) {\n        const roomData = JSON.parse(savedRooms) as PublicRoom[];\n        const now = Date.now();\n        const filtered = roomData.filter(r => r.hostActive || (now - (r.lastHostActivity || r.createdAt)) < 60000);\n        filtered.forEach((room: PublicRoom) => {\n          this.publicRooms.set(room.code, room);\n        });\n        if (filtered.length !== roomData.length) {\n          this.saveRoomsToStorage();\n        }\n      }\n    } catch (e) {\n      console.error('방 데이터 로드 실패:', e);\n    }\n  }\n\n  private saveRoomsToStorage() {\n    try {\n      const roomArray = Array.from(this.publicRooms.values());\n      localStorage.setItem('publicRooms', JSON.stringify(roomArray));\n\n      // 로컬 이벤트 버스로 현재 탭 즉시 갱신만 수행 (브로드캐스트는 호출측에서 단 1회 수행)\n      eventBus.emit('ROOMS_UPDATED', roomArray);\n    } catch (e) {\n      console.error('방 데이터 저장 실패:', e);\n    }\n  }\n\n  private setupSyncListeners() {\n    syncManager.addEventListener('ROOMS_UPDATED', (rooms: PublicRoom[]) => {\n      this.publicRooms.clear();\n      rooms.forEach(room => {\n        this.publicRooms.set(room.code, room);\n      });\n      this.saveRoomsToStorage();\n      eventBus.emit('ROOMS_UPDATED', rooms);\n      console.log('🏠 공개방 목록 동기화됨:', rooms.length);\n    });\n\n    syncManager.addEventListener('HOST_ACTIVITY', (data: { roomCode: string; sessionId: string }) => {\n      this.updateHostActivity(data.roomCode, data.sessionId);\n    });\n\n    // ROOM_CREATED/DELETED 개별 이벤트는 사용하지 않고, ROOMS_UPDATED만 사용해 단순화\n\n    syncManager.addEventListener('ROOM_DELETED', (roomCode: string) => {\n      this.publicRooms.delete(roomCode);\n      this.rooms.delete(roomCode);\n      this.hostSessions.delete(roomCode);\n      this.saveRoomsToStorage();\n    });\n  }\n\n  private startCleanupTimer() {\n    this.cleanupInterval = setInterval(() => {\n      this.cleanupInactiveRooms();\n    }, 5000); // 5초마다 체크\n  }\n\n  private cleanupInactiveRooms() {\n    const now = Date.now();\n    const INACTIVE_TIMEOUT = 10000; // 10초\n\n    this.publicRooms.forEach((room, roomCode) => {\n      const timeSinceLastActivity = now - room.lastHostActivity;\n      if (timeSinceLastActivity > INACTIVE_TIMEOUT && !room.hostActive) {\n        console.log('🧹 비활성 방 자동 삭제:', roomCode, `(${Math.round(timeSinceLastActivity/1000)}초 비활성)`);\n        this.deleteRoom(roomCode);\n        // 게임 데이터도 초기화 브로드캐스트\n        syncManager.broadcast('ROOM_DELETED', roomCode);\n      }\n    });\n  }\n\n  public createRoom(subject: string, isPublic: boolean, hostId: string): Room {\n    const roomCode = this.generateRoomCode();\n    const now = Date.now();\n    \n    const room: Room = {\n      id: `room_${now}`,\n      code: roomCode,\n      subject,\n      isPublic,\n      hostId,\n      players: [],\n      questions: [],\n      currentQuestionIndex: 0,\n      gameState: 'waiting',\n      eliminationMode: false,\n      eliminationThreshold: 3,\n      autoMode: true,\n      answerRevealTime: 5\n    };\n\n    this.rooms.set(roomCode, room);\n\n    if (isPublic) {\n      const publicRoom: PublicRoom = {\n        id: room.id,\n        code: roomCode,\n        subject,\n        isPublic: true,\n        playerCount: 0,\n        hostActive: true,\n        lastHostActivity: now,\n        createdAt: now\n      };\n\n      this.publicRooms.set(roomCode, publicRoom);\n      this.hostSessions.set(roomCode, { sessionId: hostId, lastActivity: now });\n      \n      // 저장 및 동기화(한 번만 브로드캐스트)\n      this.saveRoomsToStorage();\n      const payload = this.getPublicRooms();\n      syncManager.broadcast('ROOMS_UPDATED', payload);\n      eventBus.emit('ROOMS_UPDATED', payload);\n    }\n\n    console.log('🏠 방 생성됨:', roomCode, subject);\n    return room;\n  }\n\n  public deleteRoom(roomCode: string) {\n    // 항상 삭제 시도하여 흔적 제거\n    this.publicRooms.delete(roomCode);\n    this.rooms.delete(roomCode);\n    this.hostSessions.delete(roomCode);\n    this.saveRoomsToStorage();\n    const payload = this.getPublicRooms();\n    syncManager.broadcast('ROOMS_UPDATED', payload);\n    eventBus.emit('ROOMS_UPDATED', payload);\n    syncManager.broadcast('ROOM_DELETED', roomCode);\n    console.log('🗑️ 방 삭제됨:', roomCode);\n  }\n\n  public updateHostActivity(roomCode: string, sessionId: string) {\n    const room = this.publicRooms.get(roomCode);\n    if (room) {\n      room.hostActive = true;\n      room.lastHostActivity = Date.now();\n      \n      this.hostSessions.set(roomCode, { sessionId, lastActivity: Date.now() });\n      this.saveRoomsToStorage();\n    }\n  }\n\n  public markHostInactive(roomCode: string) {\n    const room = this.publicRooms.get(roomCode);\n    if (room) {\n      // 즉시 영구 삭제하여 흔적 제거\n      this.deleteRoom(roomCode);\n    }\n  }\n\n  public joinRoom(roomCode: string, player: Player): Room | null {\n    let room = this.rooms.get(roomCode);\n    \n    // 방이 메모리에 없으면 공개방 목록에서 찾아서 생성\n    if (!room) {\n      const publicRoom = this.publicRooms.get(roomCode);\n      if (publicRoom) {\n        room = {\n          id: publicRoom.id,\n          code: roomCode,\n          subject: publicRoom.subject,\n          isPublic: publicRoom.isPublic,\n          hostId: 'temp_host',\n          players: [],\n          questions: [],\n          currentQuestionIndex: 0,\n          gameState: 'waiting',\n          eliminationMode: false,\n          eliminationThreshold: 3,\n          autoMode: true,\n          answerRevealTime: 5\n        };\n        this.rooms.set(roomCode, room);\n      }\n    }\n\n    if (room && !room.players.find(p => p.id === player.id)) {\n      room.players.push(player);\n      \n      // 공개방 플레이어 수 업데이트\n      const publicRoom = this.publicRooms.get(roomCode);\n      if (publicRoom) {\n        publicRoom.playerCount = room.players.length;\n        this.saveRoomsToStorage();\n      }\n\n      // 동기화 매니저에 알림\n      syncManager.addPlayer(player);\n      syncManager.updateGameData({ \n        room, \n        players: room.players \n      });\n\n      console.log('👤 플레이어 방 참여:', player.nickname, '→', roomCode);\n      return room;\n    }\n\n    return null;\n  }\n\n  public getRoom(roomCode: string): Room | null {\n    return this.rooms.get(roomCode) || null;\n  }\n\n  public getPublicRooms(): PublicRoom[] {\n    return Array.from(this.publicRooms.values());\n  }\n\n  private generateRoomCode(): string {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    let result = '';\n    for (let i = 0; i < 6; i++) {\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n  }\n\n  public destroy() {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n      this.cleanupInterval = null;\n    }\n    console.log('🏠 RoomManager 종료됨');\n  }\n}\n\n// 싱글톤 인스턴스\nexport const roomManager = new RoomManager();\nexport default roomManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}