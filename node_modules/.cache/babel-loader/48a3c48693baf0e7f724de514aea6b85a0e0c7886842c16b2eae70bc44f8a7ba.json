{"ast":null,"code":"/**\n * 방 생명주기 관리자\n * 방 생성, 삭제, 자동 정리를 담당\n */\n\nimport syncManager from './SyncManager';\n// 단순화를 위해 공개방 목록 동기화는 localStorage 기반으로만 처리합니다.\n\nclass RoomManager {\n  constructor() {\n    this.rooms = new Map();\n    this.publicRooms = new Map();\n    this.hostSessions = new Map();\n    this.cleanupInterval = null;\n    this.deletionTimers = new Map();\n    this.loadRoomsFromStorage();\n    this.startCleanupTimer();\n    this.setupSyncListeners();\n\n    // debug: console.debug('RoomManager init')\n  }\n  loadRoomsFromStorage() {\n    try {\n      const savedRooms = localStorage.getItem('publicRooms');\n      if (savedRooms) {\n        const roomData = JSON.parse(savedRooms);\n        // 찌꺼기 정리: 마지막 활동 이후 10초 초과이면서 hostActive=false 인 방은 제거\n        const now = Date.now();\n        const filtered = roomData.filter(r => now - (r.lastHostActivity || r.createdAt) < 10000);\n        filtered.forEach(room => {\n          this.publicRooms.set(room.code, room);\n        });\n        if (filtered.length !== roomData.length) {\n          this.saveRoomsToStorage();\n        }\n      }\n    } catch (e) {\n      console.error('방 데이터 로드 실패:', e);\n    }\n  }\n  saveRoomsToStorage() {\n    try {\n      const roomArray = Array.from(this.publicRooms.values());\n      localStorage.setItem('publicRooms', JSON.stringify(roomArray));\n      // debug: console.debug('publicRooms saved:', roomArray.length)\n    } catch (e) {\n      console.error('방 데이터 저장 실패:', e);\n    }\n  }\n  setupSyncListeners() {\n    // BroadcastChannel 기반 동기화 제거로 단순화\n\n    syncManager.addEventListener('HOST_ACTIVITY', data => {\n      this.updateHostActivity(data.roomCode, data.sessionId);\n    });\n\n    // ROOM_CREATED/DELETED 개별 이벤트는 사용하지 않고, ROOMS_UPDATED만 사용해 단순화\n\n    syncManager.addEventListener('ROOM_DELETED', roomCode => {\n      this.publicRooms.delete(roomCode);\n      this.rooms.delete(roomCode);\n      this.hostSessions.delete(roomCode);\n      this.saveRoomsToStorage();\n    });\n  }\n  startCleanupTimer() {\n    // 명시적 삭제 외에는 자동 삭제하지 않음\n    this.cleanupInterval = null;\n  }\n  cleanupInactiveRooms() {}\n  createRoom(subject, isPublic, hostId) {\n    const roomCode = this.generateRoomCode();\n    const now = Date.now();\n    const room = {\n      id: `room_${now}`,\n      code: roomCode,\n      subject,\n      isPublic,\n      hostId,\n      players: [],\n      questions: [],\n      currentQuestionIndex: 0,\n      gameState: 'waiting',\n      eliminationMode: false,\n      eliminationThreshold: 3,\n      autoMode: true,\n      answerRevealTime: 5\n    };\n    this.rooms.set(roomCode, room);\n    // debug: console.debug('createRoom:', { roomCode, subject, isPublic })\n\n    if (isPublic) {\n      const publicRoom = {\n        id: room.id,\n        code: roomCode,\n        subject,\n        isPublic: true,\n        playerCount: 0,\n        hostActive: true,\n        lastHostActivity: now,\n        createdAt: now\n      };\n      this.publicRooms.set(roomCode, publicRoom);\n      this.hostSessions.set(roomCode, {\n        sessionId: hostId,\n        lastActivity: now\n      });\n\n      // 저장만 수행(표시는 참여하기 탭이 localStorage에서 직접 로드)\n      this.saveRoomsToStorage();\n      // 즉시 브로드캐스트하여 타 탭이 빠르게 감지\n      syncManager.broadcast('GAME_DATA_UPDATE', {\n        room,\n        players: [],\n        questions: room.questions,\n        gameState: 'waiting',\n        currentQuestionIndex: 0\n      });\n      // debug: console.debug('public room stored:', publicRoom.code)\n    }\n\n    // debug: console.debug('room created:', roomCode)\n    return room;\n  }\n  deleteRoom(roomCode) {\n    // 항상 삭제 시도하여 흔적 제거\n    this.publicRooms.delete(roomCode);\n    this.rooms.delete(roomCode);\n    this.hostSessions.delete(roomCode);\n    this.saveRoomsToStorage();\n    // 목록 동기화는 localStorage 기반 주기 로드로 처리(추가 브로드캐스트 불필요)\n    syncManager.broadcast('ROOM_DELETED', roomCode);\n    // debug: console.debug('room deleted:', roomCode)\n  }\n  updateHostActivity(roomCode, sessionId) {\n    const room = this.publicRooms.get(roomCode);\n    if (room) {\n      room.hostActive = true;\n      room.lastHostActivity = Date.now();\n      this.hostSessions.set(roomCode, {\n        sessionId,\n        lastActivity: Date.now()\n      });\n      this.saveRoomsToStorage();\n      // 예정된 삭제 타이머가 있으면 취소\n      const t = this.deletionTimers.get(roomCode);\n      if (t) {\n        clearTimeout(t);\n        this.deletionTimers.delete(roomCode);\n      }\n    }\n  }\n  markHostInactive(roomCode) {\n    // 호스트 비활성: 10초 동안 활동 없으면 방 삭제\n    const room = this.publicRooms.get(roomCode);\n    if (!room) return;\n    room.hostActive = false;\n    this.saveRoomsToStorage();\n    if (this.deletionTimers.has(roomCode)) return;\n    const timer = setTimeout(() => {\n      const r = this.publicRooms.get(roomCode);\n      if (!r) return;\n      const now = Date.now();\n      const inactiveForMs = now - (r.lastHostActivity || r.createdAt);\n      if (!r.hostActive && inactiveForMs >= 10000) {\n        this.deleteRoom(roomCode);\n      }\n      this.deletionTimers.delete(roomCode);\n    }, 10000);\n    this.deletionTimers.set(roomCode, timer);\n  }\n  joinRoom(roomCode, player) {\n    let room = this.rooms.get(roomCode);\n    try {\n      console.info('[JOIN_TRACE] RM.enter', {\n        at: new Date().toISOString(),\n        roomCode,\n        memoryHas: !!room,\n        publicHas: this.publicRooms.has(roomCode)\n      });\n    } catch {}\n\n    // 방이 메모리에 없으면 공개방 목록에서 찾아서 생성\n    if (!room) {\n      let publicRoom = this.publicRooms.get(roomCode);\n      // 스토리지 최신화 후 한 번 더 탐색 (탭 간 지연 보정)\n      if (!publicRoom) {\n        try {\n          const saved = localStorage.getItem('publicRooms');\n          if (saved) {\n            const list = JSON.parse(saved);\n            const now = Date.now();\n            const filtered = list.filter(r => now - (r.lastHostActivity || r.createdAt) < 10000);\n            this.publicRooms.clear();\n            filtered.forEach(r => this.publicRooms.set(r.code, r));\n            publicRoom = this.publicRooms.get(roomCode);\n          }\n        } catch {}\n      }\n      if (publicRoom) {\n        room = {\n          id: publicRoom.id,\n          code: roomCode,\n          subject: publicRoom.subject,\n          isPublic: publicRoom.isPublic,\n          hostId: 'temp_host',\n          players: [],\n          questions: [],\n          currentQuestionIndex: 0,\n          gameState: 'waiting',\n          eliminationMode: false,\n          eliminationThreshold: 3,\n          autoMode: true,\n          answerRevealTime: 5\n        };\n        this.rooms.set(roomCode, room);\n        try {\n          console.info('[JOIN_TRACE] RM.stubCreated', {\n            roomCode\n          });\n        } catch {}\n      }\n    }\n    if (!room) {\n      try {\n        console.warn('[JOIN_TRACE] RM.noRoom', {\n          roomCode\n        });\n      } catch {}\n      return null;\n    }\n    const already = room.players.find(p => p.id === player.id);\n    if (!already) {\n      room.players.push(player);\n      const publicRoom = this.publicRooms.get(roomCode);\n      if (publicRoom) {\n        publicRoom.playerCount = room.players.length;\n        this.saveRoomsToStorage();\n      }\n      syncManager.addPlayer(player);\n    }\n    // 항상 최신 상태 브로드캐스트\n    syncManager.updateGameData({\n      room,\n      players: room.players\n    });\n    try {\n      console.info('[JOIN_TRACE] RM.success', {\n        roomCode,\n        players: room.players.length\n      });\n    } catch {}\n    return room;\n  }\n  getRoom(roomCode) {\n    return this.rooms.get(roomCode) || null;\n  }\n  getPublicRooms() {\n    // 항상 스토리지 최신화(탭 간 동기화 보정)\n    try {\n      const saved = localStorage.getItem('publicRooms');\n      if (saved) {\n        const list = JSON.parse(saved);\n        const now = Date.now();\n        const filtered = list.filter(r => now - (r.lastHostActivity || r.createdAt) < 10000);\n        this.publicRooms.clear();\n        filtered.forEach(r => this.publicRooms.set(r.code, r));\n      }\n    } catch {}\n    return Array.from(this.publicRooms.values());\n  }\n  generateRoomCode() {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    let result = '';\n    for (let i = 0; i < 4; i++) {\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n  }\n  destroy() {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n      this.cleanupInterval = null;\n    }\n    console.log('🏠 RoomManager 종료됨');\n  }\n}\n\n// 싱글톤 인스턴스\nexport const roomManager = new RoomManager();\nexport default roomManager;","map":{"version":3,"names":["syncManager","RoomManager","constructor","rooms","Map","publicRooms","hostSessions","cleanupInterval","deletionTimers","loadRoomsFromStorage","startCleanupTimer","setupSyncListeners","savedRooms","localStorage","getItem","roomData","JSON","parse","now","Date","filtered","filter","r","lastHostActivity","createdAt","forEach","room","set","code","length","saveRoomsToStorage","e","console","error","roomArray","Array","from","values","setItem","stringify","addEventListener","data","updateHostActivity","roomCode","sessionId","delete","cleanupInactiveRooms","createRoom","subject","isPublic","hostId","generateRoomCode","id","players","questions","currentQuestionIndex","gameState","eliminationMode","eliminationThreshold","autoMode","answerRevealTime","publicRoom","playerCount","hostActive","lastActivity","broadcast","deleteRoom","get","t","clearTimeout","markHostInactive","has","timer","setTimeout","inactiveForMs","joinRoom","player","info","at","toISOString","memoryHas","publicHas","saved","list","clear","warn","already","find","p","push","addPlayer","updateGameData","getRoom","getPublicRooms","chars","result","i","charAt","Math","floor","random","destroy","clearInterval","log","roomManager"],"sources":["C:/Users/9204r/.cursor/avatar/src/services/RoomManager.ts"],"sourcesContent":["/**\n * 방 생명주기 관리자\n * 방 생성, 삭제, 자동 정리를 담당\n */\n\nimport { Room, Player } from '../types/game';\nimport syncManager from './SyncManager';\n// 단순화를 위해 공개방 목록 동기화는 localStorage 기반으로만 처리합니다.\n\nexport interface PublicRoom {\n  id: string;\n  code: string;\n  subject: string;\n  isPublic: boolean;\n  playerCount: number;\n  hostActive: boolean;\n  lastHostActivity: number;\n  createdAt: number;\n}\n\nclass RoomManager {\n  private rooms: Map<string, Room> = new Map();\n  private publicRooms: Map<string, PublicRoom> = new Map();\n  private hostSessions: Map<string, { sessionId: string; lastActivity: number }> = new Map();\n  private cleanupInterval: NodeJS.Timeout | null = null;\n  private deletionTimers: Map<string, NodeJS.Timeout> = new Map();\n\n  constructor() {\n    this.loadRoomsFromStorage();\n    this.startCleanupTimer();\n    this.setupSyncListeners();\n    \n    // debug: console.debug('RoomManager init')\n  }\n\n  private loadRoomsFromStorage() {\n    try {\n      const savedRooms = localStorage.getItem('publicRooms');\n      if (savedRooms) {\n        const roomData = JSON.parse(savedRooms) as PublicRoom[];\n        // 찌꺼기 정리: 마지막 활동 이후 10초 초과이면서 hostActive=false 인 방은 제거\n        const now = Date.now();\n        const filtered = roomData.filter(r => (now - (r.lastHostActivity || r.createdAt)) < 10000);\n        filtered.forEach((room: PublicRoom) => {\n          this.publicRooms.set(room.code, room);\n        });\n        if (filtered.length !== roomData.length) {\n          this.saveRoomsToStorage();\n        }\n      }\n    } catch (e) {\n      console.error('방 데이터 로드 실패:', e);\n    }\n  }\n\n  private saveRoomsToStorage() {\n    try {\n      const roomArray = Array.from(this.publicRooms.values());\n      localStorage.setItem('publicRooms', JSON.stringify(roomArray));\n      // debug: console.debug('publicRooms saved:', roomArray.length)\n    } catch (e) {\n      console.error('방 데이터 저장 실패:', e);\n    }\n  }\n\n  private setupSyncListeners() {\n    // BroadcastChannel 기반 동기화 제거로 단순화\n\n    syncManager.addEventListener('HOST_ACTIVITY', (data: { roomCode: string; sessionId: string }) => {\n      this.updateHostActivity(data.roomCode, data.sessionId);\n    });\n\n    // ROOM_CREATED/DELETED 개별 이벤트는 사용하지 않고, ROOMS_UPDATED만 사용해 단순화\n\n    syncManager.addEventListener('ROOM_DELETED', (roomCode: string) => {\n      this.publicRooms.delete(roomCode);\n      this.rooms.delete(roomCode);\n      this.hostSessions.delete(roomCode);\n      this.saveRoomsToStorage();\n    });\n  }\n\n  private startCleanupTimer() {\n    // 명시적 삭제 외에는 자동 삭제하지 않음\n    this.cleanupInterval = null;\n  }\n\n  private cleanupInactiveRooms() {}\n\n  public createRoom(subject: string, isPublic: boolean, hostId: string): Room {\n    const roomCode = this.generateRoomCode();\n    const now = Date.now();\n    \n    const room: Room = {\n      id: `room_${now}`,\n      code: roomCode,\n      subject,\n      isPublic,\n      hostId,\n      players: [],\n      questions: [],\n      currentQuestionIndex: 0,\n      gameState: 'waiting',\n      eliminationMode: false,\n      eliminationThreshold: 3,\n      autoMode: true,\n      answerRevealTime: 5\n    };\n\n    this.rooms.set(roomCode, room);\n    // debug: console.debug('createRoom:', { roomCode, subject, isPublic })\n\n    if (isPublic) {\n      const publicRoom: PublicRoom = {\n        id: room.id,\n        code: roomCode,\n        subject,\n        isPublic: true,\n        playerCount: 0,\n        hostActive: true,\n        lastHostActivity: now,\n        createdAt: now\n      };\n\n      this.publicRooms.set(roomCode, publicRoom);\n      this.hostSessions.set(roomCode, { sessionId: hostId, lastActivity: now });\n      \n      // 저장만 수행(표시는 참여하기 탭이 localStorage에서 직접 로드)\n      this.saveRoomsToStorage();\n      // 즉시 브로드캐스트하여 타 탭이 빠르게 감지\n      syncManager.broadcast('GAME_DATA_UPDATE', { room, players: [], questions: room.questions, gameState: 'waiting', currentQuestionIndex: 0 });\n      // debug: console.debug('public room stored:', publicRoom.code)\n    }\n\n    // debug: console.debug('room created:', roomCode)\n    return room;\n  }\n\n  public deleteRoom(roomCode: string) {\n    // 항상 삭제 시도하여 흔적 제거\n    this.publicRooms.delete(roomCode);\n    this.rooms.delete(roomCode);\n    this.hostSessions.delete(roomCode);\n    this.saveRoomsToStorage();\n    // 목록 동기화는 localStorage 기반 주기 로드로 처리(추가 브로드캐스트 불필요)\n    syncManager.broadcast('ROOM_DELETED', roomCode);\n    // debug: console.debug('room deleted:', roomCode)\n  }\n\n  public updateHostActivity(roomCode: string, sessionId: string) {\n    const room = this.publicRooms.get(roomCode);\n    if (room) {\n      room.hostActive = true;\n      room.lastHostActivity = Date.now();\n      \n      this.hostSessions.set(roomCode, { sessionId, lastActivity: Date.now() });\n      this.saveRoomsToStorage();\n      // 예정된 삭제 타이머가 있으면 취소\n      const t = this.deletionTimers.get(roomCode);\n      if (t) {\n        clearTimeout(t);\n        this.deletionTimers.delete(roomCode);\n      }\n    }\n  }\n\n  public markHostInactive(roomCode: string) {\n    // 호스트 비활성: 10초 동안 활동 없으면 방 삭제\n    const room = this.publicRooms.get(roomCode);\n    if (!room) return;\n    room.hostActive = false;\n    this.saveRoomsToStorage();\n    if (this.deletionTimers.has(roomCode)) return;\n    const timer = setTimeout(() => {\n      const r = this.publicRooms.get(roomCode);\n      if (!r) return;\n      const now = Date.now();\n      const inactiveForMs = now - (r.lastHostActivity || r.createdAt);\n      if (!r.hostActive && inactiveForMs >= 10000) {\n        this.deleteRoom(roomCode);\n      }\n      this.deletionTimers.delete(roomCode);\n    }, 10000);\n    this.deletionTimers.set(roomCode, timer);\n  }\n\n  public joinRoom(roomCode: string, player: Player): Room | null {\n    let room = this.rooms.get(roomCode);\n    try {\n      console.info('[JOIN_TRACE] RM.enter', {\n        at: new Date().toISOString(),\n        roomCode,\n        memoryHas: !!room,\n        publicHas: this.publicRooms.has(roomCode)\n      });\n    } catch {}\n    \n    // 방이 메모리에 없으면 공개방 목록에서 찾아서 생성\n    if (!room) {\n      let publicRoom = this.publicRooms.get(roomCode);\n      // 스토리지 최신화 후 한 번 더 탐색 (탭 간 지연 보정)\n      if (!publicRoom) {\n        try {\n          const saved = localStorage.getItem('publicRooms');\n          if (saved) {\n            const list = JSON.parse(saved) as PublicRoom[];\n            const now = Date.now();\n            const filtered = list.filter(r => (now - (r.lastHostActivity || r.createdAt)) < 10000);\n            this.publicRooms.clear();\n            filtered.forEach(r => this.publicRooms.set(r.code, r));\n            publicRoom = this.publicRooms.get(roomCode);\n          }\n        } catch {}\n      }\n      if (publicRoom) {\n        room = {\n          id: publicRoom.id,\n          code: roomCode,\n          subject: publicRoom.subject,\n          isPublic: publicRoom.isPublic,\n          hostId: 'temp_host',\n          players: [],\n          questions: [],\n          currentQuestionIndex: 0,\n          gameState: 'waiting',\n          eliminationMode: false,\n          eliminationThreshold: 3,\n          autoMode: true,\n          answerRevealTime: 5\n        };\n        this.rooms.set(roomCode, room);\n        try { console.info('[JOIN_TRACE] RM.stubCreated', { roomCode }); } catch {}\n      }\n    }\n\n    if (!room) {\n      try { console.warn('[JOIN_TRACE] RM.noRoom', { roomCode }); } catch {}\n      return null;\n    }\n\n    const already = room.players.find(p => p.id === player.id);\n    if (!already) {\n      room.players.push(player);\n      const publicRoom = this.publicRooms.get(roomCode);\n      if (publicRoom) {\n        publicRoom.playerCount = room.players.length;\n      this.saveRoomsToStorage();\n      }\n      syncManager.addPlayer(player);\n    }\n    // 항상 최신 상태 브로드캐스트\n    syncManager.updateGameData({ room, players: room.players });\n    try { console.info('[JOIN_TRACE] RM.success', { roomCode, players: room.players.length }); } catch {}\n    return room;\n  }\n\n  public getRoom(roomCode: string): Room | null {\n    return this.rooms.get(roomCode) || null;\n  }\n\n  public getPublicRooms(): PublicRoom[] {\n    // 항상 스토리지 최신화(탭 간 동기화 보정)\n    try {\n      const saved = localStorage.getItem('publicRooms');\n      if (saved) {\n        const list = JSON.parse(saved) as PublicRoom[];\n        const now = Date.now();\n        const filtered = list.filter(r => (now - (r.lastHostActivity || r.createdAt)) < 10000);\n        this.publicRooms.clear();\n        filtered.forEach(r => this.publicRooms.set(r.code, r));\n      }\n    } catch {}\n    return Array.from(this.publicRooms.values());\n  }\n\n  private generateRoomCode(): string {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    let result = '';\n    for (let i = 0; i < 4; i++) {\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n  }\n\n  public destroy() {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n      this.cleanupInterval = null;\n    }\n    console.log('🏠 RoomManager 종료됨');\n  }\n}\n\n// 싱글톤 인스턴스\nexport const roomManager = new RoomManager();\nexport default roomManager;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAGA,OAAOA,WAAW,MAAM,eAAe;AACvC;;AAaA,MAAMC,WAAW,CAAC;EAOhBC,WAAWA,CAAA,EAAG;IAAA,KANNC,KAAK,GAAsB,IAAIC,GAAG,CAAC,CAAC;IAAA,KACpCC,WAAW,GAA4B,IAAID,GAAG,CAAC,CAAC;IAAA,KAChDE,YAAY,GAA6D,IAAIF,GAAG,CAAC,CAAC;IAAA,KAClFG,eAAe,GAA0B,IAAI;IAAA,KAC7CC,cAAc,GAAgC,IAAIJ,GAAG,CAAC,CAAC;IAG7D,IAAI,CAACK,oBAAoB,CAAC,CAAC;IAC3B,IAAI,CAACC,iBAAiB,CAAC,CAAC;IACxB,IAAI,CAACC,kBAAkB,CAAC,CAAC;;IAEzB;EACF;EAEQF,oBAAoBA,CAAA,EAAG;IAC7B,IAAI;MACF,MAAMG,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;MACtD,IAAIF,UAAU,EAAE;QACd,MAAMG,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACL,UAAU,CAAiB;QACvD;QACA,MAAMM,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC;QACtB,MAAME,QAAQ,GAAGL,QAAQ,CAACM,MAAM,CAACC,CAAC,IAAKJ,GAAG,IAAII,CAAC,CAACC,gBAAgB,IAAID,CAAC,CAACE,SAAS,CAAC,GAAI,KAAK,CAAC;QAC1FJ,QAAQ,CAACK,OAAO,CAAEC,IAAgB,IAAK;UACrC,IAAI,CAACrB,WAAW,CAACsB,GAAG,CAACD,IAAI,CAACE,IAAI,EAAEF,IAAI,CAAC;QACvC,CAAC,CAAC;QACF,IAAIN,QAAQ,CAACS,MAAM,KAAKd,QAAQ,CAACc,MAAM,EAAE;UACvC,IAAI,CAACC,kBAAkB,CAAC,CAAC;QAC3B;MACF;IACF,CAAC,CAAC,OAAOC,CAAC,EAAE;MACVC,OAAO,CAACC,KAAK,CAAC,cAAc,EAAEF,CAAC,CAAC;IAClC;EACF;EAEQD,kBAAkBA,CAAA,EAAG;IAC3B,IAAI;MACF,MAAMI,SAAS,GAAGC,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC/B,WAAW,CAACgC,MAAM,CAAC,CAAC,CAAC;MACvDxB,YAAY,CAACyB,OAAO,CAAC,aAAa,EAAEtB,IAAI,CAACuB,SAAS,CAACL,SAAS,CAAC,CAAC;MAC9D;IACF,CAAC,CAAC,OAAOH,CAAC,EAAE;MACVC,OAAO,CAACC,KAAK,CAAC,cAAc,EAAEF,CAAC,CAAC;IAClC;EACF;EAEQpB,kBAAkBA,CAAA,EAAG;IAC3B;;IAEAX,WAAW,CAACwC,gBAAgB,CAAC,eAAe,EAAGC,IAA6C,IAAK;MAC/F,IAAI,CAACC,kBAAkB,CAACD,IAAI,CAACE,QAAQ,EAAEF,IAAI,CAACG,SAAS,CAAC;IACxD,CAAC,CAAC;;IAEF;;IAEA5C,WAAW,CAACwC,gBAAgB,CAAC,cAAc,EAAGG,QAAgB,IAAK;MACjE,IAAI,CAACtC,WAAW,CAACwC,MAAM,CAACF,QAAQ,CAAC;MACjC,IAAI,CAACxC,KAAK,CAAC0C,MAAM,CAACF,QAAQ,CAAC;MAC3B,IAAI,CAACrC,YAAY,CAACuC,MAAM,CAACF,QAAQ,CAAC;MAClC,IAAI,CAACb,kBAAkB,CAAC,CAAC;IAC3B,CAAC,CAAC;EACJ;EAEQpB,iBAAiBA,CAAA,EAAG;IAC1B;IACA,IAAI,CAACH,eAAe,GAAG,IAAI;EAC7B;EAEQuC,oBAAoBA,CAAA,EAAG,CAAC;EAEzBC,UAAUA,CAACC,OAAe,EAAEC,QAAiB,EAAEC,MAAc,EAAQ;IAC1E,MAAMP,QAAQ,GAAG,IAAI,CAACQ,gBAAgB,CAAC,CAAC;IACxC,MAAMjC,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC;IAEtB,MAAMQ,IAAU,GAAG;MACjB0B,EAAE,EAAE,QAAQlC,GAAG,EAAE;MACjBU,IAAI,EAAEe,QAAQ;MACdK,OAAO;MACPC,QAAQ;MACRC,MAAM;MACNG,OAAO,EAAE,EAAE;MACXC,SAAS,EAAE,EAAE;MACbC,oBAAoB,EAAE,CAAC;MACvBC,SAAS,EAAE,SAAS;MACpBC,eAAe,EAAE,KAAK;MACtBC,oBAAoB,EAAE,CAAC;MACvBC,QAAQ,EAAE,IAAI;MACdC,gBAAgB,EAAE;IACpB,CAAC;IAED,IAAI,CAACzD,KAAK,CAACwB,GAAG,CAACgB,QAAQ,EAAEjB,IAAI,CAAC;IAC9B;;IAEA,IAAIuB,QAAQ,EAAE;MACZ,MAAMY,UAAsB,GAAG;QAC7BT,EAAE,EAAE1B,IAAI,CAAC0B,EAAE;QACXxB,IAAI,EAAEe,QAAQ;QACdK,OAAO;QACPC,QAAQ,EAAE,IAAI;QACda,WAAW,EAAE,CAAC;QACdC,UAAU,EAAE,IAAI;QAChBxC,gBAAgB,EAAEL,GAAG;QACrBM,SAAS,EAAEN;MACb,CAAC;MAED,IAAI,CAACb,WAAW,CAACsB,GAAG,CAACgB,QAAQ,EAAEkB,UAAU,CAAC;MAC1C,IAAI,CAACvD,YAAY,CAACqB,GAAG,CAACgB,QAAQ,EAAE;QAAEC,SAAS,EAAEM,MAAM;QAAEc,YAAY,EAAE9C;MAAI,CAAC,CAAC;;MAEzE;MACA,IAAI,CAACY,kBAAkB,CAAC,CAAC;MACzB;MACA9B,WAAW,CAACiE,SAAS,CAAC,kBAAkB,EAAE;QAAEvC,IAAI;QAAE2B,OAAO,EAAE,EAAE;QAAEC,SAAS,EAAE5B,IAAI,CAAC4B,SAAS;QAAEE,SAAS,EAAE,SAAS;QAAED,oBAAoB,EAAE;MAAE,CAAC,CAAC;MAC1I;IACF;;IAEA;IACA,OAAO7B,IAAI;EACb;EAEOwC,UAAUA,CAACvB,QAAgB,EAAE;IAClC;IACA,IAAI,CAACtC,WAAW,CAACwC,MAAM,CAACF,QAAQ,CAAC;IACjC,IAAI,CAACxC,KAAK,CAAC0C,MAAM,CAACF,QAAQ,CAAC;IAC3B,IAAI,CAACrC,YAAY,CAACuC,MAAM,CAACF,QAAQ,CAAC;IAClC,IAAI,CAACb,kBAAkB,CAAC,CAAC;IACzB;IACA9B,WAAW,CAACiE,SAAS,CAAC,cAAc,EAAEtB,QAAQ,CAAC;IAC/C;EACF;EAEOD,kBAAkBA,CAACC,QAAgB,EAAEC,SAAiB,EAAE;IAC7D,MAAMlB,IAAI,GAAG,IAAI,CAACrB,WAAW,CAAC8D,GAAG,CAACxB,QAAQ,CAAC;IAC3C,IAAIjB,IAAI,EAAE;MACRA,IAAI,CAACqC,UAAU,GAAG,IAAI;MACtBrC,IAAI,CAACH,gBAAgB,GAAGJ,IAAI,CAACD,GAAG,CAAC,CAAC;MAElC,IAAI,CAACZ,YAAY,CAACqB,GAAG,CAACgB,QAAQ,EAAE;QAAEC,SAAS;QAAEoB,YAAY,EAAE7C,IAAI,CAACD,GAAG,CAAC;MAAE,CAAC,CAAC;MACxE,IAAI,CAACY,kBAAkB,CAAC,CAAC;MACzB;MACA,MAAMsC,CAAC,GAAG,IAAI,CAAC5D,cAAc,CAAC2D,GAAG,CAACxB,QAAQ,CAAC;MAC3C,IAAIyB,CAAC,EAAE;QACLC,YAAY,CAACD,CAAC,CAAC;QACf,IAAI,CAAC5D,cAAc,CAACqC,MAAM,CAACF,QAAQ,CAAC;MACtC;IACF;EACF;EAEO2B,gBAAgBA,CAAC3B,QAAgB,EAAE;IACxC;IACA,MAAMjB,IAAI,GAAG,IAAI,CAACrB,WAAW,CAAC8D,GAAG,CAACxB,QAAQ,CAAC;IAC3C,IAAI,CAACjB,IAAI,EAAE;IACXA,IAAI,CAACqC,UAAU,GAAG,KAAK;IACvB,IAAI,CAACjC,kBAAkB,CAAC,CAAC;IACzB,IAAI,IAAI,CAACtB,cAAc,CAAC+D,GAAG,CAAC5B,QAAQ,CAAC,EAAE;IACvC,MAAM6B,KAAK,GAAGC,UAAU,CAAC,MAAM;MAC7B,MAAMnD,CAAC,GAAG,IAAI,CAACjB,WAAW,CAAC8D,GAAG,CAACxB,QAAQ,CAAC;MACxC,IAAI,CAACrB,CAAC,EAAE;MACR,MAAMJ,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC;MACtB,MAAMwD,aAAa,GAAGxD,GAAG,IAAII,CAAC,CAACC,gBAAgB,IAAID,CAAC,CAACE,SAAS,CAAC;MAC/D,IAAI,CAACF,CAAC,CAACyC,UAAU,IAAIW,aAAa,IAAI,KAAK,EAAE;QAC3C,IAAI,CAACR,UAAU,CAACvB,QAAQ,CAAC;MAC3B;MACA,IAAI,CAACnC,cAAc,CAACqC,MAAM,CAACF,QAAQ,CAAC;IACtC,CAAC,EAAE,KAAK,CAAC;IACT,IAAI,CAACnC,cAAc,CAACmB,GAAG,CAACgB,QAAQ,EAAE6B,KAAK,CAAC;EAC1C;EAEOG,QAAQA,CAAChC,QAAgB,EAAEiC,MAAc,EAAe;IAC7D,IAAIlD,IAAI,GAAG,IAAI,CAACvB,KAAK,CAACgE,GAAG,CAACxB,QAAQ,CAAC;IACnC,IAAI;MACFX,OAAO,CAAC6C,IAAI,CAAC,uBAAuB,EAAE;QACpCC,EAAE,EAAE,IAAI3D,IAAI,CAAC,CAAC,CAAC4D,WAAW,CAAC,CAAC;QAC5BpC,QAAQ;QACRqC,SAAS,EAAE,CAAC,CAACtD,IAAI;QACjBuD,SAAS,EAAE,IAAI,CAAC5E,WAAW,CAACkE,GAAG,CAAC5B,QAAQ;MAC1C,CAAC,CAAC;IACJ,CAAC,CAAC,MAAM,CAAC;;IAET;IACA,IAAI,CAACjB,IAAI,EAAE;MACT,IAAImC,UAAU,GAAG,IAAI,CAACxD,WAAW,CAAC8D,GAAG,CAACxB,QAAQ,CAAC;MAC/C;MACA,IAAI,CAACkB,UAAU,EAAE;QACf,IAAI;UACF,MAAMqB,KAAK,GAAGrE,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;UACjD,IAAIoE,KAAK,EAAE;YACT,MAAMC,IAAI,GAAGnE,IAAI,CAACC,KAAK,CAACiE,KAAK,CAAiB;YAC9C,MAAMhE,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC;YACtB,MAAME,QAAQ,GAAG+D,IAAI,CAAC9D,MAAM,CAACC,CAAC,IAAKJ,GAAG,IAAII,CAAC,CAACC,gBAAgB,IAAID,CAAC,CAACE,SAAS,CAAC,GAAI,KAAK,CAAC;YACtF,IAAI,CAACnB,WAAW,CAAC+E,KAAK,CAAC,CAAC;YACxBhE,QAAQ,CAACK,OAAO,CAACH,CAAC,IAAI,IAAI,CAACjB,WAAW,CAACsB,GAAG,CAACL,CAAC,CAACM,IAAI,EAAEN,CAAC,CAAC,CAAC;YACtDuC,UAAU,GAAG,IAAI,CAACxD,WAAW,CAAC8D,GAAG,CAACxB,QAAQ,CAAC;UAC7C;QACF,CAAC,CAAC,MAAM,CAAC;MACX;MACA,IAAIkB,UAAU,EAAE;QACdnC,IAAI,GAAG;UACL0B,EAAE,EAAES,UAAU,CAACT,EAAE;UACjBxB,IAAI,EAAEe,QAAQ;UACdK,OAAO,EAAEa,UAAU,CAACb,OAAO;UAC3BC,QAAQ,EAAEY,UAAU,CAACZ,QAAQ;UAC7BC,MAAM,EAAE,WAAW;UACnBG,OAAO,EAAE,EAAE;UACXC,SAAS,EAAE,EAAE;UACbC,oBAAoB,EAAE,CAAC;UACvBC,SAAS,EAAE,SAAS;UACpBC,eAAe,EAAE,KAAK;UACtBC,oBAAoB,EAAE,CAAC;UACvBC,QAAQ,EAAE,IAAI;UACdC,gBAAgB,EAAE;QACpB,CAAC;QACD,IAAI,CAACzD,KAAK,CAACwB,GAAG,CAACgB,QAAQ,EAAEjB,IAAI,CAAC;QAC9B,IAAI;UAAEM,OAAO,CAAC6C,IAAI,CAAC,6BAA6B,EAAE;YAAElC;UAAS,CAAC,CAAC;QAAE,CAAC,CAAC,MAAM,CAAC;MAC5E;IACF;IAEA,IAAI,CAACjB,IAAI,EAAE;MACT,IAAI;QAAEM,OAAO,CAACqD,IAAI,CAAC,wBAAwB,EAAE;UAAE1C;QAAS,CAAC,CAAC;MAAE,CAAC,CAAC,MAAM,CAAC;MACrE,OAAO,IAAI;IACb;IAEA,MAAM2C,OAAO,GAAG5D,IAAI,CAAC2B,OAAO,CAACkC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACpC,EAAE,KAAKwB,MAAM,CAACxB,EAAE,CAAC;IAC1D,IAAI,CAACkC,OAAO,EAAE;MACZ5D,IAAI,CAAC2B,OAAO,CAACoC,IAAI,CAACb,MAAM,CAAC;MACzB,MAAMf,UAAU,GAAG,IAAI,CAACxD,WAAW,CAAC8D,GAAG,CAACxB,QAAQ,CAAC;MACjD,IAAIkB,UAAU,EAAE;QACdA,UAAU,CAACC,WAAW,GAAGpC,IAAI,CAAC2B,OAAO,CAACxB,MAAM;QAC9C,IAAI,CAACC,kBAAkB,CAAC,CAAC;MACzB;MACA9B,WAAW,CAAC0F,SAAS,CAACd,MAAM,CAAC;IAC/B;IACA;IACA5E,WAAW,CAAC2F,cAAc,CAAC;MAAEjE,IAAI;MAAE2B,OAAO,EAAE3B,IAAI,CAAC2B;IAAQ,CAAC,CAAC;IAC3D,IAAI;MAAErB,OAAO,CAAC6C,IAAI,CAAC,yBAAyB,EAAE;QAAElC,QAAQ;QAAEU,OAAO,EAAE3B,IAAI,CAAC2B,OAAO,CAACxB;MAAO,CAAC,CAAC;IAAE,CAAC,CAAC,MAAM,CAAC;IACpG,OAAOH,IAAI;EACb;EAEOkE,OAAOA,CAACjD,QAAgB,EAAe;IAC5C,OAAO,IAAI,CAACxC,KAAK,CAACgE,GAAG,CAACxB,QAAQ,CAAC,IAAI,IAAI;EACzC;EAEOkD,cAAcA,CAAA,EAAiB;IACpC;IACA,IAAI;MACF,MAAMX,KAAK,GAAGrE,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;MACjD,IAAIoE,KAAK,EAAE;QACT,MAAMC,IAAI,GAAGnE,IAAI,CAACC,KAAK,CAACiE,KAAK,CAAiB;QAC9C,MAAMhE,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC;QACtB,MAAME,QAAQ,GAAG+D,IAAI,CAAC9D,MAAM,CAACC,CAAC,IAAKJ,GAAG,IAAII,CAAC,CAACC,gBAAgB,IAAID,CAAC,CAACE,SAAS,CAAC,GAAI,KAAK,CAAC;QACtF,IAAI,CAACnB,WAAW,CAAC+E,KAAK,CAAC,CAAC;QACxBhE,QAAQ,CAACK,OAAO,CAACH,CAAC,IAAI,IAAI,CAACjB,WAAW,CAACsB,GAAG,CAACL,CAAC,CAACM,IAAI,EAAEN,CAAC,CAAC,CAAC;MACxD;IACF,CAAC,CAAC,MAAM,CAAC;IACT,OAAOa,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC/B,WAAW,CAACgC,MAAM,CAAC,CAAC,CAAC;EAC9C;EAEQc,gBAAgBA,CAAA,EAAW;IACjC,MAAM2C,KAAK,GAAG,sCAAsC;IACpD,IAAIC,MAAM,GAAG,EAAE;IACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1BD,MAAM,IAAID,KAAK,CAACG,MAAM,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGN,KAAK,CAACjE,MAAM,CAAC,CAAC;IAClE;IACA,OAAOkE,MAAM;EACf;EAEOM,OAAOA,CAAA,EAAG;IACf,IAAI,IAAI,CAAC9F,eAAe,EAAE;MACxB+F,aAAa,CAAC,IAAI,CAAC/F,eAAe,CAAC;MACnC,IAAI,CAACA,eAAe,GAAG,IAAI;IAC7B;IACAyB,OAAO,CAACuE,GAAG,CAAC,oBAAoB,CAAC;EACnC;AACF;;AAEA;AACA,OAAO,MAAMC,WAAW,GAAG,IAAIvG,WAAW,CAAC,CAAC;AAC5C,eAAeuG,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}