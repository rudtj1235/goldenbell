{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\9204r\\\\.cursor\\\\avatar\\\\src\\\\contexts\\\\NewGameContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n/**\r\n * 새로운 모듈 기반 게임 컨텍스트\r\n * SyncManager, RoomManager, EventBus를 활용한 독립적인 상태 관리\r\n */\n\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport syncManager from '../services/SyncManager';\nimport roomManager from '../services/RoomManager';\nimport eventBus from '../services/EventBus';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameContext = /*#__PURE__*/createContext(null);\nconst initialGameSettings = {\n  timeLimit: 30,\n  answerRevealTime: 5,\n  eliminationMode: false,\n  eliminationThreshold: 3,\n  autoMode: true\n};\nconst initialState = {\n  room: null,\n  players: [],\n  questions: [],\n  gameState: 'waiting',\n  currentQuestionIndex: 0,\n  gameSettings: initialGameSettings,\n  isLoading: false,\n  error: null\n};\nexport function NewGameProvider({\n  children\n}) {\n  _s();\n  const [state, setState] = useState(initialState);\n  useEffect(() => {\n    // SyncManager에서 초기 데이터 로드\n    const gameData = syncManager.getGameData();\n    setState(prev => ({\n      ...prev,\n      room: gameData.room,\n      players: gameData.players,\n      questions: gameData.questions,\n      gameState: gameData.gameState,\n      currentQuestionIndex: gameData.currentQuestionIndex\n    }));\n\n    // 이벤트 리스너 등록\n    const unsubscribers = [eventBus.on('GAME_DATA_UPDATE', handleGameDataUpdate), eventBus.on('PLAYER_JOIN', handlePlayerJoin), eventBus.on('PLAYER_LEAVE', handlePlayerLeave), eventBus.on('GAME_STATE_CHANGE', handleGameStateChange), eventBus.on('ROOM_CREATED', handleRoomCreated), eventBus.on('ROOM_DELETED', handleRoomDeleted)];\n\n    // SyncManager 리스너는 해제 함수가 없으므로 별도 관리\n    const syncListeners = [];\n    const addSync = (type, cb) => {\n      syncManager.addEventListener(type, cb);\n      syncListeners.push({\n        type,\n        cb\n      });\n    };\n    addSync('GAME_DATA_UPDATE', handleSyncDataUpdate);\n    addSync('PLAYER_JOIN', handleSyncPlayerJoin);\n    addSync('PLAYER_LEAVE', handleSyncPlayerLeave);\n    addSync('GAME_STATE_CHANGE', handleSyncGameStateChange);\n    console.log('🎮 NewGameContext 초기화됨');\n    return () => {\n      unsubscribers.forEach(unsub => unsub());\n      // SyncManager 리스너 해제\n      syncListeners.forEach(({\n        type,\n        cb\n      }) => {\n        try {\n          var _removeEventListener, _ref;\n          (_removeEventListener = (_ref = syncManager).removeEventListener) === null || _removeEventListener === void 0 ? void 0 : _removeEventListener.call(_ref, type, cb);\n        } catch {}\n      });\n      console.log('🎮 NewGameContext 정리됨');\n    };\n  }, []);\n  const handleGameDataUpdate = data => {\n    console.log('🔄 게임 데이터 업데이트:', data);\n    setState(prev => ({\n      ...prev,\n      ...data\n    }));\n  };\n  const handlePlayerJoin = player => {\n    setState(prev => ({\n      ...prev,\n      players: prev.players.find(p => p.id === player.id) ? prev.players : [...prev.players, player]\n    }));\n  };\n  const handlePlayerLeave = playerId => {\n    setState(prev => ({\n      ...prev,\n      players: prev.players.filter(p => p.id !== playerId)\n    }));\n  };\n  const handleGameStateChange = data => {\n    setState(prev => ({\n      ...prev,\n      ...data\n    }));\n  };\n  const handleRoomCreated = room => {\n    console.log('🏠 방 생성됨:', room);\n  };\n  const handleRoomDeleted = roomCode => {\n    var _state$room;\n    console.log('🗑️ 방 삭제됨:', roomCode);\n    if (((_state$room = state.room) === null || _state$room === void 0 ? void 0 : _state$room.code) === roomCode) {\n      setState(prev => ({\n        ...prev,\n        room: null,\n        players: []\n      }));\n    }\n  };\n\n  // Sync 이벤트 핸들러들\n  const handleSyncDataUpdate = data => {\n    setState(prev => ({\n      ...prev,\n      ...data\n    }));\n  };\n  const handleSyncPlayerJoin = player => {\n    setState(prev => ({\n      ...prev,\n      players: prev.players.find(p => p.id === player.id) ? prev.players : [...prev.players, player]\n    }));\n  };\n  const handleSyncPlayerLeave = playerId => {\n    setState(prev => ({\n      ...prev,\n      players: prev.players.filter(p => p.id !== playerId)\n    }));\n  };\n  const handleSyncGameStateChange = data => {\n    setState(prev => ({\n      ...prev,\n      ...data\n    }));\n  };\n  const actions = {\n    createRoom: (subject, isPublic) => {\n      try {\n        const hostId = 'host_' + Date.now();\n        const room = roomManager.createRoom(subject, isPublic, hostId);\n        setState(prev => ({\n          ...prev,\n          room,\n          players: []\n        }));\n        syncManager.updateGameData({\n          room,\n          players: []\n        });\n        eventBus.emit('ROOM_CREATED', room);\n        console.log('🏠 방 생성 완료:', room.code);\n      } catch (error) {\n        console.error('방 생성 실패:', error);\n        setState(prev => ({\n          ...prev,\n          error: '방 생성에 실패했습니다.'\n        }));\n      }\n    },\n    joinRoom: (roomCode, player) => {\n      try {\n        const room = roomManager.joinRoom(roomCode, player);\n        if (room) {\n          setState(prev => ({\n            ...prev,\n            room,\n            players: room.players,\n            error: null\n          }));\n          eventBus.emit('PLAYER_JOIN', player);\n          console.log('👤 방 참여 완료:', player.nickname, '→', roomCode);\n        } else {\n          setState(prev => ({\n            ...prev,\n            error: '방을 찾을 수 없습니다.'\n          }));\n        }\n      } catch (error) {\n        console.error('방 참여 실패:', error);\n        setState(prev => ({\n          ...prev,\n          error: '방 참여에 실패했습니다.'\n        }));\n      }\n    },\n    addQuestion: question => {\n      const newQuestions = [...state.questions, question];\n      setState(prev => ({\n        ...prev,\n        questions: newQuestions\n      }));\n      syncManager.updateGameData({\n        questions: newQuestions\n      });\n      eventBus.emit('QUESTION_ADDED', question);\n    },\n    deleteQuestion: questionId => {\n      const newQuestions = state.questions.filter(q => q.id !== questionId);\n      setState(prev => ({\n        ...prev,\n        questions: newQuestions\n      }));\n      syncManager.updateGameData({\n        questions: newQuestions\n      });\n      eventBus.emit('QUESTION_DELETED', questionId);\n    },\n    reorderQuestions: questions => {\n      setState(prev => ({\n        ...prev,\n        questions\n      }));\n      syncManager.updateGameData({\n        questions\n      });\n      eventBus.emit('QUESTIONS_REORDERED', questions);\n    },\n    startGame: () => {\n      if (state.questions.length === 0) {\n        setState(prev => ({\n          ...prev,\n          error: '문제를 먼저 추가해주세요.'\n        }));\n        return;\n      }\n      const newState = {\n        gameState: 'playing',\n        currentQuestionIndex: 0\n      };\n      setState(prev => ({\n        ...prev,\n        ...newState\n      }));\n      syncManager.updateGameState(newState);\n      eventBus.emit('GAME_STARTED', newState);\n      if (state.room) {\n        roomManager.updateHostActivity(state.room.code, 'current_session');\n      }\n    },\n    pauseGame: () => {\n      const newState = {\n        gameState: 'paused'\n      };\n      setState(prev => ({\n        ...prev,\n        ...newState\n      }));\n      syncManager.updateGameState(newState);\n      eventBus.emit('GAME_PAUSED', newState);\n    },\n    resumeGame: () => {\n      const newState = {\n        gameState: 'playing'\n      };\n      setState(prev => ({\n        ...prev,\n        ...newState\n      }));\n      syncManager.updateGameState(newState);\n      eventBus.emit('GAME_RESUMED', newState);\n    },\n    nextQuestion: () => {\n      const nextIndex = state.currentQuestionIndex + 1;\n      if (nextIndex >= state.questions.length) {\n        const newState = {\n          gameState: 'finished'\n        };\n        setState(prev => ({\n          ...prev,\n          ...newState\n        }));\n        syncManager.updateGameState(newState);\n        eventBus.emit('GAME_FINISHED', newState);\n        return;\n      }\n\n      // 플레이어 제출 상태 초기화\n      const resetPlayers = state.players.map(player => ({\n        ...player,\n        hasSubmitted: false,\n        currentAnswer: undefined\n      }));\n      const newState = {\n        gameState: 'playing',\n        currentQuestionIndex: nextIndex,\n        players: resetPlayers\n      };\n      setState(prev => ({\n        ...prev,\n        ...newState\n      }));\n      syncManager.updateGameData(newState);\n      eventBus.emit('NEXT_QUESTION', newState);\n    },\n    showAnswer: () => {\n      const newState = {\n        gameState: 'showingAnswer'\n      };\n      setState(prev => ({\n        ...prev,\n        ...newState\n      }));\n      syncManager.updateGameState(newState);\n      eventBus.emit('ANSWER_SHOWN', newState);\n    },\n    endGame: () => {\n      const newState = {\n        gameState: 'finished'\n      };\n      setState(prev => ({\n        ...prev,\n        ...newState\n      }));\n      syncManager.updateGameState(newState);\n      eventBus.emit('GAME_ENDED', newState);\n    },\n    eliminatePlayer: playerId => {\n      const updatedPlayers = state.players.map(player => player.id === playerId ? {\n        ...player,\n        isEliminated: true\n      } : player);\n      setState(prev => ({\n        ...prev,\n        players: updatedPlayers\n      }));\n      syncManager.updateGameData({\n        players: updatedPlayers\n      });\n      eventBus.emit('PLAYER_ELIMINATED', {\n        playerId,\n        players: updatedPlayers\n      });\n    },\n    revivePlayer: playerId => {\n      const updatedPlayers = state.players.map(player => player.id === playerId ? {\n        ...player,\n        isEliminated: false\n      } : player);\n      setState(prev => ({\n        ...prev,\n        players: updatedPlayers\n      }));\n      syncManager.updateGameData({\n        players: updatedPlayers\n      });\n      eventBus.emit('PLAYER_REVIVED', {\n        playerId,\n        players: updatedPlayers\n      });\n    },\n    submitAnswer: (playerId, answer) => {\n      const updatedPlayers = state.players.map(player => player.id === playerId ? {\n        ...player,\n        hasSubmitted: true,\n        currentAnswer: answer.toString()\n      } : player);\n      setState(prev => ({\n        ...prev,\n        players: updatedPlayers\n      }));\n      syncManager.updateGameData({\n        players: updatedPlayers\n      });\n      eventBus.emit('ANSWER_SUBMITTED', {\n        playerId,\n        answer,\n        players: updatedPlayers\n      });\n    },\n    updateGameSettings: settings => {\n      const newSettings = {\n        ...state.gameSettings,\n        ...settings\n      };\n      setState(prev => ({\n        ...prev,\n        gameSettings: newSettings\n      }));\n      // settings는 별도 필드이므로 전체 상태 변경 이벤트로 전달\n      syncManager.updateGameState({});\n      eventBus.emit('SETTINGS_UPDATED', newSettings);\n    },\n    resetGame: () => {\n      setState(initialState);\n      syncManager.updateGameState({\n        room: null,\n        players: [],\n        questions: [],\n        gameState: 'waiting',\n        currentQuestionIndex: 0\n      });\n      eventBus.emit('GAME_RESET');\n    },\n    updateHostActivity: roomCode => {\n      roomManager.updateHostActivity(roomCode, 'current_session');\n      syncManager.broadcast('HOST_ACTIVITY', {\n        roomCode,\n        sessionId: 'current_session'\n      });\n    }\n  };\n  const value = {\n    state,\n    actions\n  };\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 372,\n    columnNumber: 5\n  }, this);\n}\n_s(NewGameProvider, \"g9yWDQF6ixWa1r5sfsm7YAeGJG4=\");\n_c = NewGameProvider;\nexport function useNewGameContext() {\n  _s2();\n  const context = useContext(GameContext);\n  if (!context) {\n    throw new Error('useNewGameContext must be used within a NewGameProvider');\n  }\n  return context;\n}\n_s2(useNewGameContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default GameContext;\nvar _c;\n$RefreshReg$(_c, \"NewGameProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","syncManager","roomManager","eventBus","jsxDEV","_jsxDEV","GameContext","initialGameSettings","timeLimit","answerRevealTime","eliminationMode","eliminationThreshold","autoMode","initialState","room","players","questions","gameState","currentQuestionIndex","gameSettings","isLoading","error","NewGameProvider","children","_s","state","setState","gameData","getGameData","prev","unsubscribers","on","handleGameDataUpdate","handlePlayerJoin","handlePlayerLeave","handleGameStateChange","handleRoomCreated","handleRoomDeleted","syncListeners","addSync","type","cb","addEventListener","push","handleSyncDataUpdate","handleSyncPlayerJoin","handleSyncPlayerLeave","handleSyncGameStateChange","console","log","forEach","unsub","_removeEventListener","_ref","removeEventListener","call","data","player","find","p","id","playerId","filter","roomCode","_state$room","code","actions","createRoom","subject","isPublic","hostId","Date","now","updateGameData","emit","joinRoom","nickname","addQuestion","question","newQuestions","deleteQuestion","questionId","q","reorderQuestions","startGame","length","newState","updateGameState","updateHostActivity","pauseGame","resumeGame","nextQuestion","nextIndex","resetPlayers","map","hasSubmitted","currentAnswer","undefined","showAnswer","endGame","eliminatePlayer","updatedPlayers","isEliminated","revivePlayer","submitAnswer","answer","toString","updateGameSettings","settings","newSettings","resetGame","broadcast","sessionId","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useNewGameContext","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/9204r/.cursor/avatar/src/contexts/NewGameContext.tsx"],"sourcesContent":["/**\r\n * 새로운 모듈 기반 게임 컨텍스트\r\n * SyncManager, RoomManager, EventBus를 활용한 독립적인 상태 관리\r\n */\r\n\r\nimport React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\r\nimport { Room, Player, Question, GameState, GameSettings } from '../types/game';\r\nimport syncManager from '../services/SyncManager';\r\nimport roomManager from '../services/RoomManager';\r\nimport eventBus from '../services/EventBus';\r\n\r\ninterface GameContextState {\r\n  room: Room | null;\r\n  players: Player[];\r\n  questions: Question[];\r\n  gameState: GameState;\r\n  currentQuestionIndex: number;\r\n  gameSettings: GameSettings;\r\n  isLoading: boolean;\r\n  error: string | null;\r\n}\r\n\r\ninterface GameContextValue {\r\n  state: GameContextState;\r\n  actions: {\r\n    createRoom: (subject: string, isPublic: boolean) => void;\r\n    joinRoom: (roomCode: string, player: Player) => void;\r\n    addQuestion: (question: Question) => void;\r\n    deleteQuestion: (questionId: string) => void;\r\n    reorderQuestions: (questions: Question[]) => void;\r\n    startGame: () => void;\r\n    pauseGame: () => void;\r\n    resumeGame: () => void;\r\n    nextQuestion: () => void;\r\n    showAnswer: () => void;\r\n    endGame: () => void;\r\n    eliminatePlayer: (playerId: string) => void;\r\n    revivePlayer: (playerId: string) => void;\r\n    submitAnswer: (playerId: string, answer: string | number) => void;\r\n    updateGameSettings: (settings: Partial<GameSettings>) => void;\r\n    resetGame: () => void;\r\n    updateHostActivity: (roomCode: string) => void;\r\n  };\r\n}\r\n\r\nconst GameContext = createContext<GameContextValue | null>(null);\r\n\r\nconst initialGameSettings: GameSettings = {\r\n  timeLimit: 30,\r\n  answerRevealTime: 5,\r\n  eliminationMode: false,\r\n  eliminationThreshold: 3,\r\n  autoMode: true\r\n};\r\n\r\nconst initialState: GameContextState = {\r\n  room: null,\r\n  players: [],\r\n  questions: [],\r\n  gameState: 'waiting',\r\n  currentQuestionIndex: 0,\r\n  gameSettings: initialGameSettings,\r\n  isLoading: false,\r\n  error: null\r\n};\r\n\r\nexport function NewGameProvider({ children }: { children: ReactNode }) {\r\n  const [state, setState] = useState<GameContextState>(initialState);\r\n\r\n  useEffect(() => {\r\n    // SyncManager에서 초기 데이터 로드\r\n    const gameData = syncManager.getGameData();\r\n    setState(prev => ({\r\n      ...prev,\r\n      room: gameData.room,\r\n      players: gameData.players,\r\n      questions: gameData.questions,\r\n      gameState: gameData.gameState,\r\n      currentQuestionIndex: gameData.currentQuestionIndex\r\n    }));\r\n\r\n    // 이벤트 리스너 등록\r\n    const unsubscribers: Array<() => void> = [\r\n      eventBus.on('GAME_DATA_UPDATE', handleGameDataUpdate),\r\n      eventBus.on('PLAYER_JOIN', handlePlayerJoin),\r\n      eventBus.on('PLAYER_LEAVE', handlePlayerLeave),\r\n      eventBus.on('GAME_STATE_CHANGE', handleGameStateChange),\r\n      eventBus.on('ROOM_CREATED', handleRoomCreated),\r\n      eventBus.on('ROOM_DELETED', handleRoomDeleted),\r\n    ];\r\n\r\n    // SyncManager 리스너는 해제 함수가 없으므로 별도 관리\r\n    const syncListeners: Array<{type: string; cb: Function}> = [];\r\n    const addSync = (type: string, cb: Function) => {\r\n      syncManager.addEventListener(type, cb);\r\n      syncListeners.push({ type, cb });\r\n    };\r\n    addSync('GAME_DATA_UPDATE', handleSyncDataUpdate);\r\n    addSync('PLAYER_JOIN', handleSyncPlayerJoin);\r\n    addSync('PLAYER_LEAVE', handleSyncPlayerLeave);\r\n    addSync('GAME_STATE_CHANGE', handleSyncGameStateChange);\r\n\r\n    console.log('🎮 NewGameContext 초기화됨');\r\n\r\n    return () => {\r\n      unsubscribers.forEach(unsub => unsub());\r\n      // SyncManager 리스너 해제\r\n      syncListeners.forEach(({ type, cb }) => {\r\n        try {\r\n          (syncManager as any).removeEventListener?.(type, cb);\r\n        } catch {}\r\n      });\r\n      console.log('🎮 NewGameContext 정리됨');\r\n    };\r\n  }, []);\r\n\r\n  const handleGameDataUpdate = (data: any) => {\r\n    console.log('🔄 게임 데이터 업데이트:', data);\r\n    setState(prev => ({ ...prev, ...data }));\r\n  };\r\n\r\n  const handlePlayerJoin = (player: Player) => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      players: prev.players.find(p => p.id === player.id) \r\n        ? prev.players \r\n        : [...prev.players, player]\r\n    }));\r\n  };\r\n\r\n  const handlePlayerLeave = (playerId: string) => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      players: prev.players.filter(p => p.id !== playerId)\r\n    }));\r\n  };\r\n\r\n  const handleGameStateChange = (data: any) => {\r\n    setState(prev => ({ ...prev, ...data }));\r\n  };\r\n\r\n  const handleRoomCreated = (room: any) => {\r\n    console.log('🏠 방 생성됨:', room);\r\n  };\r\n\r\n  const handleRoomDeleted = (roomCode: string) => {\r\n    console.log('🗑️ 방 삭제됨:', roomCode);\r\n    if (state.room?.code === roomCode) {\r\n      setState(prev => ({ ...prev, room: null, players: [] }));\r\n    }\r\n  };\r\n\r\n  // Sync 이벤트 핸들러들\r\n  const handleSyncDataUpdate = (data: any) => {\r\n    setState(prev => ({ ...prev, ...data }));\r\n  };\r\n\r\n  const handleSyncPlayerJoin = (player: Player) => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      players: prev.players.find(p => p.id === player.id) \r\n        ? prev.players \r\n        : [...prev.players, player]\r\n    }));\r\n  };\r\n\r\n  const handleSyncPlayerLeave = (playerId: string) => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      players: prev.players.filter(p => p.id !== playerId)\r\n    }));\r\n  };\r\n\r\n  const handleSyncGameStateChange = (data: any) => {\r\n    setState(prev => ({ ...prev, ...data }));\r\n  };\r\n\r\n  const actions = {\r\n    createRoom: (subject: string, isPublic: boolean) => {\r\n      try {\r\n        const hostId = 'host_' + Date.now();\r\n        const room = roomManager.createRoom(subject, isPublic, hostId);\r\n        \r\n        setState(prev => ({ ...prev, room, players: [] }));\r\n        syncManager.updateGameData({ room, players: [] });\r\n        eventBus.emit('ROOM_CREATED', room);\r\n        \r\n        console.log('🏠 방 생성 완료:', room.code);\r\n      } catch (error) {\r\n        console.error('방 생성 실패:', error);\r\n        setState(prev => ({ ...prev, error: '방 생성에 실패했습니다.' }));\r\n      }\r\n    },\r\n\r\n    joinRoom: (roomCode: string, player: Player) => {\r\n      try {\r\n        const room = roomManager.joinRoom(roomCode, player);\r\n        \r\n        if (room) {\r\n          setState(prev => ({ \r\n            ...prev, \r\n            room, \r\n            players: room.players,\r\n            error: null \r\n          }));\r\n          \r\n          eventBus.emit('PLAYER_JOIN', player);\r\n          console.log('👤 방 참여 완료:', player.nickname, '→', roomCode);\r\n        } else {\r\n          setState(prev => ({ ...prev, error: '방을 찾을 수 없습니다.' }));\r\n        }\r\n      } catch (error) {\r\n        console.error('방 참여 실패:', error);\r\n        setState(prev => ({ ...prev, error: '방 참여에 실패했습니다.' }));\r\n      }\r\n    },\r\n\r\n    addQuestion: (question: Question) => {\r\n      const newQuestions = [...state.questions, question];\r\n      setState(prev => ({ ...prev, questions: newQuestions }));\r\n      syncManager.updateGameData({ questions: newQuestions });\r\n      eventBus.emit('QUESTION_ADDED', question);\r\n    },\r\n\r\n    deleteQuestion: (questionId: string) => {\r\n      const newQuestions = state.questions.filter(q => q.id !== questionId);\r\n      setState(prev => ({ ...prev, questions: newQuestions }));\r\n      syncManager.updateGameData({ questions: newQuestions });\r\n      eventBus.emit('QUESTION_DELETED', questionId);\r\n    },\r\n\r\n    reorderQuestions: (questions: Question[]) => {\r\n      setState(prev => ({ ...prev, questions }));\r\n      syncManager.updateGameData({ questions });\r\n      eventBus.emit('QUESTIONS_REORDERED', questions);\r\n    },\r\n\r\n    startGame: () => {\r\n      if (state.questions.length === 0) {\r\n        setState(prev => ({ ...prev, error: '문제를 먼저 추가해주세요.' }));\r\n        return;\r\n      }\r\n\r\n      const newState = { gameState: 'playing' as const, currentQuestionIndex: 0 };\r\n      setState(prev => ({ ...prev, ...newState }));\r\n      syncManager.updateGameState(newState);\r\n      eventBus.emit('GAME_STARTED', newState);\r\n      \r\n      if (state.room) {\r\n        roomManager.updateHostActivity(state.room.code, 'current_session');\r\n      }\r\n    },\r\n\r\n    pauseGame: () => {\r\n      const newState = { gameState: 'paused' as const };\r\n      setState(prev => ({ ...prev, ...newState }));\r\n      syncManager.updateGameState(newState);\r\n      eventBus.emit('GAME_PAUSED', newState);\r\n    },\r\n\r\n    resumeGame: () => {\r\n      const newState = { gameState: 'playing' as const };\r\n      setState(prev => ({ ...prev, ...newState }));\r\n      syncManager.updateGameState(newState);\r\n      eventBus.emit('GAME_RESUMED', newState);\r\n    },\r\n\r\n    nextQuestion: () => {\r\n      const nextIndex = state.currentQuestionIndex + 1;\r\n      \r\n      if (nextIndex >= state.questions.length) {\r\n        const newState = { gameState: 'finished' as const };\r\n        setState(prev => ({ ...prev, ...newState }));\r\n        syncManager.updateGameState(newState);\r\n        eventBus.emit('GAME_FINISHED', newState);\r\n        return;\r\n      }\r\n\r\n      // 플레이어 제출 상태 초기화\r\n      const resetPlayers = state.players.map(player => ({\r\n        ...player,\r\n        hasSubmitted: false,\r\n        currentAnswer: undefined\r\n      }));\r\n\r\n      const newState = {\r\n        gameState: 'playing' as const,\r\n        currentQuestionIndex: nextIndex,\r\n        players: resetPlayers\r\n      };\r\n\r\n      setState(prev => ({ ...prev, ...newState }));\r\n      syncManager.updateGameData(newState);\r\n      eventBus.emit('NEXT_QUESTION', newState);\r\n    },\r\n\r\n    showAnswer: () => {\r\n      const newState = { gameState: 'showingAnswer' as const };\r\n      setState(prev => ({ ...prev, ...newState }));\r\n      syncManager.updateGameState(newState);\r\n      eventBus.emit('ANSWER_SHOWN', newState);\r\n    },\r\n\r\n    endGame: () => {\r\n      const newState = { gameState: 'finished' as const };\r\n      setState(prev => ({ ...prev, ...newState }));\r\n      syncManager.updateGameState(newState);\r\n      eventBus.emit('GAME_ENDED', newState);\r\n    },\r\n\r\n    eliminatePlayer: (playerId: string) => {\r\n      const updatedPlayers = state.players.map(player =>\r\n        player.id === playerId ? { ...player, isEliminated: true } : player\r\n      );\r\n      setState(prev => ({ ...prev, players: updatedPlayers }));\r\n      syncManager.updateGameData({ players: updatedPlayers });\r\n      eventBus.emit('PLAYER_ELIMINATED', { playerId, players: updatedPlayers });\r\n    },\r\n\r\n    revivePlayer: (playerId: string) => {\r\n      const updatedPlayers = state.players.map(player =>\r\n        player.id === playerId ? { ...player, isEliminated: false } : player\r\n      );\r\n      setState(prev => ({ ...prev, players: updatedPlayers }));\r\n      syncManager.updateGameData({ players: updatedPlayers });\r\n      eventBus.emit('PLAYER_REVIVED', { playerId, players: updatedPlayers });\r\n    },\r\n\r\n    submitAnswer: (playerId: string, answer: string | number) => {\r\n      const updatedPlayers = state.players.map(player =>\r\n        player.id === playerId \r\n          ? { ...player, hasSubmitted: true, currentAnswer: answer.toString() }\r\n          : player\r\n      );\r\n      setState(prev => ({ ...prev, players: updatedPlayers }));\r\n      syncManager.updateGameData({ players: updatedPlayers });\r\n      eventBus.emit('ANSWER_SUBMITTED', { playerId, answer, players: updatedPlayers });\r\n    },\r\n\r\n    updateGameSettings: (settings: Partial<GameSettings>) => {\r\n      const newSettings = { ...state.gameSettings, ...settings };\r\n      setState(prev => ({ ...prev, gameSettings: newSettings }));\r\n      // settings는 별도 필드이므로 전체 상태 변경 이벤트로 전달\r\n      syncManager.updateGameState({} as any);\r\n      eventBus.emit('SETTINGS_UPDATED', newSettings);\r\n    },\r\n\r\n    resetGame: () => {\r\n      setState(initialState);\r\n      syncManager.updateGameState({\r\n        room: null,\r\n        players: [],\r\n        questions: [],\r\n        gameState: 'waiting',\r\n        currentQuestionIndex: 0,\r\n      });\r\n      eventBus.emit('GAME_RESET');\r\n    },\r\n\r\n    updateHostActivity: (roomCode: string) => {\r\n      roomManager.updateHostActivity(roomCode, 'current_session');\r\n      syncManager.broadcast('HOST_ACTIVITY', { roomCode, sessionId: 'current_session' });\r\n    }\r\n  };\r\n\r\n  const value: GameContextValue = {\r\n    state,\r\n    actions\r\n  };\r\n\r\n  return (\r\n    <GameContext.Provider value={value}>\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useNewGameContext(): GameContextValue {\r\n  const context = useContext(GameContext);\r\n  if (!context) {\r\n    throw new Error('useNewGameContext must be used within a NewGameProvider');\r\n  }\r\n  return context;\r\n}\r\n\r\nexport default GameContext;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}