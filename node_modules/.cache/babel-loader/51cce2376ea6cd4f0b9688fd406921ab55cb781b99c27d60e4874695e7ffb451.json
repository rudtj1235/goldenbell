{"ast":null,"code":"/**\n * 방 생명주기 관리자\n * 방 생성, 삭제, 자동 정리를 담당\n */\n\nimport syncManager from './SyncManager';\n// 단순화를 위해 공개방 목록 동기화는 localStorage 기반으로만 처리합니다.\n\nclass RoomManager {\n  constructor() {\n    this.rooms = new Map();\n    this.publicRooms = new Map();\n    this.hostSessions = new Map();\n    this.cleanupInterval = null;\n    this.deletionTimers = new Map();\n    this.loadRoomsFromStorage();\n    this.startCleanupTimer();\n    this.setupSyncListeners();\n    console.log('🏠 RoomManager 초기화됨');\n  }\n  loadRoomsFromStorage() {\n    try {\n      const savedRooms = localStorage.getItem('publicRooms');\n      if (savedRooms) {\n        const roomData = JSON.parse(savedRooms);\n        // 찌꺼기 정리: 마지막 활동 이후 10초 초과이면서 hostActive=false 인 방은 제거\n        const now = Date.now();\n        const filtered = roomData.filter(r => r.hostActive || now - (r.lastHostActivity || r.createdAt) < 10000);\n        filtered.forEach(room => {\n          this.publicRooms.set(room.code, room);\n        });\n        if (filtered.length !== roomData.length) {\n          this.saveRoomsToStorage();\n        }\n      }\n    } catch (e) {\n      console.error('방 데이터 로드 실패:', e);\n    }\n  }\n  saveRoomsToStorage() {\n    try {\n      const roomArray = Array.from(this.publicRooms.values());\n      localStorage.setItem('publicRooms', JSON.stringify(roomArray));\n      console.log('[RoomManager] Saved publicRooms to storage:', {\n        count: roomArray.length,\n        codes: roomArray.map(r => r.code)\n      });\n    } catch (e) {\n      console.error('방 데이터 저장 실패:', e);\n    }\n  }\n  setupSyncListeners() {\n    // BroadcastChannel 기반 동기화 제거로 단순화\n\n    syncManager.addEventListener('HOST_ACTIVITY', data => {\n      this.updateHostActivity(data.roomCode, data.sessionId);\n    });\n\n    // ROOM_CREATED/DELETED 개별 이벤트는 사용하지 않고, ROOMS_UPDATED만 사용해 단순화\n\n    syncManager.addEventListener('ROOM_DELETED', roomCode => {\n      this.publicRooms.delete(roomCode);\n      this.rooms.delete(roomCode);\n      this.hostSessions.delete(roomCode);\n      this.saveRoomsToStorage();\n    });\n  }\n  startCleanupTimer() {\n    // 명시적 삭제 외에는 자동 삭제하지 않음\n    this.cleanupInterval = null;\n  }\n  cleanupInactiveRooms() {}\n  createRoom(subject, isPublic, hostId) {\n    const roomCode = this.generateRoomCode();\n    const now = Date.now();\n    const room = {\n      id: `room_${now}`,\n      code: roomCode,\n      subject,\n      isPublic,\n      hostId,\n      players: [],\n      questions: [],\n      currentQuestionIndex: 0,\n      gameState: 'waiting',\n      eliminationMode: false,\n      eliminationThreshold: 3,\n      autoMode: true,\n      answerRevealTime: 5\n    };\n    this.rooms.set(roomCode, room);\n    console.log('[RoomManager] createRoom called:', {\n      roomCode,\n      subject,\n      isPublic\n    });\n    if (isPublic) {\n      const publicRoom = {\n        id: room.id,\n        code: roomCode,\n        subject,\n        isPublic: true,\n        playerCount: 0,\n        hostActive: true,\n        lastHostActivity: now,\n        createdAt: now\n      };\n      this.publicRooms.set(roomCode, publicRoom);\n      this.hostSessions.set(roomCode, {\n        sessionId: hostId,\n        lastActivity: now\n      });\n\n      // 저장만 수행(표시는 참여하기 탭이 localStorage에서 직접 로드)\n      this.saveRoomsToStorage();\n      console.log('[RoomManager] public room created & stored:', publicRoom);\n    }\n    console.log('🏠 방 생성됨:', roomCode, subject);\n    return room;\n  }\n  deleteRoom(roomCode) {\n    // 항상 삭제 시도하여 흔적 제거\n    this.publicRooms.delete(roomCode);\n    this.rooms.delete(roomCode);\n    this.hostSessions.delete(roomCode);\n    this.saveRoomsToStorage();\n    // 목록 동기화는 localStorage 기반 주기 로드로 처리(추가 브로드캐스트 불필요)\n    syncManager.broadcast('ROOM_DELETED', roomCode);\n    console.log('🗑️ 방 삭제됨:', roomCode);\n  }\n  updateHostActivity(roomCode, sessionId) {\n    const room = this.publicRooms.get(roomCode);\n    if (room) {\n      room.hostActive = true;\n      room.lastHostActivity = Date.now();\n      this.hostSessions.set(roomCode, {\n        sessionId,\n        lastActivity: Date.now()\n      });\n      this.saveRoomsToStorage();\n      // 예정된 삭제 타이머가 있으면 취소\n      const t = this.deletionTimers.get(roomCode);\n      if (t) {\n        clearTimeout(t);\n        this.deletionTimers.delete(roomCode);\n      }\n    }\n  }\n  markHostInactive(roomCode) {\n    // 호스트 비활성: 10초 동안 활동 없으면 방 삭제\n    const room = this.publicRooms.get(roomCode);\n    if (!room) return;\n    room.hostActive = false;\n    this.saveRoomsToStorage();\n    if (this.deletionTimers.has(roomCode)) return;\n    const timer = setTimeout(() => {\n      const r = this.publicRooms.get(roomCode);\n      if (!r) return;\n      const now = Date.now();\n      const inactiveForMs = now - (r.lastHostActivity || r.createdAt);\n      if (!r.hostActive && inactiveForMs >= 10000) {\n        this.deleteRoom(roomCode);\n      }\n      this.deletionTimers.delete(roomCode);\n    }, 10000);\n    this.deletionTimers.set(roomCode, timer);\n  }\n  joinRoom(roomCode, player) {\n    let room = this.rooms.get(roomCode);\n\n    // 방이 메모리에 없으면 공개방 목록에서 찾아서 생성\n    if (!room) {\n      const publicRoom = this.publicRooms.get(roomCode);\n      if (publicRoom) {\n        room = {\n          id: publicRoom.id,\n          code: roomCode,\n          subject: publicRoom.subject,\n          isPublic: publicRoom.isPublic,\n          hostId: 'temp_host',\n          players: [],\n          questions: [],\n          currentQuestionIndex: 0,\n          gameState: 'waiting',\n          eliminationMode: false,\n          eliminationThreshold: 3,\n          autoMode: true,\n          answerRevealTime: 5\n        };\n        this.rooms.set(roomCode, room);\n      }\n    }\n    if (!room) {\n      return null;\n    }\n    if (room && !room.players.find(p => p.id === player.id)) {\n      room.players.push(player);\n\n      // 공개방 플레이어 수 업데이트\n      const publicRoom = this.publicRooms.get(roomCode);\n      if (publicRoom) {\n        publicRoom.playerCount = room.players.length;\n        this.saveRoomsToStorage();\n      }\n\n      // 동기화 매니저에 알림\n      syncManager.addPlayer(player);\n      syncManager.updateGameData({\n        room,\n        players: room.players\n      });\n      console.log('👤 플레이어 방 참여:', player.nickname, '→', roomCode);\n      return room;\n    }\n    return null;\n  }\n  getRoom(roomCode) {\n    return this.rooms.get(roomCode) || null;\n  }\n  getPublicRooms() {\n    return Array.from(this.publicRooms.values());\n  }\n  generateRoomCode() {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    let result = '';\n    for (let i = 0; i < 4; i++) {\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n  }\n  destroy() {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n      this.cleanupInterval = null;\n    }\n    console.log('🏠 RoomManager 종료됨');\n  }\n}\n\n// 싱글톤 인스턴스\nexport const roomManager = new RoomManager();\nexport default roomManager;","map":{"version":3,"names":["syncManager","RoomManager","constructor","rooms","Map","publicRooms","hostSessions","cleanupInterval","deletionTimers","loadRoomsFromStorage","startCleanupTimer","setupSyncListeners","console","log","savedRooms","localStorage","getItem","roomData","JSON","parse","now","Date","filtered","filter","r","hostActive","lastHostActivity","createdAt","forEach","room","set","code","length","saveRoomsToStorage","e","error","roomArray","Array","from","values","setItem","stringify","count","codes","map","addEventListener","data","updateHostActivity","roomCode","sessionId","delete","cleanupInactiveRooms","createRoom","subject","isPublic","hostId","generateRoomCode","id","players","questions","currentQuestionIndex","gameState","eliminationMode","eliminationThreshold","autoMode","answerRevealTime","publicRoom","playerCount","lastActivity","deleteRoom","broadcast","get","t","clearTimeout","markHostInactive","has","timer","setTimeout","inactiveForMs","joinRoom","player","find","p","push","addPlayer","updateGameData","nickname","getRoom","getPublicRooms","chars","result","i","charAt","Math","floor","random","destroy","clearInterval","roomManager"],"sources":["C:/Users/9204r/.cursor/avatar/src/services/RoomManager.ts"],"sourcesContent":["/**\n * 방 생명주기 관리자\n * 방 생성, 삭제, 자동 정리를 담당\n */\n\nimport { Room, Player } from '../types/game';\nimport syncManager from './SyncManager';\n// 단순화를 위해 공개방 목록 동기화는 localStorage 기반으로만 처리합니다.\n\nexport interface PublicRoom {\n  id: string;\n  code: string;\n  subject: string;\n  isPublic: boolean;\n  playerCount: number;\n  hostActive: boolean;\n  lastHostActivity: number;\n  createdAt: number;\n}\n\nclass RoomManager {\n  private rooms: Map<string, Room> = new Map();\n  private publicRooms: Map<string, PublicRoom> = new Map();\n  private hostSessions: Map<string, { sessionId: string; lastActivity: number }> = new Map();\n  private cleanupInterval: NodeJS.Timeout | null = null;\n  private deletionTimers: Map<string, NodeJS.Timeout> = new Map();\n\n  constructor() {\n    this.loadRoomsFromStorage();\n    this.startCleanupTimer();\n    this.setupSyncListeners();\n    \n    console.log('🏠 RoomManager 초기화됨');\n  }\n\n  private loadRoomsFromStorage() {\n    try {\n      const savedRooms = localStorage.getItem('publicRooms');\n      if (savedRooms) {\n        const roomData = JSON.parse(savedRooms) as PublicRoom[];\n        // 찌꺼기 정리: 마지막 활동 이후 10초 초과이면서 hostActive=false 인 방은 제거\n        const now = Date.now();\n        const filtered = roomData.filter(r => r.hostActive || (now - (r.lastHostActivity || r.createdAt)) < 10000);\n        filtered.forEach((room: PublicRoom) => {\n          this.publicRooms.set(room.code, room);\n        });\n        if (filtered.length !== roomData.length) {\n          this.saveRoomsToStorage();\n        }\n      }\n    } catch (e) {\n      console.error('방 데이터 로드 실패:', e);\n    }\n  }\n\n  private saveRoomsToStorage() {\n    try {\n      const roomArray = Array.from(this.publicRooms.values());\n      localStorage.setItem('publicRooms', JSON.stringify(roomArray));\n      console.log('[RoomManager] Saved publicRooms to storage:', {\n        count: roomArray.length,\n        codes: roomArray.map(r => r.code)\n      });\n    } catch (e) {\n      console.error('방 데이터 저장 실패:', e);\n    }\n  }\n\n  private setupSyncListeners() {\n    // BroadcastChannel 기반 동기화 제거로 단순화\n\n    syncManager.addEventListener('HOST_ACTIVITY', (data: { roomCode: string; sessionId: string }) => {\n      this.updateHostActivity(data.roomCode, data.sessionId);\n    });\n\n    // ROOM_CREATED/DELETED 개별 이벤트는 사용하지 않고, ROOMS_UPDATED만 사용해 단순화\n\n    syncManager.addEventListener('ROOM_DELETED', (roomCode: string) => {\n      this.publicRooms.delete(roomCode);\n      this.rooms.delete(roomCode);\n      this.hostSessions.delete(roomCode);\n      this.saveRoomsToStorage();\n    });\n  }\n\n  private startCleanupTimer() {\n    // 명시적 삭제 외에는 자동 삭제하지 않음\n    this.cleanupInterval = null;\n  }\n\n  private cleanupInactiveRooms() {}\n\n  public createRoom(subject: string, isPublic: boolean, hostId: string): Room {\n    const roomCode = this.generateRoomCode();\n    const now = Date.now();\n    \n    const room: Room = {\n      id: `room_${now}`,\n      code: roomCode,\n      subject,\n      isPublic,\n      hostId,\n      players: [],\n      questions: [],\n      currentQuestionIndex: 0,\n      gameState: 'waiting',\n      eliminationMode: false,\n      eliminationThreshold: 3,\n      autoMode: true,\n      answerRevealTime: 5\n    };\n\n    this.rooms.set(roomCode, room);\n    console.log('[RoomManager] createRoom called:', { roomCode, subject, isPublic });\n\n    if (isPublic) {\n      const publicRoom: PublicRoom = {\n        id: room.id,\n        code: roomCode,\n        subject,\n        isPublic: true,\n        playerCount: 0,\n        hostActive: true,\n        lastHostActivity: now,\n        createdAt: now\n      };\n\n      this.publicRooms.set(roomCode, publicRoom);\n      this.hostSessions.set(roomCode, { sessionId: hostId, lastActivity: now });\n      \n      // 저장만 수행(표시는 참여하기 탭이 localStorage에서 직접 로드)\n      this.saveRoomsToStorage();\n      console.log('[RoomManager] public room created & stored:', publicRoom);\n    }\n\n    console.log('🏠 방 생성됨:', roomCode, subject);\n    return room;\n  }\n\n  public deleteRoom(roomCode: string) {\n    // 항상 삭제 시도하여 흔적 제거\n    this.publicRooms.delete(roomCode);\n    this.rooms.delete(roomCode);\n    this.hostSessions.delete(roomCode);\n    this.saveRoomsToStorage();\n    // 목록 동기화는 localStorage 기반 주기 로드로 처리(추가 브로드캐스트 불필요)\n    syncManager.broadcast('ROOM_DELETED', roomCode);\n    console.log('🗑️ 방 삭제됨:', roomCode);\n  }\n\n  public updateHostActivity(roomCode: string, sessionId: string) {\n    const room = this.publicRooms.get(roomCode);\n    if (room) {\n      room.hostActive = true;\n      room.lastHostActivity = Date.now();\n      \n      this.hostSessions.set(roomCode, { sessionId, lastActivity: Date.now() });\n      this.saveRoomsToStorage();\n      // 예정된 삭제 타이머가 있으면 취소\n      const t = this.deletionTimers.get(roomCode);\n      if (t) {\n        clearTimeout(t);\n        this.deletionTimers.delete(roomCode);\n      }\n    }\n  }\n\n  public markHostInactive(roomCode: string) {\n    // 호스트 비활성: 10초 동안 활동 없으면 방 삭제\n    const room = this.publicRooms.get(roomCode);\n    if (!room) return;\n    room.hostActive = false;\n    this.saveRoomsToStorage();\n    if (this.deletionTimers.has(roomCode)) return;\n    const timer = setTimeout(() => {\n      const r = this.publicRooms.get(roomCode);\n      if (!r) return;\n      const now = Date.now();\n      const inactiveForMs = now - (r.lastHostActivity || r.createdAt);\n      if (!r.hostActive && inactiveForMs >= 10000) {\n        this.deleteRoom(roomCode);\n      }\n      this.deletionTimers.delete(roomCode);\n    }, 10000);\n    this.deletionTimers.set(roomCode, timer);\n  }\n\n  public joinRoom(roomCode: string, player: Player): Room | null {\n    let room = this.rooms.get(roomCode);\n    \n    // 방이 메모리에 없으면 공개방 목록에서 찾아서 생성\n    if (!room) {\n      const publicRoom = this.publicRooms.get(roomCode);\n      if (publicRoom) {\n        room = {\n          id: publicRoom.id,\n          code: roomCode,\n          subject: publicRoom.subject,\n          isPublic: publicRoom.isPublic,\n          hostId: 'temp_host',\n          players: [],\n          questions: [],\n          currentQuestionIndex: 0,\n          gameState: 'waiting',\n          eliminationMode: false,\n          eliminationThreshold: 3,\n          autoMode: true,\n          answerRevealTime: 5\n        };\n        this.rooms.set(roomCode, room);\n      }\n    }\n\n    if (!room) {\n      return null;\n    }\n\n    if (room && !room.players.find(p => p.id === player.id)) {\n      room.players.push(player);\n      \n      // 공개방 플레이어 수 업데이트\n      const publicRoom = this.publicRooms.get(roomCode);\n      if (publicRoom) {\n        publicRoom.playerCount = room.players.length;\n        this.saveRoomsToStorage();\n      }\n\n      // 동기화 매니저에 알림\n      syncManager.addPlayer(player);\n      syncManager.updateGameData({ \n        room, \n        players: room.players \n      });\n\n      console.log('👤 플레이어 방 참여:', player.nickname, '→', roomCode);\n      return room;\n    }\n\n    return null;\n  }\n\n  public getRoom(roomCode: string): Room | null {\n    return this.rooms.get(roomCode) || null;\n  }\n\n  public getPublicRooms(): PublicRoom[] {\n    return Array.from(this.publicRooms.values());\n  }\n\n  private generateRoomCode(): string {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    let result = '';\n    for (let i = 0; i < 4; i++) {\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n  }\n\n  public destroy() {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n      this.cleanupInterval = null;\n    }\n    console.log('🏠 RoomManager 종료됨');\n  }\n}\n\n// 싱글톤 인스턴스\nexport const roomManager = new RoomManager();\nexport default roomManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}