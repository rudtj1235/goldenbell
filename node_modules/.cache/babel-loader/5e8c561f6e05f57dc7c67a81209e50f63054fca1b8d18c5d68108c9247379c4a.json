{"ast":null,"code":"/**\r\n * 이벤트 버스 시스템\r\n * 컴포넌트 간 느슨한 결합을 위한 이벤트 기반 통신\r\n */\n\nclass EventBus {\n  constructor() {\n    this.listeners = new Map();\n    this.eventHistory = [];\n    this.maxHistorySize = 100;\n    console.log('📡 EventBus 초기화됨');\n  }\n\n  /**\r\n   * 이벤트 리스너 등록\r\n   */\n  on(eventType, callback) {\n    if (!this.listeners.has(eventType)) {\n      this.listeners.set(eventType, new Set());\n    }\n    this.listeners.get(eventType).add(callback);\n    console.log(`👂 이벤트 리스너 등록: ${eventType}`);\n\n    // 언레지스터 함수 반환\n    return () => this.off(eventType, callback);\n  }\n\n  /**\r\n   * 이벤트 리스너 제거\r\n   */\n  off(eventType, callback) {\n    if (this.listeners.has(eventType)) {\n      this.listeners.get(eventType).delete(callback);\n\n      // 빈 Set이면 삭제\n      if (this.listeners.get(eventType).size === 0) {\n        this.listeners.delete(eventType);\n      }\n    }\n  }\n\n  /**\r\n   * 이벤트 발생\r\n   */\n  emit(eventType, data, source) {\n    const event = {\n      type: eventType,\n      data,\n      timestamp: Date.now(),\n      source\n    };\n\n    // 이벤트 히스토리에 추가\n    this.addToHistory(event);\n\n    // 리스너들에게 알림\n    if (this.listeners.has(eventType)) {\n      this.listeners.get(eventType).forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error(`이벤트 콜백 에러 [${eventType}]:`, error);\n        }\n      });\n    }\n    console.log(`📢 이벤트 발생: ${eventType}`, data ? `데이터: ${JSON.stringify(data).slice(0, 100)}` : '');\n  }\n\n  /**\r\n   * 일회성 이벤트 리스너\r\n   */\n  once(eventType, callback) {\n    const onceCallback = data => {\n      callback(data);\n      this.off(eventType, onceCallback);\n    };\n    this.on(eventType, onceCallback);\n  }\n\n  /**\r\n   * 여러 이벤트 타입에 대한 리스너 등록\r\n   */\n  onMultiple(eventTypes, callback) {\n    const unsubscribers = eventTypes.map(type => this.on(type, callback));\n    return () => {\n      unsubscribers.forEach(unsub => unsub());\n    };\n  }\n\n  /**\r\n   * 특정 조건을 만족하는 이벤트만 처리\r\n   */\n  onCondition(eventType, condition, callback) {\n    return this.on(eventType, data => {\n      if (condition(data)) {\n        callback(data);\n      }\n    });\n  }\n\n  /**\r\n   * 이벤트 히스토리 조회\r\n   */\n  getEventHistory(eventType) {\n    if (eventType) {\n      return this.eventHistory.filter(event => event.type === eventType);\n    }\n    return [...this.eventHistory];\n  }\n\n  /**\r\n   * 마지막 이벤트 조회\r\n   */\n  getLastEvent(eventType) {\n    const events = this.getEventHistory(eventType);\n    return events.length > 0 ? events[events.length - 1] : null;\n  }\n\n  /**\r\n   * 모든 리스너 제거\r\n   */\n  removeAllListeners(eventType) {\n    if (eventType) {\n      this.listeners.delete(eventType);\n    } else {\n      this.listeners.clear();\n    }\n  }\n\n  /**\r\n   * 현재 등록된 리스너 수 조회\r\n   */\n  getListenerCount(eventType) {\n    if (eventType) {\n      var _this$listeners$get;\n      return ((_this$listeners$get = this.listeners.get(eventType)) === null || _this$listeners$get === void 0 ? void 0 : _this$listeners$get.size) || 0;\n    }\n    let total = 0;\n    this.listeners.forEach(listeners => {\n      total += listeners.size;\n    });\n    return total;\n  }\n\n  /**\r\n   * 이벤트 히스토리에 추가\r\n   */\n  addToHistory(event) {\n    this.eventHistory.push(event);\n\n    // 히스토리 크기 제한\n    if (this.eventHistory.length > this.maxHistorySize) {\n      this.eventHistory.shift();\n    }\n  }\n\n  /**\r\n   * 디버그 정보 출력\r\n   */\n  debug() {\n    console.log('📡 EventBus 상태:');\n    console.log('- 등록된 이벤트 타입:', Array.from(this.listeners.keys()));\n    console.log('- 총 리스너 수:', this.getListenerCount());\n    console.log('- 이벤트 히스토리 수:', this.eventHistory.length);\n    this.listeners.forEach((listeners, eventType) => {\n      console.log(`  ${eventType}: ${listeners.size}개 리스너`);\n    });\n  }\n\n  /**\r\n   * EventBus 정리\r\n   */\n  destroy() {\n    this.listeners.clear();\n    this.eventHistory = [];\n    console.log('📡 EventBus 종료됨');\n  }\n}\n\n// 싱글톤 인스턴스\nexport const eventBus = new EventBus();\nexport default eventBus;","map":{"version":3,"names":["EventBus","constructor","listeners","Map","eventHistory","maxHistorySize","console","log","on","eventType","callback","has","set","Set","get","add","off","delete","size","emit","data","source","event","type","timestamp","Date","now","addToHistory","forEach","error","JSON","stringify","slice","once","onceCallback","onMultiple","eventTypes","unsubscribers","map","unsub","onCondition","condition","getEventHistory","filter","getLastEvent","events","length","removeAllListeners","clear","getListenerCount","_this$listeners$get","total","push","shift","debug","Array","from","keys","destroy","eventBus"],"sources":["C:/Users/9204r/.cursor/avatar/src/services/EventBus.ts"],"sourcesContent":["/**\r\n * 이벤트 버스 시스템\r\n * 컴포넌트 간 느슨한 결합을 위한 이벤트 기반 통신\r\n */\r\n\r\nexport type EventCallback = (data?: any) => void;\r\n\r\nexport interface GameEvent {\r\n  type: string;\r\n  data?: any;\r\n  timestamp: number;\r\n  source?: string;\r\n}\r\n\r\nclass EventBus {\r\n  private listeners: Map<string, Set<EventCallback>> = new Map();\r\n  private eventHistory: GameEvent[] = [];\r\n  private maxHistorySize = 100;\r\n\r\n  constructor() {\r\n    console.log('📡 EventBus 초기화됨');\r\n  }\r\n\r\n  /**\r\n   * 이벤트 리스너 등록\r\n   */\r\n  public on(eventType: string, callback: EventCallback): () => void {\r\n    if (!this.listeners.has(eventType)) {\r\n      this.listeners.set(eventType, new Set());\r\n    }\r\n    \r\n    this.listeners.get(eventType)!.add(callback);\r\n    \r\n    console.log(`👂 이벤트 리스너 등록: ${eventType}`);\r\n    \r\n    // 언레지스터 함수 반환\r\n    return () => this.off(eventType, callback);\r\n  }\r\n\r\n  /**\r\n   * 이벤트 리스너 제거\r\n   */\r\n  public off(eventType: string, callback: EventCallback): void {\r\n    if (this.listeners.has(eventType)) {\r\n      this.listeners.get(eventType)!.delete(callback);\r\n      \r\n      // 빈 Set이면 삭제\r\n      if (this.listeners.get(eventType)!.size === 0) {\r\n        this.listeners.delete(eventType);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 이벤트 발생\r\n   */\r\n  public emit(eventType: string, data?: any, source?: string): void {\r\n    const event: GameEvent = {\r\n      type: eventType,\r\n      data,\r\n      timestamp: Date.now(),\r\n      source\r\n    };\r\n\r\n    // 이벤트 히스토리에 추가\r\n    this.addToHistory(event);\r\n\r\n    // 리스너들에게 알림\r\n    if (this.listeners.has(eventType)) {\r\n      this.listeners.get(eventType)!.forEach(callback => {\r\n        try {\r\n          callback(data);\r\n        } catch (error) {\r\n          console.error(`이벤트 콜백 에러 [${eventType}]:`, error);\r\n        }\r\n      });\r\n    }\r\n\r\n    console.log(`📢 이벤트 발생: ${eventType}`, data ? `데이터: ${JSON.stringify(data).slice(0, 100)}` : '');\r\n  }\r\n\r\n  /**\r\n   * 일회성 이벤트 리스너\r\n   */\r\n  public once(eventType: string, callback: EventCallback): void {\r\n    const onceCallback = (data?: any) => {\r\n      callback(data);\r\n      this.off(eventType, onceCallback);\r\n    };\r\n    \r\n    this.on(eventType, onceCallback);\r\n  }\r\n\r\n  /**\r\n   * 여러 이벤트 타입에 대한 리스너 등록\r\n   */\r\n  public onMultiple(eventTypes: string[], callback: EventCallback): () => void {\r\n    const unsubscribers = eventTypes.map(type => this.on(type, callback));\r\n    \r\n    return () => {\r\n      unsubscribers.forEach(unsub => unsub());\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 특정 조건을 만족하는 이벤트만 처리\r\n   */\r\n  public onCondition(eventType: string, condition: (data?: any) => boolean, callback: EventCallback): () => void {\r\n    return this.on(eventType, (data) => {\r\n      if (condition(data)) {\r\n        callback(data);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 이벤트 히스토리 조회\r\n   */\r\n  public getEventHistory(eventType?: string): GameEvent[] {\r\n    if (eventType) {\r\n      return this.eventHistory.filter(event => event.type === eventType);\r\n    }\r\n    return [...this.eventHistory];\r\n  }\r\n\r\n  /**\r\n   * 마지막 이벤트 조회\r\n   */\r\n  public getLastEvent(eventType: string): GameEvent | null {\r\n    const events = this.getEventHistory(eventType);\r\n    return events.length > 0 ? events[events.length - 1] : null;\r\n  }\r\n\r\n  /**\r\n   * 모든 리스너 제거\r\n   */\r\n  public removeAllListeners(eventType?: string): void {\r\n    if (eventType) {\r\n      this.listeners.delete(eventType);\r\n    } else {\r\n      this.listeners.clear();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 현재 등록된 리스너 수 조회\r\n   */\r\n  public getListenerCount(eventType?: string): number {\r\n    if (eventType) {\r\n      return this.listeners.get(eventType)?.size || 0;\r\n    }\r\n    \r\n    let total = 0;\r\n    this.listeners.forEach(listeners => {\r\n      total += listeners.size;\r\n    });\r\n    return total;\r\n  }\r\n\r\n  /**\r\n   * 이벤트 히스토리에 추가\r\n   */\r\n  private addToHistory(event: GameEvent): void {\r\n    this.eventHistory.push(event);\r\n    \r\n    // 히스토리 크기 제한\r\n    if (this.eventHistory.length > this.maxHistorySize) {\r\n      this.eventHistory.shift();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 디버그 정보 출력\r\n   */\r\n  public debug(): void {\r\n    console.log('📡 EventBus 상태:');\r\n    console.log('- 등록된 이벤트 타입:', Array.from(this.listeners.keys()));\r\n    console.log('- 총 리스너 수:', this.getListenerCount());\r\n    console.log('- 이벤트 히스토리 수:', this.eventHistory.length);\r\n    \r\n    this.listeners.forEach((listeners, eventType) => {\r\n      console.log(`  ${eventType}: ${listeners.size}개 리스너`);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * EventBus 정리\r\n   */\r\n  public destroy(): void {\r\n    this.listeners.clear();\r\n    this.eventHistory = [];\r\n    console.log('📡 EventBus 종료됨');\r\n  }\r\n}\r\n\r\n// 싱글톤 인스턴스\r\nexport const eventBus = new EventBus();\r\nexport default eventBus;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}