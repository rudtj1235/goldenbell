{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\9204r\\\\.cursor\\\\avatar\\\\src\\\\contexts\\\\NewGameContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n/**\n * 새로운 모듈 기반 게임 컨텍스트\n * SyncManager, RoomManager, EventBus를 활용한 독립적인 상태 관리\n */\n\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport syncManager from '../services/SyncManager';\nimport roomManager from '../services/RoomManager';\nimport eventBus from '../services/EventBus';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameContext = /*#__PURE__*/createContext(null);\nconst initialGameSettings = {\n  timeLimit: 5,\n  answerRevealTime: 5,\n  eliminationMode: false,\n  eliminationThreshold: 3,\n  autoMode: true\n};\nconst initialState = {\n  room: null,\n  players: [],\n  questions: [],\n  gameState: 'waiting',\n  currentQuestionIndex: 0,\n  gameSettings: initialGameSettings,\n  hasStarted: false,\n  phaseStartedAt: null,\n  phaseDuration: null,\n  paused: false,\n  isLoading: true,\n  error: null\n};\nexport function NewGameProvider({\n  children\n}) {\n  _s();\n  const [state, setState] = useState(initialState);\n  useEffect(() => {\n    // SyncManager에서 초기 데이터 로드\n    const gameData = syncManager.getGameData();\n    setState(prev => {\n      var _phaseStartedAt, _phaseDuration, _paused;\n      return {\n        ...prev,\n        room: gameData.room,\n        players: gameData.players,\n        questions: gameData.questions,\n        gameState: gameData.gameState,\n        currentQuestionIndex: gameData.currentQuestionIndex,\n        gameSettings: gameData.gameSettings || prev.gameSettings,\n        hasStarted: typeof gameData.hasStarted === 'boolean' ? gameData.hasStarted : false,\n        phaseStartedAt: (_phaseStartedAt = gameData.phaseStartedAt) !== null && _phaseStartedAt !== void 0 ? _phaseStartedAt : null,\n        phaseDuration: (_phaseDuration = gameData.phaseDuration) !== null && _phaseDuration !== void 0 ? _phaseDuration : null,\n        paused: (_paused = gameData.paused) !== null && _paused !== void 0 ? _paused : false,\n        isLoading: false\n      };\n    });\n\n    // 이벤트 리스너 등록\n    const unsubscribers = [eventBus.on('PLAYER_JOIN', handlePlayerJoin), eventBus.on('PLAYER_LEAVE', handlePlayerLeave)];\n\n    // SyncManager 리스너는 해제 함수가 없으므로 별도 관리\n    const syncListeners = [];\n    const addSync = (type, cb) => {\n      syncManager.addEventListener(type, cb);\n      syncListeners.push({\n        type,\n        cb\n      });\n    };\n    addSync('GAME_DATA_UPDATE', handleSyncDataUpdate);\n    addSync('PLAYER_JOIN', handleSyncPlayerJoin);\n    addSync('PLAYER_LEAVE', handleSyncPlayerLeave);\n    addSync('GAME_STATE_CHANGE', handleSyncGameStateChange);\n    console.log('🎮 NewGameContext 초기화됨');\n    return () => {\n      unsubscribers.forEach(unsub => unsub());\n      // SyncManager 리스너 해제\n      syncListeners.forEach(({\n        type,\n        cb\n      }) => {\n        try {\n          var _removeEventListener, _ref;\n          (_removeEventListener = (_ref = syncManager).removeEventListener) === null || _removeEventListener === void 0 ? void 0 : _removeEventListener.call(_ref, type, cb);\n        } catch {}\n      });\n      console.log('🎮 NewGameContext 정리됨');\n    };\n  }, []);\n  const handleGameDataUpdate = data => {\n    console.log('🔄 게임 데이터 업데이트:', data);\n    setState(prev => ({\n      ...prev,\n      ...data\n    }));\n  };\n  const handlePlayerJoin = player => {\n    setState(prev => ({\n      ...prev,\n      players: prev.players.find(p => p.id === player.id) ? prev.players : [...prev.players, player]\n    }));\n  };\n  const handlePlayerLeave = playerId => {\n    setState(prev => ({\n      ...prev,\n      players: prev.players.filter(p => p.id !== playerId)\n    }));\n  };\n  const handleGameStateChange = data => {\n    setState(prev => ({\n      ...prev,\n      ...data\n    }));\n  };\n  const handleRoomCreated = room => {\n    console.log('🏠 방 생성됨:', room);\n  };\n  const handleRoomDeleted = roomCode => {\n    var _state$room;\n    console.log('🗑️ 방 삭제됨:', roomCode);\n    if (((_state$room = state.room) === null || _state$room === void 0 ? void 0 : _state$room.code) === roomCode) {\n      setState(prev => ({\n        ...prev,\n        room: null,\n        players: []\n      }));\n    }\n  };\n\n  // Sync 이벤트 핸들러들\n  const handleSyncDataUpdate = data => {\n    // 방어: 질문이 없는데 finished로 들어오는 등 비정상 상태 정규화\n    setState(prev => {\n      const next = {\n        ...prev,\n        ...data\n      };\n      if (!next.questions || next.questions.length === 0) {\n        next.gameState = 'waiting';\n        next.currentQuestionIndex = 0;\n      } else if (typeof next.currentQuestionIndex !== 'number' || next.currentQuestionIndex < 0 || next.currentQuestionIndex >= next.questions.length) {\n        next.currentQuestionIndex = 0;\n        if (next.gameState === 'finished') next.gameState = 'waiting';\n      }\n      if (!next.gameSettings) next.gameSettings = prev.gameSettings;\n      if (typeof next.hasStarted !== 'boolean') next.hasStarted = prev.hasStarted;\n      return next;\n    });\n  };\n  const handleSyncPlayerJoin = player => {\n    setState(prev => ({\n      ...prev,\n      players: prev.players.find(p => p.id === player.id) ? prev.players : [...prev.players, player]\n    }));\n  };\n  const handleSyncPlayerLeave = playerId => {\n    setState(prev => ({\n      ...prev,\n      players: prev.players.filter(p => p.id !== playerId)\n    }));\n  };\n  const handleSyncGameStateChange = data => {\n    setState(prev => ({\n      ...prev,\n      ...data\n    }));\n  };\n  const actions = {\n    setAnswerDraft: (playerId, answer) => {\n      const updatedPlayers = state.players.map(player => player.id === playerId ? {\n        ...player,\n        currentAnswer: String(answer)\n      } : player);\n      setState(prev => ({\n        ...prev,\n        players: updatedPlayers\n      }));\n      syncManager.updateGameData({\n        players: updatedPlayers\n      });\n    },\n    createRoom: (subject, isPublic) => {\n      try {\n        const hostId = 'host_' + Date.now();\n        const room = roomManager.createRoom(subject, isPublic, hostId);\n        // 기본 예시 문제 3개(OX/객관식/주관식)\n        const now = Date.now();\n        const defaultQuestions = [{\n          id: 'q_' + now + '_ox',\n          type: 'ox',\n          question: '태양은 서쪽에서 뜬다.',\n          score: 10,\n          timeLimit: 10,\n          options: ['O', 'X'],\n          correctAnswer: 'X'\n        }, {\n          id: 'q_' + now + '_mc',\n          type: 'multiple',\n          question: '대한민국의 수도는?',\n          score: 20,\n          timeLimit: 15,\n          options: ['서울', '부산', '대구', '인천'],\n          correctAnswer: 0\n        }, {\n          id: 'q_' + now + '_short',\n          type: 'short',\n          question: '3 x 7 = ?',\n          score: 30,\n          timeLimit: 20,\n          correctAnswer: '21'\n        }];\n        setState(prev => ({\n          ...prev,\n          room,\n          players: [],\n          questions: defaultQuestions,\n          gameState: 'waiting',\n          currentQuestionIndex: 0,\n          hasStarted: false,\n          gameSettings: prev.gameSettings\n        }));\n        syncManager.updateGameData({\n          room,\n          players: [],\n          questions: defaultQuestions,\n          gameState: 'waiting',\n          currentQuestionIndex: 0,\n          hasStarted: false,\n          gameSettings: state.gameSettings\n        });\n        eventBus.emit('ROOM_CREATED', room);\n        console.log('🏠 방 생성 완료:', room.code);\n      } catch (error) {\n        console.error('방 생성 실패:', error);\n        setState(prev => ({\n          ...prev,\n          error: '방 생성에 실패했습니다.'\n        }));\n      }\n    },\n    joinRoom: (roomCode, player) => {\n      try {\n        // 상세 로그: 참여 시도 전 상태\n        try {\n          const before = {\n            at: new Date().toISOString(),\n            roomCode,\n            localRoomExists: !!roomManager.getRoom(roomCode),\n            publicRooms: roomManager.getPublicRooms().map(r => r.code),\n            playersCount: state.players.length\n          };\n          console.info('[JOIN_TRACE] before joinRoom', before);\n        } catch {}\n        const room = roomManager.joinRoom(roomCode, player);\n        if (room) {\n          setState(prev => ({\n            ...prev,\n            room,\n            players: room.players,\n            error: null\n          }));\n          eventBus.emit('PLAYER_JOIN', player);\n          console.info('[JOIN_TRACE] success', {\n            roomCode,\n            playersCount: room.players.length\n          });\n          return true;\n        } else {\n          setState(prev => ({\n            ...prev,\n            error: '방을 찾을 수 없습니다.'\n          }));\n          try {\n            const after = {\n              at: new Date().toISOString(),\n              roomCode,\n              localRoomExists: !!roomManager.getRoom(roomCode),\n              publicRooms: roomManager.getPublicRooms().map(r => r.code)\n            };\n            console.warn('[JOIN_TRACE] fail', after);\n          } catch {}\n          return false;\n        }\n      } catch (error) {\n        console.error('방 참여 실패:', error);\n        setState(prev => ({\n          ...prev,\n          error: '방 참여에 실패했습니다.'\n        }));\n        return false;\n      }\n    },\n    addQuestion: question => {\n      const newQuestions = [...state.questions, question];\n      setState(prev => ({\n        ...prev,\n        questions: newQuestions,\n        gameState: prev.gameState === 'finished' ? 'waiting' : prev.gameState\n      }));\n      // 질문 추가 시 전체 데이터 동기화로 상태 일관 유지\n      syncManager.updateGameData({\n        questions: newQuestions,\n        gameState: state.gameState === 'finished' ? 'waiting' : state.gameState,\n        currentQuestionIndex: state.gameState === 'finished' ? 0 : state.currentQuestionIndex,\n        players: state.players,\n        room: state.room\n      });\n      eventBus.emit('QUESTION_ADDED', question);\n    },\n    deleteQuestion: questionId => {\n      const newQuestions = state.questions.filter(q => q.id !== questionId);\n      setState(prev => ({\n        ...prev,\n        questions: newQuestions\n      }));\n      syncManager.updateGameData({\n        questions: newQuestions\n      });\n      eventBus.emit('QUESTION_DELETED', questionId);\n    },\n    reorderQuestions: questions => {\n      setState(prev => ({\n        ...prev,\n        questions\n      }));\n      syncManager.updateGameData({\n        questions\n      });\n      eventBus.emit('QUESTIONS_REORDERED', questions);\n    },\n    startGame: () => {\n      if (state.questions.length === 0) {\n        setState(prev => ({\n          ...prev,\n          error: '문제를 먼저 추가해주세요.'\n        }));\n        return;\n      }\n      const isFirstStart = !state.hasStarted;\n      let startIndex = 0;\n      if (isFirstStart) {\n        startIndex = 0;\n      } else {\n        const nextIndex = state.currentQuestionIndex + 1;\n        if (nextIndex >= state.questions.length) {\n          // 진행할 다음 문제가 없으면 대기 유지\n          return;\n        }\n        startIndex = nextIndex;\n      }\n      const resetPlayers = state.players.map(player => ({\n        ...player,\n        hasSubmitted: false,\n        currentAnswer: undefined\n      }));\n      const newState = {\n        gameState: 'playing',\n        currentQuestionIndex: startIndex,\n        hasStarted: true,\n        players: resetPlayers,\n        phaseStartedAt: Date.now(),\n        phaseDuration: state.gameSettings.timeLimit,\n        paused: false\n      };\n      setState(prev => ({\n        ...prev,\n        ...newState\n      }));\n      syncManager.updateGameData({\n        gameState: 'playing',\n        currentQuestionIndex: startIndex,\n        questions: state.questions,\n        players: resetPlayers,\n        room: state.room,\n        hasStarted: true,\n        gameSettings: state.gameSettings,\n        phaseStartedAt: newState.phaseStartedAt,\n        phaseDuration: newState.phaseDuration,\n        paused: false\n      });\n      eventBus.emit('GAME_STARTED', newState);\n      if (state.room) {\n        roomManager.updateHostActivity(state.room.code, 'current_session');\n      }\n    },\n    pauseGame: () => {\n      const newState = {\n        gameState: 'paused',\n        paused: true\n      };\n      setState(prev => ({\n        ...prev,\n        ...newState\n      }));\n      syncManager.updateGameState(newState);\n      eventBus.emit('GAME_PAUSED', newState);\n    },\n    resumeGame: () => {\n      const newState = {\n        gameState: 'playing',\n        paused: false\n      };\n      setState(prev => ({\n        ...prev,\n        ...newState\n      }));\n      syncManager.updateGameState(newState);\n      eventBus.emit('GAME_RESUMED', newState);\n    },\n    nextQuestion: () => {\n      const nextIndex = state.currentQuestionIndex + 1;\n      if (nextIndex >= state.questions.length) {\n        // 자동 종료하지 않고 대기 상태로 전환. 인덱스는 마지막 문제에서 유지\n        const newState = {\n          gameState: 'waiting'\n        };\n        setState(prev => ({\n          ...prev,\n          ...newState,\n          currentQuestionIndex: Math.max(0, prev.currentQuestionIndex)\n        }));\n        syncManager.updateGameData({\n          gameState: 'waiting',\n          currentQuestionIndex: state.currentQuestionIndex,\n          hasStarted: true\n        });\n        return;\n      }\n      const resetPlayers = state.players.map(player => ({\n        ...player,\n        hasSubmitted: false,\n        currentAnswer: undefined\n      }));\n      const newState = {\n        gameState: 'playing',\n        currentQuestionIndex: nextIndex,\n        players: resetPlayers,\n        phaseStartedAt: Date.now(),\n        phaseDuration: state.gameSettings.timeLimit,\n        paused: false\n      };\n      setState(prev => ({\n        ...prev,\n        ...newState\n      }));\n      syncManager.updateGameData({\n        gameState: 'playing',\n        currentQuestionIndex: nextIndex,\n        players: resetPlayers,\n        questions: state.questions,\n        room: state.room,\n        phaseStartedAt: newState.phaseStartedAt,\n        phaseDuration: newState.phaseDuration,\n        paused: false\n      });\n      eventBus.emit('NEXT_QUESTION', newState);\n    },\n    showAnswer: () => {\n      const newState = {\n        gameState: 'showingAnswer'\n      };\n      // 최신 데이터로 채점(브로드캐스트 지연 보정)\n      const latest = syncManager.getGameData();\n      const q = latest.questions[latest.currentQuestionIndex];\n      if (q) {\n        const gradedPlayers = latest.players.map(p => {\n          var _p$currentAnswer;\n          const answerStr = String((_p$currentAnswer = p.currentAnswer) !== null && _p$currentAnswer !== void 0 ? _p$currentAnswer : '').trim();\n          let isCorrect = false;\n          if (q.type === 'multiple') {\n            isCorrect = String(q.correctAnswer) === answerStr;\n          } else {\n            isCorrect = String(q.correctAnswer).toString().trim() === answerStr;\n          }\n          return isCorrect ? {\n            ...p,\n            score: p.score + q.score\n          } : p;\n        });\n        setState(prev => ({\n          ...prev,\n          players: gradedPlayers\n        }));\n        syncManager.updateGameData({\n          players: gradedPlayers\n        });\n        // 정오 결과를 즉시 브로드캐스트해 참여자 UI가 동일하게 반영\n        syncManager.broadcast('FINALIZE_ANSWERS', {\n          questionId: q.id,\n          players: gradedPlayers\n        });\n      }\n      setState(prev => ({\n        ...prev,\n        ...newState,\n        phaseStartedAt: Date.now(),\n        phaseDuration: state.gameSettings.answerRevealTime,\n        paused: false\n      }));\n      syncManager.updateGameState({\n        ...newState,\n        phaseStartedAt: Date.now(),\n        phaseDuration: state.gameSettings.answerRevealTime,\n        paused: false\n      });\n      eventBus.emit('ANSWER_SHOWN', newState);\n    },\n    endGame: () => {\n      const newState = {\n        gameState: 'finished'\n      };\n      setState(prev => ({\n        ...prev,\n        ...newState\n      }));\n      syncManager.updateGameState(newState);\n      eventBus.emit('GAME_ENDED', newState);\n    },\n    eliminatePlayer: playerId => {\n      const updatedPlayers = state.players.map(player => player.id === playerId ? {\n        ...player,\n        isEliminated: true\n      } : player);\n      setState(prev => ({\n        ...prev,\n        players: updatedPlayers\n      }));\n      syncManager.updateGameData({\n        players: updatedPlayers\n      });\n      eventBus.emit('PLAYER_ELIMINATED', {\n        playerId,\n        players: updatedPlayers\n      });\n    },\n    revivePlayer: playerId => {\n      const updatedPlayers = state.players.map(player => player.id === playerId ? {\n        ...player,\n        isEliminated: false\n      } : player);\n      setState(prev => ({\n        ...prev,\n        players: updatedPlayers\n      }));\n      syncManager.updateGameData({\n        players: updatedPlayers\n      });\n      eventBus.emit('PLAYER_REVIVED', {\n        playerId,\n        players: updatedPlayers\n      });\n    },\n    submitAnswer: (playerId, answer) => {\n      const updatedPlayers = state.players.map(player => player.id === playerId ? {\n        ...player,\n        hasSubmitted: true,\n        currentAnswer: String(answer)\n      } : player);\n      setState(prev => ({\n        ...prev,\n        players: updatedPlayers\n      }));\n      syncManager.updateGameData({\n        players: updatedPlayers\n      });\n      eventBus.emit('ANSWER_SUBMITTED', {\n        playerId,\n        answer,\n        players: updatedPlayers\n      });\n    },\n    gradeCurrentQuestion: () => {},\n    updateGameSettings: settings => {\n      const newSettings = {\n        ...state.gameSettings,\n        ...settings\n      };\n      setState(prev => ({\n        ...prev,\n        gameSettings: newSettings\n      }));\n      // 설정은 전파/영구화 되어야 함\n      syncManager.updateGameData({\n        gameSettings: newSettings\n      });\n      eventBus.emit('SETTINGS_UPDATED', newSettings);\n    },\n    resetGame: () => {\n      setState(initialState);\n      syncManager.updateGameState({\n        room: null,\n        players: [],\n        questions: [],\n        gameState: 'waiting',\n        currentQuestionIndex: 0\n      });\n      eventBus.emit('GAME_RESET');\n    },\n    updateHostActivity: roomCode => {\n      roomManager.updateHostActivity(roomCode, 'current_session');\n      syncManager.broadcast('HOST_ACTIVITY', {\n        roomCode,\n        sessionId: 'current_session'\n      });\n    }\n  };\n  const value = {\n    state,\n    actions\n  };\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 543,\n    columnNumber: 5\n  }, this);\n}\n_s(NewGameProvider, \"g9yWDQF6ixWa1r5sfsm7YAeGJG4=\");\n_c = NewGameProvider;\nexport function useNewGameContext() {\n  _s2();\n  const context = useContext(GameContext);\n  if (!context) {\n    throw new Error('useNewGameContext must be used within a NewGameProvider');\n  }\n  return context;\n}\n_s2(useNewGameContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default GameContext;\nvar _c;\n$RefreshReg$(_c, \"NewGameProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","syncManager","roomManager","eventBus","jsxDEV","_jsxDEV","GameContext","initialGameSettings","timeLimit","answerRevealTime","eliminationMode","eliminationThreshold","autoMode","initialState","room","players","questions","gameState","currentQuestionIndex","gameSettings","hasStarted","phaseStartedAt","phaseDuration","paused","isLoading","error","NewGameProvider","children","_s","state","setState","gameData","getGameData","prev","_phaseStartedAt","_phaseDuration","_paused","unsubscribers","on","handlePlayerJoin","handlePlayerLeave","syncListeners","addSync","type","cb","addEventListener","push","handleSyncDataUpdate","handleSyncPlayerJoin","handleSyncPlayerLeave","handleSyncGameStateChange","console","log","forEach","unsub","_removeEventListener","_ref","removeEventListener","call","handleGameDataUpdate","data","player","find","p","id","playerId","filter","handleGameStateChange","handleRoomCreated","handleRoomDeleted","roomCode","_state$room","code","next","length","actions","setAnswerDraft","answer","updatedPlayers","map","currentAnswer","String","updateGameData","createRoom","subject","isPublic","hostId","Date","now","defaultQuestions","question","score","options","correctAnswer","emit","joinRoom","before","at","toISOString","localRoomExists","getRoom","publicRooms","getPublicRooms","r","playersCount","info","after","warn","addQuestion","newQuestions","deleteQuestion","questionId","q","reorderQuestions","startGame","isFirstStart","startIndex","nextIndex","resetPlayers","hasSubmitted","undefined","newState","updateHostActivity","pauseGame","updateGameState","resumeGame","nextQuestion","Math","max","showAnswer","latest","gradedPlayers","_p$currentAnswer","answerStr","trim","isCorrect","toString","broadcast","endGame","eliminatePlayer","isEliminated","revivePlayer","submitAnswer","gradeCurrentQuestion","updateGameSettings","settings","newSettings","resetGame","sessionId","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useNewGameContext","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/9204r/.cursor/avatar/src/contexts/NewGameContext.tsx"],"sourcesContent":["/**\n * 새로운 모듈 기반 게임 컨텍스트\n * SyncManager, RoomManager, EventBus를 활용한 독립적인 상태 관리\n */\n\nimport React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { Room, Player, Question, GameState, GameSettings } from '../types/game';\nimport syncManager from '../services/SyncManager';\nimport roomManager from '../services/RoomManager';\nimport eventBus from '../services/EventBus';\n\ninterface GameContextState {\n  room: Room | null;\n  players: Player[];\n  questions: Question[];\n  gameState: GameState;\n  currentQuestionIndex: number;\n  gameSettings: GameSettings;\n  hasStarted: boolean;\n  phaseStartedAt: number | null;\n  phaseDuration: number | null;\n  paused: boolean;\n  isLoading: boolean;\n  error: string | null;\n}\n\ninterface GameContextValue {\n  state: GameContextState;\n  actions: {\n    createRoom: (subject: string, isPublic: boolean) => void;\n    joinRoom: (roomCode: string, player: Player) => boolean;\n    addQuestion: (question: Question) => void;\n    deleteQuestion: (questionId: string) => void;\n    reorderQuestions: (questions: Question[]) => void;\n    startGame: () => void;\n    pauseGame: () => void;\n    resumeGame: () => void;\n    nextQuestion: () => void;\n    showAnswer: () => void;\n    endGame: () => void;\n    eliminatePlayer: (playerId: string) => void;\n    revivePlayer: (playerId: string) => void;\n    setAnswerDraft: (playerId: string, answer: string | number) => void;\n    submitAnswer: (playerId: string, answer: string | number) => void;\n    gradeCurrentQuestion: () => void;\n    updateGameSettings: (settings: Partial<GameSettings>) => void;\n    resetGame: () => void;\n    updateHostActivity: (roomCode: string) => void;\n  };\n}\n\nconst GameContext = createContext<GameContextValue | null>(null);\n\nconst initialGameSettings: GameSettings = {\n  timeLimit: 5,\n  answerRevealTime: 5,\n  eliminationMode: false,\n  eliminationThreshold: 3,\n  autoMode: true\n};\n\nconst initialState: GameContextState = {\n  room: null,\n  players: [],\n  questions: [],\n  gameState: 'waiting',\n  currentQuestionIndex: 0,\n  gameSettings: initialGameSettings,\n  hasStarted: false,\n  phaseStartedAt: null,\n  phaseDuration: null,\n  paused: false,\n  isLoading: true,\n  error: null\n};\n\nexport function NewGameProvider({ children }: { children: ReactNode }) {\n  const [state, setState] = useState<GameContextState>(initialState);\n\n  useEffect(() => {\n    // SyncManager에서 초기 데이터 로드\n    const gameData = syncManager.getGameData();\n    setState(prev => ({\n      ...prev,\n      room: gameData.room,\n      players: gameData.players,\n      questions: gameData.questions,\n      gameState: gameData.gameState,\n      currentQuestionIndex: gameData.currentQuestionIndex,\n      gameSettings: gameData.gameSettings || prev.gameSettings,\n      hasStarted: typeof (gameData as any).hasStarted === 'boolean' ? (gameData as any).hasStarted : false,\n      phaseStartedAt: (gameData as any).phaseStartedAt ?? null,\n      phaseDuration: (gameData as any).phaseDuration ?? null,\n      paused: (gameData as any).paused ?? false,\n      isLoading: false\n    }));\n\n    // 이벤트 리스너 등록\n    const unsubscribers: Array<() => void> = [\n      eventBus.on('PLAYER_JOIN', handlePlayerJoin),\n      eventBus.on('PLAYER_LEAVE', handlePlayerLeave),\n    ];\n\n    // SyncManager 리스너는 해제 함수가 없으므로 별도 관리\n    const syncListeners: Array<{type: string; cb: Function}> = [];\n    const addSync = (type: string, cb: Function) => {\n      syncManager.addEventListener(type, cb);\n      syncListeners.push({ type, cb });\n    };\n    addSync('GAME_DATA_UPDATE', handleSyncDataUpdate);\n    addSync('PLAYER_JOIN', handleSyncPlayerJoin);\n    addSync('PLAYER_LEAVE', handleSyncPlayerLeave);\n    addSync('GAME_STATE_CHANGE', handleSyncGameStateChange);\n\n    console.log('🎮 NewGameContext 초기화됨');\n\n    return () => {\n      unsubscribers.forEach(unsub => unsub());\n      // SyncManager 리스너 해제\n      syncListeners.forEach(({ type, cb }) => {\n        try {\n          (syncManager as any).removeEventListener?.(type, cb);\n        } catch {}\n      });\n      console.log('🎮 NewGameContext 정리됨');\n    };\n  }, []);\n\n  const handleGameDataUpdate = (data: any) => {\n    console.log('🔄 게임 데이터 업데이트:', data);\n    setState(prev => ({ ...prev, ...data }));\n  };\n\n  const handlePlayerJoin = (player: Player) => {\n    setState(prev => ({\n      ...prev,\n      players: prev.players.find(p => p.id === player.id) \n        ? prev.players \n        : [...prev.players, player]\n    }));\n  };\n\n  const handlePlayerLeave = (playerId: string) => {\n    setState(prev => ({\n      ...prev,\n      players: prev.players.filter(p => p.id !== playerId)\n    }));\n  };\n\n  const handleGameStateChange = (data: any) => {\n    setState(prev => ({ ...prev, ...data }));\n  };\n\n  const handleRoomCreated = (room: any) => {\n    console.log('🏠 방 생성됨:', room);\n  };\n\n  const handleRoomDeleted = (roomCode: string) => {\n    console.log('🗑️ 방 삭제됨:', roomCode);\n    if (state.room?.code === roomCode) {\n      setState(prev => ({ ...prev, room: null, players: [] }));\n    }\n  };\n\n  // Sync 이벤트 핸들러들\n  const handleSyncDataUpdate = (data: any) => {\n    // 방어: 질문이 없는데 finished로 들어오는 등 비정상 상태 정규화\n    setState(prev => {\n      const next = { ...prev, ...data } as any;\n      if (!next.questions || next.questions.length === 0) {\n        next.gameState = 'waiting';\n        next.currentQuestionIndex = 0;\n      } else if (\n        typeof next.currentQuestionIndex !== 'number' ||\n        next.currentQuestionIndex < 0 ||\n        next.currentQuestionIndex >= next.questions.length\n      ) {\n        next.currentQuestionIndex = 0;\n        if (next.gameState === 'finished') next.gameState = 'waiting';\n      }\n      if (!next.gameSettings) next.gameSettings = prev.gameSettings;\n      if (typeof next.hasStarted !== 'boolean') next.hasStarted = prev.hasStarted;\n      return next;\n    });\n  };\n\n  const handleSyncPlayerJoin = (player: Player) => {\n    setState(prev => ({\n      ...prev,\n      players: prev.players.find(p => p.id === player.id) \n        ? prev.players \n        : [...prev.players, player]\n    }));\n  };\n\n  const handleSyncPlayerLeave = (playerId: string) => {\n    setState(prev => ({\n      ...prev,\n      players: prev.players.filter(p => p.id !== playerId)\n    }));\n  };\n\n  const handleSyncGameStateChange = (data: any) => {\n    setState(prev => ({ ...prev, ...data }));\n  };\n\n  const actions = {\n    setAnswerDraft: (playerId: string, answer: string | number) => {\n      const updatedPlayers = state.players.map(player =>\n        player.id === playerId \n          ? { ...player, currentAnswer: String(answer) }\n          : player\n      );\n      setState(prev => ({ ...prev, players: updatedPlayers }));\n      syncManager.updateGameData({ players: updatedPlayers });\n    },\n    createRoom: (subject: string, isPublic: boolean) => {\n      try {\n        const hostId = 'host_' + Date.now();\n        const room = roomManager.createRoom(subject, isPublic, hostId);\n        // 기본 예시 문제 3개(OX/객관식/주관식)\n        const now = Date.now();\n        const defaultQuestions: Question[] = [\n          {\n            id: 'q_' + now + '_ox',\n            type: 'ox',\n            question: '태양은 서쪽에서 뜬다.',\n            score: 10,\n            timeLimit: 10,\n            options: ['O', 'X'],\n            correctAnswer: 'X'\n          },\n          {\n            id: 'q_' + now + '_mc',\n            type: 'multiple',\n            question: '대한민국의 수도는?',\n            score: 20,\n            timeLimit: 15,\n            options: ['서울', '부산', '대구', '인천'],\n            correctAnswer: 0\n          },\n          {\n            id: 'q_' + now + '_short',\n            type: 'short',\n            question: '3 x 7 = ?',\n            score: 30,\n            timeLimit: 20,\n            correctAnswer: '21'\n          }\n        ];\n\n        setState(prev => ({ \n          ...prev, \n          room, \n          players: [], \n          questions: defaultQuestions,\n          gameState: 'waiting',\n          currentQuestionIndex: 0,\n          hasStarted: false,\n          gameSettings: prev.gameSettings\n        }));\n        syncManager.updateGameData({ \n          room, \n          players: [], \n          questions: defaultQuestions,\n          gameState: 'waiting',\n          currentQuestionIndex: 0,\n          hasStarted: false,\n          gameSettings: state.gameSettings\n        });\n        eventBus.emit('ROOM_CREATED', room);\n        \n        console.log('🏠 방 생성 완료:', room.code);\n      } catch (error) {\n        console.error('방 생성 실패:', error);\n        setState(prev => ({ ...prev, error: '방 생성에 실패했습니다.' }));\n      }\n    },\n\n    joinRoom: (roomCode: string, player: Player) => {\n      try {\n        // 상세 로그: 참여 시도 전 상태\n        try {\n          const before = {\n            at: new Date().toISOString(),\n            roomCode,\n            localRoomExists: !!roomManager.getRoom(roomCode),\n            publicRooms: roomManager.getPublicRooms().map(r => r.code),\n            playersCount: state.players.length\n          };\n          console.info('[JOIN_TRACE] before joinRoom', before);\n        } catch {}\n\n        const room = roomManager.joinRoom(roomCode, player);\n        \n        if (room) {\n          setState(prev => ({ \n            ...prev, \n            room, \n            players: room.players,\n            error: null \n          }));\n          \n          eventBus.emit('PLAYER_JOIN', player);\n          console.info('[JOIN_TRACE] success', { roomCode, playersCount: room.players.length });\n          return true;\n        } else {\n          setState(prev => ({ ...prev, error: '방을 찾을 수 없습니다.' }));\n          try {\n            const after = {\n              at: new Date().toISOString(),\n              roomCode,\n              localRoomExists: !!roomManager.getRoom(roomCode),\n              publicRooms: roomManager.getPublicRooms().map(r => r.code)\n            };\n            console.warn('[JOIN_TRACE] fail', after);\n          } catch {}\n          return false;\n        }\n      } catch (error) {\n        console.error('방 참여 실패:', error);\n        setState(prev => ({ ...prev, error: '방 참여에 실패했습니다.' }));\n        return false;\n      }\n    },\n\n    addQuestion: (question: Question) => {\n      const newQuestions = [...state.questions, question];\n      setState(prev => ({ ...prev, questions: newQuestions, gameState: prev.gameState === 'finished' ? 'waiting' : prev.gameState }));\n      // 질문 추가 시 전체 데이터 동기화로 상태 일관 유지\n      syncManager.updateGameData({\n        questions: newQuestions,\n        gameState: state.gameState === 'finished' ? 'waiting' : state.gameState,\n        currentQuestionIndex: state.gameState === 'finished' ? 0 : state.currentQuestionIndex,\n        players: state.players,\n        room: state.room\n      } as any);\n      eventBus.emit('QUESTION_ADDED', question);\n    },\n\n    deleteQuestion: (questionId: string) => {\n      const newQuestions = state.questions.filter(q => q.id !== questionId);\n      setState(prev => ({ ...prev, questions: newQuestions }));\n      syncManager.updateGameData({ questions: newQuestions });\n      eventBus.emit('QUESTION_DELETED', questionId);\n    },\n\n    reorderQuestions: (questions: Question[]) => {\n      setState(prev => ({ ...prev, questions }));\n      syncManager.updateGameData({ questions });\n      eventBus.emit('QUESTIONS_REORDERED', questions);\n    },\n\n    startGame: () => {\n      if (state.questions.length === 0) {\n        setState(prev => ({ ...prev, error: '문제를 먼저 추가해주세요.' }));\n        return;\n      }\n\n      const isFirstStart = !state.hasStarted;\n      let startIndex = 0;\n      if (isFirstStart) {\n        startIndex = 0;\n      } else {\n        const nextIndex = state.currentQuestionIndex + 1;\n        if (nextIndex >= state.questions.length) {\n          // 진행할 다음 문제가 없으면 대기 유지\n          return;\n        }\n        startIndex = nextIndex;\n      }\n\n      const resetPlayers = state.players.map(player => ({\n        ...player,\n        hasSubmitted: false,\n        currentAnswer: undefined\n      }));\n\n      const newState = { gameState: 'playing' as const, currentQuestionIndex: startIndex, hasStarted: true, players: resetPlayers, phaseStartedAt: Date.now(), phaseDuration: state.gameSettings.timeLimit, paused: false } as const;\n      setState(prev => ({ ...prev, ...newState }));\n      syncManager.updateGameData({\n        gameState: 'playing',\n        currentQuestionIndex: startIndex,\n        questions: state.questions,\n        players: resetPlayers,\n        room: state.room,\n        hasStarted: true,\n        gameSettings: state.gameSettings,\n        phaseStartedAt: newState.phaseStartedAt,\n        phaseDuration: newState.phaseDuration,\n        paused: false\n      } as any);\n      eventBus.emit('GAME_STARTED', newState);\n      \n      if (state.room) {\n        roomManager.updateHostActivity(state.room.code, 'current_session');\n      }\n    },\n\n    pauseGame: () => {\n      const newState = { gameState: 'paused' as const, paused: true } as const;\n      setState(prev => ({ ...prev, ...newState }));\n      syncManager.updateGameState(newState as any);\n      eventBus.emit('GAME_PAUSED', newState);\n    },\n\n    resumeGame: () => {\n      const newState = { gameState: 'playing' as const, paused: false } as const;\n      setState(prev => ({ ...prev, ...newState }));\n      syncManager.updateGameState(newState as any);\n      eventBus.emit('GAME_RESUMED', newState);\n    },\n\n    nextQuestion: () => {\n      const nextIndex = state.currentQuestionIndex + 1;\n      \n      if (nextIndex >= state.questions.length) {\n        // 자동 종료하지 않고 대기 상태로 전환. 인덱스는 마지막 문제에서 유지\n        const newState = { gameState: 'waiting' as const };\n        setState(prev => ({ ...prev, ...newState, currentQuestionIndex: Math.max(0, prev.currentQuestionIndex) }));\n        syncManager.updateGameData({ gameState: 'waiting', currentQuestionIndex: state.currentQuestionIndex, hasStarted: true });\n        return;\n      }\n\n      const resetPlayers = state.players.map(player => ({\n        ...player,\n        hasSubmitted: false,\n        currentAnswer: undefined\n      }));\n\n      const newState = { gameState: 'playing' as const, currentQuestionIndex: nextIndex, players: resetPlayers, phaseStartedAt: Date.now(), phaseDuration: state.gameSettings.timeLimit, paused: false } as const;\n\n      setState(prev => ({ ...prev, ...newState }));\n      syncManager.updateGameData({\n        gameState: 'playing',\n        currentQuestionIndex: nextIndex,\n        players: resetPlayers,\n        questions: state.questions,\n        room: state.room,\n        phaseStartedAt: newState.phaseStartedAt,\n        phaseDuration: newState.phaseDuration,\n        paused: false\n      } as any);\n      eventBus.emit('NEXT_QUESTION', newState);\n    },\n\n    showAnswer: () => {\n      const newState = { gameState: 'showingAnswer' as const };\n      // 최신 데이터로 채점(브로드캐스트 지연 보정)\n      const latest = syncManager.getGameData();\n      const q = latest.questions[latest.currentQuestionIndex];\n      if (q) {\n        const gradedPlayers = latest.players.map(p => {\n          const answerStr = String(p.currentAnswer ?? '').trim();\n          let isCorrect = false;\n          if (q.type === 'multiple') {\n            isCorrect = String(q.correctAnswer) === answerStr;\n          } else {\n            isCorrect = String(q.correctAnswer).toString().trim() === answerStr;\n          }\n          return isCorrect ? { ...p, score: p.score + q.score } : p;\n        });\n        setState(prev => ({ ...prev, players: gradedPlayers }));\n        syncManager.updateGameData({ players: gradedPlayers });\n        // 정오 결과를 즉시 브로드캐스트해 참여자 UI가 동일하게 반영\n        syncManager.broadcast('FINALIZE_ANSWERS', { questionId: q.id, players: gradedPlayers });\n      }\n      setState(prev => ({ ...prev, ...newState, phaseStartedAt: Date.now(), phaseDuration: state.gameSettings.answerRevealTime, paused: false }));\n      syncManager.updateGameState({ ...newState, phaseStartedAt: Date.now(), phaseDuration: state.gameSettings.answerRevealTime, paused: false } as any);\n      eventBus.emit('ANSWER_SHOWN', newState);\n    },\n\n    endGame: () => {\n      const newState = { gameState: 'finished' as const };\n      setState(prev => ({ ...prev, ...newState }));\n      syncManager.updateGameState(newState);\n      eventBus.emit('GAME_ENDED', newState);\n    },\n\n    eliminatePlayer: (playerId: string) => {\n      const updatedPlayers = state.players.map(player =>\n        player.id === playerId ? { ...player, isEliminated: true } : player\n      );\n      setState(prev => ({ ...prev, players: updatedPlayers }));\n      syncManager.updateGameData({ players: updatedPlayers });\n      eventBus.emit('PLAYER_ELIMINATED', { playerId, players: updatedPlayers });\n    },\n\n    revivePlayer: (playerId: string) => {\n      const updatedPlayers = state.players.map(player =>\n        player.id === playerId ? { ...player, isEliminated: false } : player\n      );\n      setState(prev => ({ ...prev, players: updatedPlayers }));\n      syncManager.updateGameData({ players: updatedPlayers });\n      eventBus.emit('PLAYER_REVIVED', { playerId, players: updatedPlayers });\n    },\n\n    submitAnswer: (playerId: string, answer: string | number) => {\n      const updatedPlayers = state.players.map(player =>\n        player.id === playerId \n          ? { ...player, hasSubmitted: true, currentAnswer: String(answer) }\n          : player\n      );\n      setState(prev => ({ ...prev, players: updatedPlayers }));\n      syncManager.updateGameData({ players: updatedPlayers });\n      eventBus.emit('ANSWER_SUBMITTED', { playerId, answer, players: updatedPlayers });\n    },\n\n    gradeCurrentQuestion: () => {},\n\n    updateGameSettings: (settings: Partial<GameSettings>) => {\n      const newSettings = { ...state.gameSettings, ...settings };\n      setState(prev => ({ ...prev, gameSettings: newSettings }));\n      // 설정은 전파/영구화 되어야 함\n      syncManager.updateGameData({ gameSettings: newSettings });\n      eventBus.emit('SETTINGS_UPDATED', newSettings);\n    },\n\n    resetGame: () => {\n      setState(initialState);\n      syncManager.updateGameState({\n        room: null,\n        players: [],\n        questions: [],\n        gameState: 'waiting',\n        currentQuestionIndex: 0,\n      });\n      eventBus.emit('GAME_RESET');\n    },\n\n    updateHostActivity: (roomCode: string) => {\n      roomManager.updateHostActivity(roomCode, 'current_session');\n      syncManager.broadcast('HOST_ACTIVITY', { roomCode, sessionId: 'current_session' });\n    }\n  };\n\n  const value: GameContextValue = {\n    state,\n    actions\n  };\n\n  return (\n    <GameContext.Provider value={value}>\n      {children}\n    </GameContext.Provider>\n  );\n}\n\nexport function useNewGameContext(): GameContextValue {\n  const context = useContext(GameContext);\n  if (!context) {\n    throw new Error('useNewGameContext must be used within a NewGameProvider');\n  }\n  return context;\n}\n\nexport default GameContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}