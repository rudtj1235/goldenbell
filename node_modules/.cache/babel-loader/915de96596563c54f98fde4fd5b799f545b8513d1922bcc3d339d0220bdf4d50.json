{"ast":null,"code":"/**\n * 방 생명주기 관리자\n * 방 생성, 삭제, 자동 정리를 담당\n */\n\nimport syncManager from './SyncManager';\n// 단순화를 위해 공개방 목록 동기화는 localStorage 기반으로만 처리합니다.\n\nclass RoomManager {\n  constructor() {\n    this.rooms = new Map();\n    this.publicRooms = new Map();\n    this.hostSessions = new Map();\n    this.cleanupInterval = null;\n    this.loadRoomsFromStorage();\n    this.startCleanupTimer();\n    this.setupSyncListeners();\n    console.log('🏠 RoomManager 초기화됨');\n  }\n  loadRoomsFromStorage() {\n    try {\n      const savedRooms = localStorage.getItem('publicRooms');\n      if (savedRooms) {\n        const roomData = JSON.parse(savedRooms);\n        const now = Date.now();\n        const filtered = roomData.filter(r => r.hostActive || now - (r.lastHostActivity || r.createdAt) < 60000);\n        filtered.forEach(room => {\n          this.publicRooms.set(room.code, room);\n        });\n        if (filtered.length !== roomData.length) {\n          this.saveRoomsToStorage();\n        }\n      }\n    } catch (e) {\n      console.error('방 데이터 로드 실패:', e);\n    }\n  }\n  saveRoomsToStorage() {\n    try {\n      const roomArray = Array.from(this.publicRooms.values());\n      localStorage.setItem('publicRooms', JSON.stringify(roomArray));\n    } catch (e) {\n      console.error('방 데이터 저장 실패:', e);\n    }\n  }\n  setupSyncListeners() {\n    // BroadcastChannel 기반 동기화 제거로 단순화\n\n    syncManager.addEventListener('HOST_ACTIVITY', data => {\n      this.updateHostActivity(data.roomCode, data.sessionId);\n    });\n\n    // ROOM_CREATED/DELETED 개별 이벤트는 사용하지 않고, ROOMS_UPDATED만 사용해 단순화\n\n    syncManager.addEventListener('ROOM_DELETED', roomCode => {\n      this.publicRooms.delete(roomCode);\n      this.rooms.delete(roomCode);\n      this.hostSessions.delete(roomCode);\n      this.saveRoomsToStorage();\n    });\n  }\n  startCleanupTimer() {\n    this.cleanupInterval = setInterval(() => {\n      this.cleanupInactiveRooms();\n    }, 5000); // 5초마다 체크\n  }\n  cleanupInactiveRooms() {\n    const now = Date.now();\n    const INACTIVE_TIMEOUT = 10000; // 10초\n\n    this.publicRooms.forEach((room, roomCode) => {\n      const timeSinceLastActivity = now - room.lastHostActivity;\n      if (timeSinceLastActivity > INACTIVE_TIMEOUT && !room.hostActive) {\n        console.log('🧹 비활성 방 자동 삭제:', roomCode, `(${Math.round(timeSinceLastActivity / 1000)}초 비활성)`);\n        this.deleteRoom(roomCode);\n        // 게임 데이터도 초기화 브로드캐스트\n        syncManager.broadcast('ROOM_DELETED', roomCode);\n      }\n    });\n  }\n  createRoom(subject, isPublic, hostId) {\n    const roomCode = this.generateRoomCode();\n    const now = Date.now();\n    const room = {\n      id: `room_${now}`,\n      code: roomCode,\n      subject,\n      isPublic,\n      hostId,\n      players: [],\n      questions: [],\n      currentQuestionIndex: 0,\n      gameState: 'waiting',\n      eliminationMode: false,\n      eliminationThreshold: 3,\n      autoMode: true,\n      answerRevealTime: 5\n    };\n    this.rooms.set(roomCode, room);\n    if (isPublic) {\n      const publicRoom = {\n        id: room.id,\n        code: roomCode,\n        subject,\n        isPublic: true,\n        playerCount: 0,\n        hostActive: true,\n        lastHostActivity: now,\n        createdAt: now\n      };\n      this.publicRooms.set(roomCode, publicRoom);\n      this.hostSessions.set(roomCode, {\n        sessionId: hostId,\n        lastActivity: now\n      });\n\n      // 저장 및 동기화(한 번만 브로드캐스트)\n      this.saveRoomsToStorage();\n      const payload = this.getPublicRooms();\n      syncManager.broadcast('ROOMS_UPDATED', payload);\n      eventBus.emit('ROOMS_UPDATED', payload);\n    }\n    console.log('🏠 방 생성됨:', roomCode, subject);\n    return room;\n  }\n  deleteRoom(roomCode) {\n    // 항상 삭제 시도하여 흔적 제거\n    this.publicRooms.delete(roomCode);\n    this.rooms.delete(roomCode);\n    this.hostSessions.delete(roomCode);\n    this.saveRoomsToStorage();\n    const payload = this.getPublicRooms();\n    syncManager.broadcast('ROOMS_UPDATED', payload);\n    eventBus.emit('ROOMS_UPDATED', payload);\n    syncManager.broadcast('ROOM_DELETED', roomCode);\n    console.log('🗑️ 방 삭제됨:', roomCode);\n  }\n  updateHostActivity(roomCode, sessionId) {\n    const room = this.publicRooms.get(roomCode);\n    if (room) {\n      room.hostActive = true;\n      room.lastHostActivity = Date.now();\n      this.hostSessions.set(roomCode, {\n        sessionId,\n        lastActivity: Date.now()\n      });\n      this.saveRoomsToStorage();\n    }\n  }\n  markHostInactive(roomCode) {\n    const room = this.publicRooms.get(roomCode);\n    if (room) {\n      // 즉시 영구 삭제하여 흔적 제거\n      this.deleteRoom(roomCode);\n    }\n  }\n  joinRoom(roomCode, player) {\n    let room = this.rooms.get(roomCode);\n\n    // 방이 메모리에 없으면 공개방 목록에서 찾아서 생성\n    if (!room) {\n      const publicRoom = this.publicRooms.get(roomCode);\n      if (publicRoom) {\n        room = {\n          id: publicRoom.id,\n          code: roomCode,\n          subject: publicRoom.subject,\n          isPublic: publicRoom.isPublic,\n          hostId: 'temp_host',\n          players: [],\n          questions: [],\n          currentQuestionIndex: 0,\n          gameState: 'waiting',\n          eliminationMode: false,\n          eliminationThreshold: 3,\n          autoMode: true,\n          answerRevealTime: 5\n        };\n        this.rooms.set(roomCode, room);\n      }\n    }\n    if (room && !room.players.find(p => p.id === player.id)) {\n      room.players.push(player);\n\n      // 공개방 플레이어 수 업데이트\n      const publicRoom = this.publicRooms.get(roomCode);\n      if (publicRoom) {\n        publicRoom.playerCount = room.players.length;\n        this.saveRoomsToStorage();\n      }\n\n      // 동기화 매니저에 알림\n      syncManager.addPlayer(player);\n      syncManager.updateGameData({\n        room,\n        players: room.players\n      });\n      console.log('👤 플레이어 방 참여:', player.nickname, '→', roomCode);\n      return room;\n    }\n    return null;\n  }\n  getRoom(roomCode) {\n    return this.rooms.get(roomCode) || null;\n  }\n  getPublicRooms() {\n    return Array.from(this.publicRooms.values());\n  }\n  generateRoomCode() {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    let result = '';\n    for (let i = 0; i < 6; i++) {\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n  }\n  destroy() {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n      this.cleanupInterval = null;\n    }\n    console.log('🏠 RoomManager 종료됨');\n  }\n}\n\n// 싱글톤 인스턴스\nexport const roomManager = new RoomManager();\nexport default roomManager;","map":{"version":3,"names":["syncManager","RoomManager","constructor","rooms","Map","publicRooms","hostSessions","cleanupInterval","loadRoomsFromStorage","startCleanupTimer","setupSyncListeners","console","log","savedRooms","localStorage","getItem","roomData","JSON","parse","now","Date","filtered","filter","r","hostActive","lastHostActivity","createdAt","forEach","room","set","code","length","saveRoomsToStorage","e","error","roomArray","Array","from","values","setItem","stringify","addEventListener","data","updateHostActivity","roomCode","sessionId","delete","setInterval","cleanupInactiveRooms","INACTIVE_TIMEOUT","timeSinceLastActivity","Math","round","deleteRoom","broadcast","createRoom","subject","isPublic","hostId","generateRoomCode","id","players","questions","currentQuestionIndex","gameState","eliminationMode","eliminationThreshold","autoMode","answerRevealTime","publicRoom","playerCount","lastActivity","payload","getPublicRooms","eventBus","emit","get","markHostInactive","joinRoom","player","find","p","push","addPlayer","updateGameData","nickname","getRoom","chars","result","i","charAt","floor","random","destroy","clearInterval","roomManager"],"sources":["C:/Users/9204r/.cursor/avatar/src/services/RoomManager.ts"],"sourcesContent":["/**\n * 방 생명주기 관리자\n * 방 생성, 삭제, 자동 정리를 담당\n */\n\nimport { Room, Player } from '../types/game';\nimport syncManager from './SyncManager';\n// 단순화를 위해 공개방 목록 동기화는 localStorage 기반으로만 처리합니다.\n\nexport interface PublicRoom {\n  id: string;\n  code: string;\n  subject: string;\n  isPublic: boolean;\n  playerCount: number;\n  hostActive: boolean;\n  lastHostActivity: number;\n  createdAt: number;\n}\n\nclass RoomManager {\n  private rooms: Map<string, Room> = new Map();\n  private publicRooms: Map<string, PublicRoom> = new Map();\n  private hostSessions: Map<string, { sessionId: string; lastActivity: number }> = new Map();\n  private cleanupInterval: NodeJS.Timeout | null = null;\n\n  constructor() {\n    this.loadRoomsFromStorage();\n    this.startCleanupTimer();\n    this.setupSyncListeners();\n    \n    console.log('🏠 RoomManager 초기화됨');\n  }\n\n  private loadRoomsFromStorage() {\n    try {\n      const savedRooms = localStorage.getItem('publicRooms');\n      if (savedRooms) {\n        const roomData = JSON.parse(savedRooms) as PublicRoom[];\n        const now = Date.now();\n        const filtered = roomData.filter(r => r.hostActive || (now - (r.lastHostActivity || r.createdAt)) < 60000);\n        filtered.forEach((room: PublicRoom) => {\n          this.publicRooms.set(room.code, room);\n        });\n        if (filtered.length !== roomData.length) {\n          this.saveRoomsToStorage();\n        }\n      }\n    } catch (e) {\n      console.error('방 데이터 로드 실패:', e);\n    }\n  }\n\n  private saveRoomsToStorage() {\n    try {\n      const roomArray = Array.from(this.publicRooms.values());\n      localStorage.setItem('publicRooms', JSON.stringify(roomArray));\n    } catch (e) {\n      console.error('방 데이터 저장 실패:', e);\n    }\n  }\n\n  private setupSyncListeners() {\n    // BroadcastChannel 기반 동기화 제거로 단순화\n\n    syncManager.addEventListener('HOST_ACTIVITY', (data: { roomCode: string; sessionId: string }) => {\n      this.updateHostActivity(data.roomCode, data.sessionId);\n    });\n\n    // ROOM_CREATED/DELETED 개별 이벤트는 사용하지 않고, ROOMS_UPDATED만 사용해 단순화\n\n    syncManager.addEventListener('ROOM_DELETED', (roomCode: string) => {\n      this.publicRooms.delete(roomCode);\n      this.rooms.delete(roomCode);\n      this.hostSessions.delete(roomCode);\n      this.saveRoomsToStorage();\n    });\n  }\n\n  private startCleanupTimer() {\n    this.cleanupInterval = setInterval(() => {\n      this.cleanupInactiveRooms();\n    }, 5000); // 5초마다 체크\n  }\n\n  private cleanupInactiveRooms() {\n    const now = Date.now();\n    const INACTIVE_TIMEOUT = 10000; // 10초\n\n    this.publicRooms.forEach((room, roomCode) => {\n      const timeSinceLastActivity = now - room.lastHostActivity;\n      if (timeSinceLastActivity > INACTIVE_TIMEOUT && !room.hostActive) {\n        console.log('🧹 비활성 방 자동 삭제:', roomCode, `(${Math.round(timeSinceLastActivity/1000)}초 비활성)`);\n        this.deleteRoom(roomCode);\n        // 게임 데이터도 초기화 브로드캐스트\n        syncManager.broadcast('ROOM_DELETED', roomCode);\n      }\n    });\n  }\n\n  public createRoom(subject: string, isPublic: boolean, hostId: string): Room {\n    const roomCode = this.generateRoomCode();\n    const now = Date.now();\n    \n    const room: Room = {\n      id: `room_${now}`,\n      code: roomCode,\n      subject,\n      isPublic,\n      hostId,\n      players: [],\n      questions: [],\n      currentQuestionIndex: 0,\n      gameState: 'waiting',\n      eliminationMode: false,\n      eliminationThreshold: 3,\n      autoMode: true,\n      answerRevealTime: 5\n    };\n\n    this.rooms.set(roomCode, room);\n\n    if (isPublic) {\n      const publicRoom: PublicRoom = {\n        id: room.id,\n        code: roomCode,\n        subject,\n        isPublic: true,\n        playerCount: 0,\n        hostActive: true,\n        lastHostActivity: now,\n        createdAt: now\n      };\n\n      this.publicRooms.set(roomCode, publicRoom);\n      this.hostSessions.set(roomCode, { sessionId: hostId, lastActivity: now });\n      \n      // 저장 및 동기화(한 번만 브로드캐스트)\n      this.saveRoomsToStorage();\n      const payload = this.getPublicRooms();\n      syncManager.broadcast('ROOMS_UPDATED', payload);\n      eventBus.emit('ROOMS_UPDATED', payload);\n    }\n\n    console.log('🏠 방 생성됨:', roomCode, subject);\n    return room;\n  }\n\n  public deleteRoom(roomCode: string) {\n    // 항상 삭제 시도하여 흔적 제거\n    this.publicRooms.delete(roomCode);\n    this.rooms.delete(roomCode);\n    this.hostSessions.delete(roomCode);\n    this.saveRoomsToStorage();\n    const payload = this.getPublicRooms();\n    syncManager.broadcast('ROOMS_UPDATED', payload);\n    eventBus.emit('ROOMS_UPDATED', payload);\n    syncManager.broadcast('ROOM_DELETED', roomCode);\n    console.log('🗑️ 방 삭제됨:', roomCode);\n  }\n\n  public updateHostActivity(roomCode: string, sessionId: string) {\n    const room = this.publicRooms.get(roomCode);\n    if (room) {\n      room.hostActive = true;\n      room.lastHostActivity = Date.now();\n      \n      this.hostSessions.set(roomCode, { sessionId, lastActivity: Date.now() });\n      this.saveRoomsToStorage();\n    }\n  }\n\n  public markHostInactive(roomCode: string) {\n    const room = this.publicRooms.get(roomCode);\n    if (room) {\n      // 즉시 영구 삭제하여 흔적 제거\n      this.deleteRoom(roomCode);\n    }\n  }\n\n  public joinRoom(roomCode: string, player: Player): Room | null {\n    let room = this.rooms.get(roomCode);\n    \n    // 방이 메모리에 없으면 공개방 목록에서 찾아서 생성\n    if (!room) {\n      const publicRoom = this.publicRooms.get(roomCode);\n      if (publicRoom) {\n        room = {\n          id: publicRoom.id,\n          code: roomCode,\n          subject: publicRoom.subject,\n          isPublic: publicRoom.isPublic,\n          hostId: 'temp_host',\n          players: [],\n          questions: [],\n          currentQuestionIndex: 0,\n          gameState: 'waiting',\n          eliminationMode: false,\n          eliminationThreshold: 3,\n          autoMode: true,\n          answerRevealTime: 5\n        };\n        this.rooms.set(roomCode, room);\n      }\n    }\n\n    if (room && !room.players.find(p => p.id === player.id)) {\n      room.players.push(player);\n      \n      // 공개방 플레이어 수 업데이트\n      const publicRoom = this.publicRooms.get(roomCode);\n      if (publicRoom) {\n        publicRoom.playerCount = room.players.length;\n        this.saveRoomsToStorage();\n      }\n\n      // 동기화 매니저에 알림\n      syncManager.addPlayer(player);\n      syncManager.updateGameData({ \n        room, \n        players: room.players \n      });\n\n      console.log('👤 플레이어 방 참여:', player.nickname, '→', roomCode);\n      return room;\n    }\n\n    return null;\n  }\n\n  public getRoom(roomCode: string): Room | null {\n    return this.rooms.get(roomCode) || null;\n  }\n\n  public getPublicRooms(): PublicRoom[] {\n    return Array.from(this.publicRooms.values());\n  }\n\n  private generateRoomCode(): string {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    let result = '';\n    for (let i = 0; i < 6; i++) {\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n  }\n\n  public destroy() {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n      this.cleanupInterval = null;\n    }\n    console.log('🏠 RoomManager 종료됨');\n  }\n}\n\n// 싱글톤 인스턴스\nexport const roomManager = new RoomManager();\nexport default roomManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}