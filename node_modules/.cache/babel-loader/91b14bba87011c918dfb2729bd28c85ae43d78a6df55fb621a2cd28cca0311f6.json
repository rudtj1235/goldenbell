{"ast":null,"code":"const KEY_STORAGE = 'gemini_api_key';\nexport const setGeminiKey = k => {\n  localStorage.setItem(KEY_STORAGE, (k || '').trim());\n};\nexport const getGeminiKey = () => {\n  return localStorage.getItem(KEY_STORAGE) || '';\n};\nexport async function generateQuestionsWithGemini(prompt, count = 10) {\n  var _data$candidates, _data$candidates$, _data$candidates$$con, _data$candidates$$con2, _data$candidates$$con3;\n  const apiKey = getGeminiKey();\n  if (!apiKey) throw new Error('Gemini API 키가 없습니다.');\n  const model = 'gemini-1.5-flash';\n\n  // 2022 교육과정 준수 + 모호어(소수) 해석 규칙 + 개수 강제\n  const sys = `역할: 당신은 대한민국 \"2022 개정 교육과정\" 기반의 학습용 문제 제작자입니다.\n규칙:\n- 반드시 \"2022 개정 교육과정\"의 성취기준/학년 적합성을 준수해 출제하세요.\n- 사용자의 요청(학년/주제/형식/개수)을 해석해 적절한 난이도와 표현으로 한국어 문제를 만듭니다.\n- \"소수\"가 초등 맥락이면 기본적으로 \"소수(Decimal, 소수점)\"로 해석하세요. \"소수(Prime)\"가 필요하면 요청에 '소수(소수: prime)'처럼 분명히 명시되어야 합니다.\n- 출력은 아래 JSON 배열만 허용(설명/코드블록/추가 문장 금지).\n- 각 항목은 { \"type\":\"ox|multiple|short\", \"question\":\"...\", \"options\":[...], \"correctAnswer\":\"...|index\", \"score\":10 } 형태.\n  * multiple은 options 필수, correctAnswer는 0부터 시작하는 정답 index\n  * ox는 options 없이 correctAnswer는 \"O\" 또는 \"X\"\n  * short는 correctAnswer는 문자열 정답\n- 문자열 내 개행/따옴표는 이스케이프 처리\n- 반드시 length=${count} 정확히 맞추세요.`;\n  const user = `사용자 요청: ${prompt}\\n원하는 개수: ${count}\\n출력 형식: 위 JSON 배열만 반환`;\n  const responseSchema = {\n    type: 'ARRAY',\n    items: {\n      type: 'OBJECT',\n      properties: {\n        id: {\n          type: 'STRING'\n        },\n        type: {\n          type: 'STRING'\n        },\n        question: {\n          type: 'STRING'\n        },\n        options: {\n          type: 'ARRAY',\n          items: {\n            type: 'STRING'\n          }\n        },\n        correctAnswer: {\n          type: 'STRING'\n        },\n        score: {\n          type: 'NUMBER'\n        }\n      },\n      required: ['type', 'question', 'correctAnswer']\n    }\n  };\n  const body = {\n    contents: [{\n      role: 'user',\n      parts: [{\n        text: sys\n      }]\n    }, {\n      role: 'user',\n      parts: [{\n        text: user\n      }]\n    }],\n    generationConfig: {\n      responseMimeType: 'application/json',\n      responseSchema\n    }\n  };\n  console.info('[AI_GEN] ▶ 요청 시작', {\n    model,\n    count,\n    prompt\n  });\n  const res = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${encodeURIComponent(apiKey)}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  });\n  if (!res.ok) {\n    console.warn('[AI_GEN] ✖ 응답 실패', {\n      status: res.status,\n      statusText: res.statusText\n    });\n    throw new Error('Gemini 호출 실패');\n  }\n  const data = await res.json();\n  let text = (data === null || data === void 0 ? void 0 : (_data$candidates = data.candidates) === null || _data$candidates === void 0 ? void 0 : (_data$candidates$ = _data$candidates[0]) === null || _data$candidates$ === void 0 ? void 0 : (_data$candidates$$con = _data$candidates$.content) === null || _data$candidates$$con === void 0 ? void 0 : (_data$candidates$$con2 = _data$candidates$$con.parts) === null || _data$candidates$$con2 === void 0 ? void 0 : (_data$candidates$$con3 = _data$candidates$$con2[0]) === null || _data$candidates$$con3 === void 0 ? void 0 : _data$candidates$$con3.text) || '';\n  console.info('[AI_GEN] ◀ 원문 수신', {\n    length: text.length,\n    preview: text.slice(0, 300)\n  });\n  // code fence 제거\n  if (text.startsWith('```')) {\n    const first = text.indexOf('\\n');\n    const lastFence = text.lastIndexOf('```');\n    if (first !== -1 && lastFence !== -1) text = text.slice(first + 1, lastFence);\n  }\n  let parsed;\n  try {\n    parsed = JSON.parse(text);\n  } catch {\n    console.warn('[AI_GEN] ⚠ JSON 파싱 재시도(부분 추출)');\n    const jsonStart = text.indexOf('[');\n    const jsonEnd = text.lastIndexOf(']');\n    if (jsonStart === -1 || jsonEnd === -1) throw new Error('AI 응답 파싱 실패');\n    parsed = JSON.parse(text.slice(jsonStart, jsonEnd + 1));\n  }\n  const arr = Array.isArray(parsed) ? parsed : [parsed];\n  console.info('[AI_GEN] ✅ 파싱 완료', {\n    returned: arr.length\n  });\n  const isValidItem = q => q && ['ox', 'multiple', 'short'].includes(q.type) && typeof q.question === 'string' && (q.type !== 'multiple' || Array.isArray(q.options));\n  let items = arr.filter(isValidItem);\n  console.info('[AI_GEN] 🔎 유효 항목 필터링', {\n    valid: items.length,\n    requested: count\n  });\n  if (items.length > count) items = items.slice(0, count);\n  if (items.length < count) {\n    console.warn('[AI_GEN] ✖ 개수 부족', {\n      valid: items.length,\n      requested: count\n    });\n    throw new Error(`AI가 ${items.length}개만 반환했습니다. 프롬프트를 조금 더 구체적으로 입력하거나 다시 시도하세요.`);\n  }\n  return items.map((q, i) => ({\n    id: q.id || `ai_${Date.now()}_${i}`,\n    type: q.type,\n    question: q.question,\n    options: q.options,\n    correctAnswer: q.correctAnswer,\n    score: typeof q.score === 'number' ? q.score : 10\n  }));\n}","map":{"version":3,"names":["KEY_STORAGE","setGeminiKey","k","localStorage","setItem","trim","getGeminiKey","getItem","generateQuestionsWithGemini","prompt","count","_data$candidates","_data$candidates$","_data$candidates$$con","_data$candidates$$con2","_data$candidates$$con3","apiKey","Error","model","sys","user","responseSchema","type","items","properties","id","question","options","correctAnswer","score","required","body","contents","role","parts","text","generationConfig","responseMimeType","console","info","res","fetch","encodeURIComponent","method","headers","JSON","stringify","ok","warn","status","statusText","data","json","candidates","content","length","preview","slice","startsWith","first","indexOf","lastFence","lastIndexOf","parsed","parse","jsonStart","jsonEnd","arr","Array","isArray","returned","isValidItem","q","includes","filter","valid","requested","map","i","Date","now"],"sources":["C:/Users/9204r/.cursor/avatar/src/services/ai.ts"],"sourcesContent":["export type AiQuestion = {\r\n  id?: string;\r\n  type: 'ox' | 'multiple' | 'short';\r\n  question: string;\r\n  options?: string[];\r\n  correctAnswer: string | number;\r\n  score?: number;\r\n};\r\n\r\nconst KEY_STORAGE = 'gemini_api_key';\r\n\r\nexport const setGeminiKey = (k: string) => {\r\n  localStorage.setItem(KEY_STORAGE, (k || '').trim());\r\n};\r\n\r\nexport const getGeminiKey = (): string => {\r\n  return localStorage.getItem(KEY_STORAGE) || '';\r\n};\r\n\r\nexport async function generateQuestionsWithGemini(prompt: string, count = 10): Promise<AiQuestion[]> {\r\n  const apiKey = getGeminiKey();\r\n  if (!apiKey) throw new Error('Gemini API 키가 없습니다.');\r\n\r\n  const model = 'gemini-1.5-flash';\r\n\r\n  // 2022 교육과정 준수 + 모호어(소수) 해석 규칙 + 개수 강제\r\n  const sys = `역할: 당신은 대한민국 \"2022 개정 교육과정\" 기반의 학습용 문제 제작자입니다.\r\n규칙:\r\n- 반드시 \"2022 개정 교육과정\"의 성취기준/학년 적합성을 준수해 출제하세요.\r\n- 사용자의 요청(학년/주제/형식/개수)을 해석해 적절한 난이도와 표현으로 한국어 문제를 만듭니다.\r\n- \"소수\"가 초등 맥락이면 기본적으로 \"소수(Decimal, 소수점)\"로 해석하세요. \"소수(Prime)\"가 필요하면 요청에 '소수(소수: prime)'처럼 분명히 명시되어야 합니다.\r\n- 출력은 아래 JSON 배열만 허용(설명/코드블록/추가 문장 금지).\r\n- 각 항목은 { \"type\":\"ox|multiple|short\", \"question\":\"...\", \"options\":[...], \"correctAnswer\":\"...|index\", \"score\":10 } 형태.\r\n  * multiple은 options 필수, correctAnswer는 0부터 시작하는 정답 index\r\n  * ox는 options 없이 correctAnswer는 \"O\" 또는 \"X\"\r\n  * short는 correctAnswer는 문자열 정답\r\n- 문자열 내 개행/따옴표는 이스케이프 처리\r\n- 반드시 length=${count} 정확히 맞추세요.`;\r\n\r\n  const user = `사용자 요청: ${prompt}\\n원하는 개수: ${count}\\n출력 형식: 위 JSON 배열만 반환`;\r\n\r\n  const responseSchema = {\r\n    type: 'ARRAY',\r\n    items: {\r\n      type: 'OBJECT',\r\n      properties: {\r\n        id: { type: 'STRING' },\r\n        type: { type: 'STRING' },\r\n        question: { type: 'STRING' },\r\n        options: { type: 'ARRAY', items: { type: 'STRING' } },\r\n        correctAnswer: { type: 'STRING' },\r\n        score: { type: 'NUMBER' }\r\n      },\r\n      required: ['type', 'question', 'correctAnswer']\r\n    }\r\n  } as any;\r\n\r\n  const body = {\r\n    contents: [\r\n      { role: 'user', parts: [{ text: sys }] },\r\n      { role: 'user', parts: [{ text: user }] }\r\n    ],\r\n    generationConfig: {\r\n      responseMimeType: 'application/json',\r\n      responseSchema\r\n    }\r\n  } as any;\r\n\r\n  console.info('[AI_GEN] ▶ 요청 시작', { model, count, prompt });\r\n\r\n  const res = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${encodeURIComponent(apiKey)}` , {\r\n    method: 'POST',\r\n    headers: { 'Content-Type':'application/json' },\r\n    body: JSON.stringify(body),\r\n  });\r\n  if (!res.ok) {\r\n    console.warn('[AI_GEN] ✖ 응답 실패', { status: res.status, statusText: res.statusText });\r\n    throw new Error('Gemini 호출 실패');\r\n  }\r\n  const data = await res.json();\r\n\r\n  let text: string = data?.candidates?.[0]?.content?.parts?.[0]?.text || '';\r\n  console.info('[AI_GEN] ◀ 원문 수신', { length: text.length, preview: text.slice(0, 300) });\r\n  // code fence 제거\r\n  if (text.startsWith('```')) {\r\n    const first = text.indexOf('\\n');\r\n    const lastFence = text.lastIndexOf('```');\r\n    if (first !== -1 && lastFence !== -1) text = text.slice(first + 1, lastFence);\r\n  }\r\n  let parsed: any;\r\n  try {\r\n    parsed = JSON.parse(text);\r\n  } catch {\r\n    console.warn('[AI_GEN] ⚠ JSON 파싱 재시도(부분 추출)');\r\n    const jsonStart = text.indexOf('[');\r\n    const jsonEnd = text.lastIndexOf(']');\r\n    if (jsonStart === -1 || jsonEnd === -1) throw new Error('AI 응답 파싱 실패');\r\n    parsed = JSON.parse(text.slice(jsonStart, jsonEnd + 1));\r\n  }\r\n  const arr: any[] = Array.isArray(parsed) ? parsed : [parsed];\r\n  console.info('[AI_GEN] ✅ 파싱 완료', { returned: arr.length });\r\n  const isValidItem = (q: any) => q && ['ox','multiple','short'].includes(q.type) && typeof q.question === 'string' && (q.type !== 'multiple' || Array.isArray(q.options));\r\n  let items = arr.filter(isValidItem);\r\n  console.info('[AI_GEN] 🔎 유효 항목 필터링', { valid: items.length, requested: count });\r\n  if (items.length > count) items = items.slice(0, count);\r\n  if (items.length < count) {\r\n    console.warn('[AI_GEN] ✖ 개수 부족', { valid: items.length, requested: count });\r\n    throw new Error(`AI가 ${items.length}개만 반환했습니다. 프롬프트를 조금 더 구체적으로 입력하거나 다시 시도하세요.`);\r\n  }\r\n\r\n  return items.map((q, i) => ({\r\n    id: q.id || `ai_${Date.now()}_${i}`,\r\n    type: q.type,\r\n    question: q.question,\r\n    options: q.options,\r\n    correctAnswer: q.correctAnswer,\r\n    score: typeof q.score === 'number' ? q.score : 10,\r\n  }));\r\n}\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}