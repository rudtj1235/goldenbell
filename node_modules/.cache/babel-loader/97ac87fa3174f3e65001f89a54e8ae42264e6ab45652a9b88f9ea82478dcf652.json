{"ast":null,"code":"/**\r\n * 방 생명주기 관리자\r\n * 방 생성, 삭제, 자동 정리를 담당\r\n */\n\nimport syncManager from './SyncManager';\nclass RoomManager {\n  constructor() {\n    this.rooms = new Map();\n    this.publicRooms = new Map();\n    this.hostSessions = new Map();\n    this.cleanupInterval = null;\n    this.loadRoomsFromStorage();\n    this.startCleanupTimer();\n    this.setupSyncListeners();\n    console.log('🏠 RoomManager 초기화됨');\n  }\n  loadRoomsFromStorage() {\n    try {\n      const savedRooms = localStorage.getItem('publicRooms');\n      if (savedRooms) {\n        const roomData = JSON.parse(savedRooms);\n        roomData.forEach(room => {\n          this.publicRooms.set(room.code, room);\n        });\n      }\n    } catch (e) {\n      console.error('방 데이터 로드 실패:', e);\n    }\n  }\n  saveRoomsToStorage() {\n    try {\n      const roomArray = Array.from(this.publicRooms.values());\n      localStorage.setItem('publicRooms', JSON.stringify(roomArray));\n\n      // BroadcastChannel로 다른 탭에 알림\n      syncManager.broadcast('ROOMS_UPDATED', roomArray);\n    } catch (e) {\n      console.error('방 데이터 저장 실패:', e);\n    }\n  }\n  setupSyncListeners() {\n    syncManager.addEventListener('ROOMS_UPDATED', rooms => {\n      this.publicRooms.clear();\n      rooms.forEach(room => {\n        this.publicRooms.set(room.code, room);\n      });\n      console.log('🏠 공개방 목록 동기화됨:', rooms.length);\n    });\n    syncManager.addEventListener('HOST_ACTIVITY', data => {\n      this.updateHostActivity(data.roomCode, data.sessionId);\n    });\n    syncManager.addEventListener('ROOM_CREATED', room => {\n      this.publicRooms.set(room.code, room);\n      this.saveRoomsToStorage();\n    });\n    syncManager.addEventListener('ROOM_DELETED', roomCode => {\n      this.publicRooms.delete(roomCode);\n      this.rooms.delete(roomCode);\n      this.hostSessions.delete(roomCode);\n      this.saveRoomsToStorage();\n    });\n  }\n  startCleanupTimer() {\n    this.cleanupInterval = setInterval(() => {\n      this.cleanupInactiveRooms();\n    }, 5000); // 5초마다 체크\n  }\n  cleanupInactiveRooms() {\n    const now = Date.now();\n    const INACTIVE_TIMEOUT = 10000; // 10초\n\n    this.publicRooms.forEach((room, roomCode) => {\n      const timeSinceLastActivity = now - room.lastHostActivity;\n      if (timeSinceLastActivity > INACTIVE_TIMEOUT && !room.hostActive) {\n        console.log('🧹 비활성 방 자동 삭제:', roomCode, `(${Math.round(timeSinceLastActivity / 1000)}초 비활성)`);\n        this.deleteRoom(roomCode);\n        // 게임 데이터도 초기화 브로드캐스트\n        syncManager.broadcast('ROOM_DELETED', roomCode);\n      }\n    });\n  }\n  createRoom(subject, isPublic, hostId) {\n    const roomCode = this.generateRoomCode();\n    const now = Date.now();\n    const room = {\n      id: `room_${now}`,\n      code: roomCode,\n      subject,\n      isPublic,\n      hostId,\n      players: [],\n      questions: [],\n      currentQuestionIndex: 0,\n      gameState: 'waiting',\n      eliminationMode: false,\n      eliminationThreshold: 3,\n      autoMode: true,\n      answerRevealTime: 5\n    };\n    this.rooms.set(roomCode, room);\n    if (isPublic) {\n      const publicRoom = {\n        id: room.id,\n        code: roomCode,\n        subject,\n        isPublic: true,\n        playerCount: 0,\n        hostActive: true,\n        lastHostActivity: now,\n        createdAt: now\n      };\n      this.publicRooms.set(roomCode, publicRoom);\n      this.hostSessions.set(roomCode, {\n        sessionId: hostId,\n        lastActivity: now\n      });\n      syncManager.broadcast('ROOM_CREATED', publicRoom);\n      this.saveRoomsToStorage();\n    }\n    console.log('🏠 방 생성됨:', roomCode, subject);\n    return room;\n  }\n  deleteRoom(roomCode) {\n    const room = this.publicRooms.get(roomCode);\n    if (room) {\n      this.publicRooms.delete(roomCode);\n      this.rooms.delete(roomCode);\n      this.hostSessions.delete(roomCode);\n      syncManager.broadcast('ROOM_DELETED', roomCode);\n      this.saveRoomsToStorage();\n      console.log('🗑️ 방 삭제됨:', roomCode);\n    }\n  }\n  updateHostActivity(roomCode, sessionId) {\n    const room = this.publicRooms.get(roomCode);\n    if (room) {\n      room.hostActive = true;\n      room.lastHostActivity = Date.now();\n      this.hostSessions.set(roomCode, {\n        sessionId,\n        lastActivity: Date.now()\n      });\n      this.saveRoomsToStorage();\n    }\n  }\n  markHostInactive(roomCode) {\n    const room = this.publicRooms.get(roomCode);\n    if (room) {\n      room.hostActive = false;\n      // 즉시 삭제하여 목록에서 제거\n      this.deleteRoom(roomCode);\n    }\n  }\n  joinRoom(roomCode, player) {\n    let room = this.rooms.get(roomCode);\n\n    // 방이 메모리에 없으면 공개방 목록에서 찾아서 생성\n    if (!room) {\n      const publicRoom = this.publicRooms.get(roomCode);\n      if (publicRoom) {\n        room = {\n          id: publicRoom.id,\n          code: roomCode,\n          subject: publicRoom.subject,\n          isPublic: publicRoom.isPublic,\n          hostId: 'temp_host',\n          players: [],\n          questions: [],\n          currentQuestionIndex: 0,\n          gameState: 'waiting',\n          eliminationMode: false,\n          eliminationThreshold: 3,\n          autoMode: true,\n          answerRevealTime: 5\n        };\n        this.rooms.set(roomCode, room);\n      }\n    }\n    if (room && !room.players.find(p => p.id === player.id)) {\n      room.players.push(player);\n\n      // 공개방 플레이어 수 업데이트\n      const publicRoom = this.publicRooms.get(roomCode);\n      if (publicRoom) {\n        publicRoom.playerCount = room.players.length;\n        this.saveRoomsToStorage();\n      }\n\n      // 동기화 매니저에 알림\n      syncManager.addPlayer(player);\n      syncManager.updateGameData({\n        room,\n        players: room.players\n      });\n      console.log('👤 플레이어 방 참여:', player.nickname, '→', roomCode);\n      return room;\n    }\n    return null;\n  }\n  getRoom(roomCode) {\n    return this.rooms.get(roomCode) || null;\n  }\n  getPublicRooms() {\n    return Array.from(this.publicRooms.values());\n  }\n  generateRoomCode() {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    let result = '';\n    for (let i = 0; i < 6; i++) {\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n  }\n  destroy() {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n      this.cleanupInterval = null;\n    }\n    console.log('🏠 RoomManager 종료됨');\n  }\n}\n\n// 싱글톤 인스턴스\nexport const roomManager = new RoomManager();\nexport default roomManager;","map":{"version":3,"names":["syncManager","RoomManager","constructor","rooms","Map","publicRooms","hostSessions","cleanupInterval","loadRoomsFromStorage","startCleanupTimer","setupSyncListeners","console","log","savedRooms","localStorage","getItem","roomData","JSON","parse","forEach","room","set","code","e","error","saveRoomsToStorage","roomArray","Array","from","values","setItem","stringify","broadcast","addEventListener","clear","length","data","updateHostActivity","roomCode","sessionId","delete","setInterval","cleanupInactiveRooms","now","Date","INACTIVE_TIMEOUT","timeSinceLastActivity","lastHostActivity","hostActive","Math","round","deleteRoom","createRoom","subject","isPublic","hostId","generateRoomCode","id","players","questions","currentQuestionIndex","gameState","eliminationMode","eliminationThreshold","autoMode","answerRevealTime","publicRoom","playerCount","createdAt","lastActivity","get","markHostInactive","joinRoom","player","find","p","push","addPlayer","updateGameData","nickname","getRoom","getPublicRooms","chars","result","i","charAt","floor","random","destroy","clearInterval","roomManager"],"sources":["C:/Users/9204r/.cursor/avatar/src/services/RoomManager.ts"],"sourcesContent":["/**\r\n * 방 생명주기 관리자\r\n * 방 생성, 삭제, 자동 정리를 담당\r\n */\r\n\r\nimport { Room, Player } from '../types/game';\r\nimport syncManager from './SyncManager';\r\n\r\nexport interface PublicRoom {\r\n  id: string;\r\n  code: string;\r\n  subject: string;\r\n  isPublic: boolean;\r\n  playerCount: number;\r\n  hostActive: boolean;\r\n  lastHostActivity: number;\r\n  createdAt: number;\r\n}\r\n\r\nclass RoomManager {\r\n  private rooms: Map<string, Room> = new Map();\r\n  private publicRooms: Map<string, PublicRoom> = new Map();\r\n  private hostSessions: Map<string, { sessionId: string; lastActivity: number }> = new Map();\r\n  private cleanupInterval: NodeJS.Timeout | null = null;\r\n\r\n  constructor() {\r\n    this.loadRoomsFromStorage();\r\n    this.startCleanupTimer();\r\n    this.setupSyncListeners();\r\n    \r\n    console.log('🏠 RoomManager 초기화됨');\r\n  }\r\n\r\n  private loadRoomsFromStorage() {\r\n    try {\r\n      const savedRooms = localStorage.getItem('publicRooms');\r\n      if (savedRooms) {\r\n        const roomData = JSON.parse(savedRooms);\r\n        roomData.forEach((room: PublicRoom) => {\r\n          this.publicRooms.set(room.code, room);\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.error('방 데이터 로드 실패:', e);\r\n    }\r\n  }\r\n\r\n  private saveRoomsToStorage() {\r\n    try {\r\n      const roomArray = Array.from(this.publicRooms.values());\r\n      localStorage.setItem('publicRooms', JSON.stringify(roomArray));\r\n      \r\n      // BroadcastChannel로 다른 탭에 알림\r\n      syncManager.broadcast('ROOMS_UPDATED', roomArray);\r\n    } catch (e) {\r\n      console.error('방 데이터 저장 실패:', e);\r\n    }\r\n  }\r\n\r\n  private setupSyncListeners() {\r\n    syncManager.addEventListener('ROOMS_UPDATED', (rooms: PublicRoom[]) => {\r\n      this.publicRooms.clear();\r\n      rooms.forEach(room => {\r\n        this.publicRooms.set(room.code, room);\r\n      });\r\n      console.log('🏠 공개방 목록 동기화됨:', rooms.length);\r\n    });\r\n\r\n    syncManager.addEventListener('HOST_ACTIVITY', (data: { roomCode: string; sessionId: string }) => {\r\n      this.updateHostActivity(data.roomCode, data.sessionId);\r\n    });\r\n\r\n    syncManager.addEventListener('ROOM_CREATED', (room: PublicRoom) => {\r\n      this.publicRooms.set(room.code, room);\r\n      this.saveRoomsToStorage();\r\n    });\r\n\r\n    syncManager.addEventListener('ROOM_DELETED', (roomCode: string) => {\r\n      this.publicRooms.delete(roomCode);\r\n      this.rooms.delete(roomCode);\r\n      this.hostSessions.delete(roomCode);\r\n      this.saveRoomsToStorage();\r\n    });\r\n  }\r\n\r\n  private startCleanupTimer() {\r\n    this.cleanupInterval = setInterval(() => {\r\n      this.cleanupInactiveRooms();\r\n    }, 5000); // 5초마다 체크\r\n  }\r\n\r\n  private cleanupInactiveRooms() {\r\n    const now = Date.now();\r\n    const INACTIVE_TIMEOUT = 10000; // 10초\r\n\r\n    this.publicRooms.forEach((room, roomCode) => {\r\n      const timeSinceLastActivity = now - room.lastHostActivity;\r\n      if (timeSinceLastActivity > INACTIVE_TIMEOUT && !room.hostActive) {\r\n        console.log('🧹 비활성 방 자동 삭제:', roomCode, `(${Math.round(timeSinceLastActivity/1000)}초 비활성)`);\r\n        this.deleteRoom(roomCode);\r\n        // 게임 데이터도 초기화 브로드캐스트\r\n        syncManager.broadcast('ROOM_DELETED', roomCode);\r\n      }\r\n    });\r\n  }\r\n\r\n  public createRoom(subject: string, isPublic: boolean, hostId: string): Room {\r\n    const roomCode = this.generateRoomCode();\r\n    const now = Date.now();\r\n    \r\n    const room: Room = {\r\n      id: `room_${now}`,\r\n      code: roomCode,\r\n      subject,\r\n      isPublic,\r\n      hostId,\r\n      players: [],\r\n      questions: [],\r\n      currentQuestionIndex: 0,\r\n      gameState: 'waiting',\r\n      eliminationMode: false,\r\n      eliminationThreshold: 3,\r\n      autoMode: true,\r\n      answerRevealTime: 5\r\n    };\r\n\r\n    this.rooms.set(roomCode, room);\r\n\r\n    if (isPublic) {\r\n      const publicRoom: PublicRoom = {\r\n        id: room.id,\r\n        code: roomCode,\r\n        subject,\r\n        isPublic: true,\r\n        playerCount: 0,\r\n        hostActive: true,\r\n        lastHostActivity: now,\r\n        createdAt: now\r\n      };\r\n\r\n      this.publicRooms.set(roomCode, publicRoom);\r\n      this.hostSessions.set(roomCode, { sessionId: hostId, lastActivity: now });\r\n      \r\n      syncManager.broadcast('ROOM_CREATED', publicRoom);\r\n      this.saveRoomsToStorage();\r\n    }\r\n\r\n    console.log('🏠 방 생성됨:', roomCode, subject);\r\n    return room;\r\n  }\r\n\r\n  public deleteRoom(roomCode: string) {\r\n    const room = this.publicRooms.get(roomCode);\r\n    if (room) {\r\n      this.publicRooms.delete(roomCode);\r\n      this.rooms.delete(roomCode);\r\n      this.hostSessions.delete(roomCode);\r\n      \r\n      syncManager.broadcast('ROOM_DELETED', roomCode);\r\n      this.saveRoomsToStorage();\r\n      \r\n      console.log('🗑️ 방 삭제됨:', roomCode);\r\n    }\r\n  }\r\n\r\n  public updateHostActivity(roomCode: string, sessionId: string) {\r\n    const room = this.publicRooms.get(roomCode);\r\n    if (room) {\r\n      room.hostActive = true;\r\n      room.lastHostActivity = Date.now();\r\n      \r\n      this.hostSessions.set(roomCode, { sessionId, lastActivity: Date.now() });\r\n      this.saveRoomsToStorage();\r\n    }\r\n  }\r\n\r\n  public markHostInactive(roomCode: string) {\r\n    const room = this.publicRooms.get(roomCode);\r\n    if (room) {\r\n      room.hostActive = false;\r\n      // 즉시 삭제하여 목록에서 제거\r\n      this.deleteRoom(roomCode);\r\n    }\r\n  }\r\n\r\n  public joinRoom(roomCode: string, player: Player): Room | null {\r\n    let room = this.rooms.get(roomCode);\r\n    \r\n    // 방이 메모리에 없으면 공개방 목록에서 찾아서 생성\r\n    if (!room) {\r\n      const publicRoom = this.publicRooms.get(roomCode);\r\n      if (publicRoom) {\r\n        room = {\r\n          id: publicRoom.id,\r\n          code: roomCode,\r\n          subject: publicRoom.subject,\r\n          isPublic: publicRoom.isPublic,\r\n          hostId: 'temp_host',\r\n          players: [],\r\n          questions: [],\r\n          currentQuestionIndex: 0,\r\n          gameState: 'waiting',\r\n          eliminationMode: false,\r\n          eliminationThreshold: 3,\r\n          autoMode: true,\r\n          answerRevealTime: 5\r\n        };\r\n        this.rooms.set(roomCode, room);\r\n      }\r\n    }\r\n\r\n    if (room && !room.players.find(p => p.id === player.id)) {\r\n      room.players.push(player);\r\n      \r\n      // 공개방 플레이어 수 업데이트\r\n      const publicRoom = this.publicRooms.get(roomCode);\r\n      if (publicRoom) {\r\n        publicRoom.playerCount = room.players.length;\r\n        this.saveRoomsToStorage();\r\n      }\r\n\r\n      // 동기화 매니저에 알림\r\n      syncManager.addPlayer(player);\r\n      syncManager.updateGameData({ \r\n        room, \r\n        players: room.players \r\n      });\r\n\r\n      console.log('👤 플레이어 방 참여:', player.nickname, '→', roomCode);\r\n      return room;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public getRoom(roomCode: string): Room | null {\r\n    return this.rooms.get(roomCode) || null;\r\n  }\r\n\r\n  public getPublicRooms(): PublicRoom[] {\r\n    return Array.from(this.publicRooms.values());\r\n  }\r\n\r\n  private generateRoomCode(): string {\r\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r\n    let result = '';\r\n    for (let i = 0; i < 6; i++) {\r\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public destroy() {\r\n    if (this.cleanupInterval) {\r\n      clearInterval(this.cleanupInterval);\r\n      this.cleanupInterval = null;\r\n    }\r\n    console.log('🏠 RoomManager 종료됨');\r\n  }\r\n}\r\n\r\n// 싱글톤 인스턴스\r\nexport const roomManager = new RoomManager();\r\nexport default roomManager;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}