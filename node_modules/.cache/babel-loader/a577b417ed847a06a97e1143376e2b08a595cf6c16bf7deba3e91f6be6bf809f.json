{"ast":null,"code":"import _objectSpread from\"C:/Users/9204r/.cursor/avatar/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/**\n * 독립적인 동기화 매니저\n * 브라우저 간, 탭 간 실시간 동기화를 담당\n */class SyncManager{constructor(){this.channel=void 0;this.sessionId=void 0;this.listeners=new Map();this.gameData=void 0;this.sessionId='session_'+Date.now()+'_'+Math.random().toString(36).substr(2,9);this.channel=new BroadcastChannel('golden_bell_sync');this.gameData=this.getInitialGameData();this.setupChannelListener();this.startHeartbeat();// console.log('🔄 SyncManager 초기화됨 - SessionID:', this.sessionId);\n}getInitialGameData(){const saved=localStorage.getItem('gameData');if(saved){try{const parsed=JSON.parse(saved);// 방어 로직: 저장된 데이터가 이전 세션의 종료 상태거나 방 정보가 없으면 초기 상태로 정규화\nif(!parsed||!parsed.room){return{room:null,players:[],questions:[],gameState:'waiting',currentQuestionIndex:0,gameSettings:{timeLimit:5,answerRevealTime:5,eliminationMode:false,eliminationThreshold:3,autoMode:true},hasStarted:false,phaseStartedAt:null,phaseDuration:null,paused:false,lastGradedQuestionId:null,activeQuestionId:null,lastUpdated:Date.now()};}// 질문이 없거나 인덱스가 범위를 벗어나면 항상 대기 상태로 초기화\nif(!Array.isArray(parsed.questions)||parsed.questions.length===0){parsed.questions=[];parsed.gameState='waiting';parsed.currentQuestionIndex=0;}else if(typeof parsed.currentQuestionIndex!=='number'||parsed.currentQuestionIndex<0||parsed.currentQuestionIndex>=parsed.questions.length){parsed.currentQuestionIndex=0;if(parsed.gameState==='finished')parsed.gameState='waiting';}// 누락 필드 기본값 보강\nif(!parsed.gameSettings){parsed.gameSettings={timeLimit:5,answerRevealTime:5,eliminationMode:false,eliminationThreshold:3,autoMode:true};}if(typeof parsed.hasStarted!=='boolean'){parsed.hasStarted=false;}if(typeof parsed.phaseStartedAt!=='number')parsed.phaseStartedAt=null;if(typeof parsed.phaseDuration!=='number')parsed.phaseDuration=null;if(typeof parsed.paused!=='boolean')parsed.paused=false;if(typeof parsed.lastGradedQuestionId!=='string')parsed.lastGradedQuestionId=null;if(typeof parsed.activeQuestionId!=='string')parsed.activeQuestionId=null;return parsed;}catch(e){console.warn('저장된 게임 데이터 파싱 실패:',e);}}return{room:null,players:[],questions:[],gameState:'waiting',currentQuestionIndex:0,gameSettings:{timeLimit:5,answerRevealTime:5,eliminationMode:false,eliminationThreshold:3,autoMode:true},hasStarted:false,phaseStartedAt:null,phaseDuration:null,paused:false,lastGradedQuestionId:null,activeQuestionId:null,lastUpdated:Date.now()};}setupChannelListener(){this.channel.addEventListener('message',event=>{const syncEvent=event.data;// 자신이 보낸 이벤트는 무시\nif(syncEvent.source===this.sessionId)return;// console.debug('sync:', syncEvent.type, syncEvent.payload);\nthis.handleSyncEvent(syncEvent);});}handleSyncEvent(event){switch(event.type){case'GAME_DATA_UPDATE':this.updateGameData(event.payload,false);break;case'ADJUST_TIME':this.notifyListeners('ADJUST_TIME',event.payload);break;case'FINALIZE_ANSWERS':this.notifyListeners('FINALIZE_ANSWERS',event.payload);break;case'ROOM_DELETED':{const deletedCode=event.payload;if(this.gameData.room&&this.gameData.room.code===deletedCode){// 현재 방이 삭제되면 게임 데이터 초기화\nthis.gameData=this.getInitialGameData();this.saveGameData();this.notifyListeners('GAME_DATA_UPDATE',this.gameData);console.log('🧹 방 삭제로 게임 데이터 초기화:',deletedCode);}break;}case'PLAYER_JOIN':this.handlePlayerJoin(event.payload);break;case'PLAYER_LEAVE':this.handlePlayerLeave(event.payload);break;case'GAME_STATE_CHANGE':this.handleGameStateChange(event.payload);break;case'HEARTBEAT':this.handleHeartbeat(event.payload);break;}this.notifyListeners(event.type,event.payload);}handlePlayerJoin(player){if(!this.gameData.players.find(p=>p.id===player.id)){this.gameData.players.push(player);this.gameData.lastUpdated=Date.now();this.saveGameData();console.log('👤 플레이어 참여:',player.nickname);}}handlePlayerLeave(playerId){this.gameData.players=this.gameData.players.filter(p=>p.id!==playerId);this.gameData.lastUpdated=Date.now();this.saveGameData();console.log('👤 플레이어 퇴장:',playerId);}handleGameStateChange(newState){Object.assign(this.gameData,newState);this.gameData.lastUpdated=Date.now();this.saveGameData();console.log('🎮 게임 상태 변경:',newState);}handleHeartbeat(data){// 하트비트 처리 (필요시 구현)\n}startHeartbeat(){// 불필요한 하트비트 제거로 트래픽 감소\n}broadcast(type,payload){const event={type,payload,timestamp:Date.now(),source:this.sessionId};this.channel.postMessage(event);// console.debug('broadcast:', type, payload);\n}updateGameData(newData){let broadcast=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;Object.assign(this.gameData,newData);this.gameData.lastUpdated=Date.now();this.saveGameData();if(broadcast){this.broadcast('GAME_DATA_UPDATE',newData);}this.notifyListeners('GAME_DATA_UPDATE',this.gameData);}getGameData(){return _objectSpread({},this.gameData);}addPlayer(player){if(!this.gameData.players.find(p=>p.id===player.id)){this.gameData.players.push(player);this.gameData.lastUpdated=Date.now();this.saveGameData();this.broadcast('PLAYER_JOIN',player);this.notifyListeners('PLAYER_JOIN',player);}}removePlayer(playerId){this.gameData.players=this.gameData.players.filter(p=>p.id!==playerId);this.gameData.lastUpdated=Date.now();this.saveGameData();this.broadcast('PLAYER_LEAVE',playerId);this.notifyListeners('PLAYER_LEAVE',playerId);}updateGameState(changes){Object.assign(this.gameData,changes);this.gameData.lastUpdated=Date.now();this.saveGameData();this.broadcast('GAME_STATE_CHANGE',changes);this.notifyListeners('GAME_STATE_CHANGE',this.gameData);}saveGameData(){try{localStorage.setItem('gameData',JSON.stringify(this.gameData));}catch(e){console.error('게임 데이터 저장 실패:',e);}}addEventListener(eventType,callback){if(!this.listeners.has(eventType)){this.listeners.set(eventType,new Set());}this.listeners.get(eventType).add(callback);}removeEventListener(eventType,callback){if(this.listeners.has(eventType)){this.listeners.get(eventType).delete(callback);}}notifyListeners(eventType,data){if(this.listeners.has(eventType)){this.listeners.get(eventType).forEach(callback=>{try{callback(data);}catch(e){console.error('리스너 콜백 에러:',e);}});}}destroy(){this.channel.close();this.listeners.clear();console.log('🔄 SyncManager 종료됨');}}// 싱글톤 인스턴스\nexport const syncManager=new SyncManager();export default syncManager;","map":{"version":3,"names":["SyncManager","constructor","channel","sessionId","listeners","Map","gameData","Date","now","Math","random","toString","substr","BroadcastChannel","getInitialGameData","setupChannelListener","startHeartbeat","saved","localStorage","getItem","parsed","JSON","parse","room","players","questions","gameState","currentQuestionIndex","gameSettings","timeLimit","answerRevealTime","eliminationMode","eliminationThreshold","autoMode","hasStarted","phaseStartedAt","phaseDuration","paused","lastGradedQuestionId","activeQuestionId","lastUpdated","Array","isArray","length","e","console","warn","addEventListener","event","syncEvent","data","source","handleSyncEvent","type","updateGameData","payload","notifyListeners","deletedCode","code","saveGameData","log","handlePlayerJoin","handlePlayerLeave","handleGameStateChange","handleHeartbeat","player","find","p","id","push","nickname","playerId","filter","newState","Object","assign","broadcast","timestamp","postMessage","newData","arguments","undefined","getGameData","_objectSpread","addPlayer","removePlayer","updateGameState","changes","setItem","stringify","error","eventType","callback","has","set","Set","get","add","removeEventListener","delete","forEach","destroy","close","clear","syncManager"],"sources":["C:/Users/9204r/.cursor/avatar/src/services/SyncManager.ts"],"sourcesContent":["/**\n * 독립적인 동기화 매니저\n * 브라우저 간, 탭 간 실시간 동기화를 담당\n */\n\nimport { Room, Player, Question, GameState, GameSettings } from '../types/game';\n\nexport interface SyncEvent {\n  type: string;\n  payload: any;\n  timestamp: number;\n  source: string;\n}\n\nexport interface GameSyncData {\n  room: Room | null;\n  players: Player[];\n  questions: Question[];\n  gameState: GameState;\n  currentQuestionIndex: number;\n  gameSettings: GameSettings;\n  hasStarted: boolean;\n  phaseStartedAt: number | null; // ms since epoch\n  phaseDuration: number | null; // seconds (total for this phase)\n  paused: boolean;\n  lastGradedQuestionId: string | null;\n  activeQuestionId: string | null;\n  lastUpdated: number;\n}\n\nclass SyncManager {\n  private channel: BroadcastChannel;\n  private sessionId: string;\n  private listeners: Map<string, Set<Function>> = new Map();\n  private gameData: GameSyncData;\n\n  constructor() {\n    this.sessionId = 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n    this.channel = new BroadcastChannel('golden_bell_sync');\n    this.gameData = this.getInitialGameData();\n    \n    this.setupChannelListener();\n    this.startHeartbeat();\n    \n    // console.log('🔄 SyncManager 초기화됨 - SessionID:', this.sessionId);\n  }\n\n  private getInitialGameData(): GameSyncData {\n    const saved = localStorage.getItem('gameData');\n    if (saved) {\n      try {\n        const parsed = JSON.parse(saved);\n        // 방어 로직: 저장된 데이터가 이전 세션의 종료 상태거나 방 정보가 없으면 초기 상태로 정규화\n        if (!parsed || !parsed.room) {\n          return {\n            room: null,\n            players: [],\n            questions: [],\n            gameState: 'waiting',\n            currentQuestionIndex: 0,\n            gameSettings: {\n              timeLimit: 5,\n              answerRevealTime: 5,\n              eliminationMode: false,\n              eliminationThreshold: 3,\n              autoMode: true\n            },\n            hasStarted: false,\n            phaseStartedAt: null,\n            phaseDuration: null,\n            paused: false,\n            lastGradedQuestionId: null,\n            activeQuestionId: null,\n            lastUpdated: Date.now()\n          };\n        }\n        // 질문이 없거나 인덱스가 범위를 벗어나면 항상 대기 상태로 초기화\n        if (!Array.isArray(parsed.questions) || parsed.questions.length === 0) {\n          parsed.questions = [];\n          parsed.gameState = 'waiting';\n          parsed.currentQuestionIndex = 0;\n        } else if (\n          typeof parsed.currentQuestionIndex !== 'number' ||\n          parsed.currentQuestionIndex < 0 ||\n          parsed.currentQuestionIndex >= parsed.questions.length\n        ) {\n          parsed.currentQuestionIndex = 0;\n          if (parsed.gameState === 'finished') parsed.gameState = 'waiting';\n        }\n        // 누락 필드 기본값 보강\n        if (!parsed.gameSettings) {\n          parsed.gameSettings = {\n            timeLimit: 5,\n            answerRevealTime: 5,\n            eliminationMode: false,\n            eliminationThreshold: 3,\n            autoMode: true\n          };\n        }\n        if (typeof parsed.hasStarted !== 'boolean') {\n          parsed.hasStarted = false;\n        }\n        if (typeof parsed.phaseStartedAt !== 'number') parsed.phaseStartedAt = null;\n        if (typeof parsed.phaseDuration !== 'number') parsed.phaseDuration = null;\n        if (typeof parsed.paused !== 'boolean') parsed.paused = false;\n        if (typeof parsed.lastGradedQuestionId !== 'string') parsed.lastGradedQuestionId = null;\n        if (typeof parsed.activeQuestionId !== 'string') parsed.activeQuestionId = null;\n        return parsed;\n      } catch (e) {\n        console.warn('저장된 게임 데이터 파싱 실패:', e);\n      }\n    }\n    \n    return {\n      room: null,\n      players: [],\n      questions: [],\n      gameState: 'waiting',\n      currentQuestionIndex: 0,\n      gameSettings: {\n        timeLimit: 5,\n        answerRevealTime: 5,\n        eliminationMode: false,\n        eliminationThreshold: 3,\n        autoMode: true\n      },\n      hasStarted: false,\n      phaseStartedAt: null,\n      phaseDuration: null,\n      paused: false,\n      lastGradedQuestionId: null,\n      activeQuestionId: null,\n      lastUpdated: Date.now()\n    };\n  }\n\n  private setupChannelListener() {\n    this.channel.addEventListener('message', (event) => {\n      const syncEvent: SyncEvent = event.data;\n      \n      // 자신이 보낸 이벤트는 무시\n      if (syncEvent.source === this.sessionId) return;\n      \n      // console.debug('sync:', syncEvent.type, syncEvent.payload);\n      \n      this.handleSyncEvent(syncEvent);\n    });\n  }\n\n  private handleSyncEvent(event: SyncEvent) {\n    switch (event.type) {\n      case 'GAME_DATA_UPDATE':\n        this.updateGameData(event.payload, false);\n        break;\n      case 'ADJUST_TIME':\n        this.notifyListeners('ADJUST_TIME', event.payload);\n        break;\n      case 'FINALIZE_ANSWERS':\n        this.notifyListeners('FINALIZE_ANSWERS', event.payload);\n        break;\n      case 'ROOM_DELETED': {\n        const deletedCode = event.payload as string;\n        if (this.gameData.room && this.gameData.room.code === deletedCode) {\n          // 현재 방이 삭제되면 게임 데이터 초기화\n          this.gameData = this.getInitialGameData();\n          this.saveGameData();\n          this.notifyListeners('GAME_DATA_UPDATE', this.gameData);\n          console.log('🧹 방 삭제로 게임 데이터 초기화:', deletedCode);\n        }\n        break;\n      }\n      case 'PLAYER_JOIN':\n        this.handlePlayerJoin(event.payload);\n        break;\n      case 'PLAYER_LEAVE':\n        this.handlePlayerLeave(event.payload);\n        break;\n      case 'GAME_STATE_CHANGE':\n        this.handleGameStateChange(event.payload);\n        break;\n      case 'HEARTBEAT':\n        this.handleHeartbeat(event.payload);\n        break;\n    }\n    \n    this.notifyListeners(event.type, event.payload);\n  }\n\n  private handlePlayerJoin(player: Player) {\n    if (!this.gameData.players.find(p => p.id === player.id)) {\n      this.gameData.players.push(player);\n      this.gameData.lastUpdated = Date.now();\n      this.saveGameData();\n      \n      console.log('👤 플레이어 참여:', player.nickname);\n    }\n  }\n\n  private handlePlayerLeave(playerId: string) {\n    this.gameData.players = this.gameData.players.filter(p => p.id !== playerId);\n    this.gameData.lastUpdated = Date.now();\n    this.saveGameData();\n    \n    console.log('👤 플레이어 퇴장:', playerId);\n  }\n\n  private handleGameStateChange(newState: Partial<GameSyncData>) {\n    Object.assign(this.gameData, newState);\n    this.gameData.lastUpdated = Date.now();\n    this.saveGameData();\n    \n    console.log('🎮 게임 상태 변경:', newState);\n  }\n\n  private handleHeartbeat(data: { sessionId: string; timestamp: number }) {\n    // 하트비트 처리 (필요시 구현)\n  }\n\n  private startHeartbeat() {\n    // 불필요한 하트비트 제거로 트래픽 감소\n  }\n\n  public broadcast(type: string, payload: any) {\n    const event: SyncEvent = {\n      type,\n      payload,\n      timestamp: Date.now(),\n      source: this.sessionId\n    };\n    \n    this.channel.postMessage(event);\n    // console.debug('broadcast:', type, payload);\n  }\n\n  public updateGameData(newData: Partial<GameSyncData>, broadcast = true) {\n    Object.assign(this.gameData, newData);\n    this.gameData.lastUpdated = Date.now();\n    this.saveGameData();\n    \n    if (broadcast) {\n      this.broadcast('GAME_DATA_UPDATE', newData);\n    }\n    \n    this.notifyListeners('GAME_DATA_UPDATE', this.gameData);\n  }\n\n  public getGameData(): GameSyncData {\n    return { ...this.gameData };\n  }\n\n  public addPlayer(player: Player) {\n    if (!this.gameData.players.find(p => p.id === player.id)) {\n      this.gameData.players.push(player);\n      this.gameData.lastUpdated = Date.now();\n      this.saveGameData();\n      \n      this.broadcast('PLAYER_JOIN', player);\n      this.notifyListeners('PLAYER_JOIN', player);\n    }\n  }\n\n  public removePlayer(playerId: string) {\n    this.gameData.players = this.gameData.players.filter(p => p.id !== playerId);\n    this.gameData.lastUpdated = Date.now();\n    this.saveGameData();\n    \n    this.broadcast('PLAYER_LEAVE', playerId);\n    this.notifyListeners('PLAYER_LEAVE', playerId);\n  }\n\n  public updateGameState(changes: Partial<GameSyncData>) {\n    Object.assign(this.gameData, changes);\n    this.gameData.lastUpdated = Date.now();\n    this.saveGameData();\n    \n    this.broadcast('GAME_STATE_CHANGE', changes);\n    this.notifyListeners('GAME_STATE_CHANGE', this.gameData);\n  }\n\n  private saveGameData() {\n    try {\n      localStorage.setItem('gameData', JSON.stringify(this.gameData));\n    } catch (e) {\n      console.error('게임 데이터 저장 실패:', e);\n    }\n  }\n\n  public addEventListener(eventType: string, callback: Function) {\n    if (!this.listeners.has(eventType)) {\n      this.listeners.set(eventType, new Set());\n    }\n    this.listeners.get(eventType)!.add(callback);\n  }\n\n  public removeEventListener(eventType: string, callback: Function) {\n    if (this.listeners.has(eventType)) {\n      this.listeners.get(eventType)!.delete(callback);\n    }\n  }\n\n  private notifyListeners(eventType: string, data: any) {\n    if (this.listeners.has(eventType)) {\n      this.listeners.get(eventType)!.forEach(callback => {\n        try {\n          callback(data);\n        } catch (e) {\n          console.error('리스너 콜백 에러:', e);\n        }\n      });\n    }\n  }\n\n  public destroy() {\n    this.channel.close();\n    this.listeners.clear();\n    console.log('🔄 SyncManager 종료됨');\n  }\n}\n\n// 싱글톤 인스턴스\nexport const syncManager = new SyncManager();\nexport default syncManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}