{"ast":null,"code":"const KEY_STORAGE = 'gemini_api_key';\nexport const setGeminiKey = k => {\n  localStorage.setItem(KEY_STORAGE, (k || '').trim());\n};\nexport const getGeminiKey = () => {\n  return localStorage.getItem(KEY_STORAGE) || '';\n};\nexport async function generateQuestionsWithGemini(prompt, count = 10) {\n  var _data$candidates, _data$candidates$, _data$candidates$$con, _data$candidates$$con2, _data$candidates$$con3;\n  const apiKey = getGeminiKey();\n  if (!apiKey) throw new Error('Gemini API 키가 없습니다.');\n  const model = 'gemini-1.5-flash';\n\n  // 2022 교육과정 준수 + 모호어(소수) 해석 규칙 + 개수 강제\n  const sys = `역할: 당신은 대한민국 \"2022 개정 교육과정\"에 맞춘 초/중등 학습용 문제 제작자입니다.\n규칙:\n- 반드시 \"2022 개정 교육과정\"의 성취기준/학년 적합성을 준수해 출제하세요.\n- 사용자의 요청(학년/주제/형식/개수)을 해석해 적절한 난이도와 표현으로 한국어 문제를 만듭니다.\n- \"소수\"가 초등 맥락이면 기본적으로 \"소수(Decimal, 소수점)\"로 해석하세요. \"소수(Prime)\"가 필요하면 요청에 '소수(소수: prime)'처럼 분명히 명시되어야 합니다.\n- 출력은 아래 JSON 배열만 허용(설명/코드블록/추가 문장 금지).\n- 각 항목은 { \"type\":\"ox|multiple|short\", \"question\":\"...\", \"options\":[...], \"correctAnswer\":\"...|index\", \"score\":10 } 형태.\n  * multiple은 options 필수, correctAnswer는 0부터 시작하는 정답 index\n  * ox는 options 없이 correctAnswer는 \"O\" 또는 \"X\"\n  * short는 correctAnswer는 문자열 정답\n- 문자열 내 개행/따옴표는 이스케이프 처리\n- 반드시 length=${count} 정확히 맞추세요.`;\n  const user = `사용자 요청: ${prompt}\\n원하는 개수: ${count}\\n출력 형식: 위 JSON 배열만 반환`;\n  const body = {\n    contents: [{\n      role: 'user',\n      parts: [{\n        text: `${sys}\\n\\n${user}`\n      }]\n    }]\n  };\n  const res = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${encodeURIComponent(apiKey)}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  });\n  if (!res.ok) throw new Error('Gemini 호출 실패');\n  const data = await res.json();\n  let text = (data === null || data === void 0 ? void 0 : (_data$candidates = data.candidates) === null || _data$candidates === void 0 ? void 0 : (_data$candidates$ = _data$candidates[0]) === null || _data$candidates$ === void 0 ? void 0 : (_data$candidates$$con = _data$candidates$.content) === null || _data$candidates$$con === void 0 ? void 0 : (_data$candidates$$con2 = _data$candidates$$con.parts) === null || _data$candidates$$con2 === void 0 ? void 0 : (_data$candidates$$con3 = _data$candidates$$con2[0]) === null || _data$candidates$$con3 === void 0 ? void 0 : _data$candidates$$con3.text) || '';\n  let jsonStart = text.indexOf('[');\n  let jsonEnd = text.lastIndexOf(']');\n  if (jsonStart === -1 || jsonEnd === -1) throw new Error('AI 응답 파싱 실패');\n  let json = text.slice(jsonStart, jsonEnd + 1);\n  let parsed = JSON.parse(json);\n\n  // 1차 검증: 개수/형식 검증, 부족 시 1회 재시도\n  const isValidItem = q => q && ['ox', 'multiple', 'short'].includes(q.type) && typeof q.question === 'string' && (q.type !== 'multiple' || Array.isArray(q.options));\n  let items = (parsed || []).filter(isValidItem);\n  if (items.length !== count) {\n    const reinforce = `${sys}\\n\\n중요: 이전 응답의 개수는 ${items.length}였습니다. 반드시 정확히 ${count}개를 반환하세요.`;\n    const retryBody = {\n      contents: [{\n        role: 'user',\n        parts: [{\n          text: `${reinforce}\\n\\n${user}`\n        }]\n      }]\n    };\n    const retry = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${encodeURIComponent(apiKey)}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(retryBody)\n    });\n    if (retry.ok) {\n      var _rd$candidates, _rd$candidates$, _rd$candidates$$conte, _rd$candidates$$conte2, _rd$candidates$$conte3;\n      const rd = await retry.json();\n      text = (rd === null || rd === void 0 ? void 0 : (_rd$candidates = rd.candidates) === null || _rd$candidates === void 0 ? void 0 : (_rd$candidates$ = _rd$candidates[0]) === null || _rd$candidates$ === void 0 ? void 0 : (_rd$candidates$$conte = _rd$candidates$.content) === null || _rd$candidates$$conte === void 0 ? void 0 : (_rd$candidates$$conte2 = _rd$candidates$$conte.parts) === null || _rd$candidates$$conte2 === void 0 ? void 0 : (_rd$candidates$$conte3 = _rd$candidates$$conte2[0]) === null || _rd$candidates$$conte3 === void 0 ? void 0 : _rd$candidates$$conte3.text) || '';\n      jsonStart = text.indexOf('[');\n      jsonEnd = text.lastIndexOf(']');\n      if (jsonStart !== -1 && jsonEnd !== -1) {\n        json = text.slice(jsonStart, jsonEnd + 1);\n        parsed = JSON.parse(json);\n        items = (parsed || []).filter(isValidItem);\n      }\n    }\n  }\n\n  // 최종 보정: 개수 초과면 자르고, 부족하면 마지막 항목을 변형 복제하여 맞춤\n  if (items.length > count) items = items.slice(0, count);\n  while (items.length < count && items.length > 0) {\n    const base = items[items.length - 1];\n    items.push({\n      ...base,\n      id: undefined,\n      question: `${base.question} (변형 ${items.length + 1})`\n    });\n  }\n  return items.map((q, i) => ({\n    id: q.id || `ai_${Date.now()}_${i}`,\n    type: q.type,\n    question: q.question,\n    options: q.options,\n    correctAnswer: q.correctAnswer,\n    score: typeof q.score === 'number' ? q.score : 10\n  }));\n}","map":{"version":3,"names":["KEY_STORAGE","setGeminiKey","k","localStorage","setItem","trim","getGeminiKey","getItem","generateQuestionsWithGemini","prompt","count","_data$candidates","_data$candidates$","_data$candidates$$con","_data$candidates$$con2","_data$candidates$$con3","apiKey","Error","model","sys","user","body","contents","role","parts","text","res","fetch","encodeURIComponent","method","headers","JSON","stringify","ok","data","json","candidates","content","jsonStart","indexOf","jsonEnd","lastIndexOf","slice","parsed","parse","isValidItem","q","includes","type","question","Array","isArray","options","items","filter","length","reinforce","retryBody","retry","_rd$candidates","_rd$candidates$","_rd$candidates$$conte","_rd$candidates$$conte2","_rd$candidates$$conte3","rd","base","push","id","undefined","map","i","Date","now","correctAnswer","score"],"sources":["C:/Users/9204r/.cursor/avatar/src/services/ai.ts"],"sourcesContent":["export type AiQuestion = {\r\n  id?: string;\r\n  type: 'ox' | 'multiple' | 'short';\r\n  question: string;\r\n  options?: string[];\r\n  correctAnswer: string | number;\r\n  score?: number;\r\n};\r\n\r\nconst KEY_STORAGE = 'gemini_api_key';\r\n\r\nexport const setGeminiKey = (k: string) => {\r\n  localStorage.setItem(KEY_STORAGE, (k || '').trim());\r\n};\r\n\r\nexport const getGeminiKey = (): string => {\r\n  return localStorage.getItem(KEY_STORAGE) || '';\r\n};\r\n\r\nexport async function generateQuestionsWithGemini(prompt: string, count = 10): Promise<AiQuestion[]> {\r\n  const apiKey = getGeminiKey();\r\n  if (!apiKey) throw new Error('Gemini API 키가 없습니다.');\r\n\r\n  const model = 'gemini-1.5-flash';\r\n\r\n  // 2022 교육과정 준수 + 모호어(소수) 해석 규칙 + 개수 강제\r\n  const sys = `역할: 당신은 대한민국 \"2022 개정 교육과정\"에 맞춘 초/중등 학습용 문제 제작자입니다.\r\n규칙:\r\n- 반드시 \"2022 개정 교육과정\"의 성취기준/학년 적합성을 준수해 출제하세요.\r\n- 사용자의 요청(학년/주제/형식/개수)을 해석해 적절한 난이도와 표현으로 한국어 문제를 만듭니다.\r\n- \"소수\"가 초등 맥락이면 기본적으로 \"소수(Decimal, 소수점)\"로 해석하세요. \"소수(Prime)\"가 필요하면 요청에 '소수(소수: prime)'처럼 분명히 명시되어야 합니다.\r\n- 출력은 아래 JSON 배열만 허용(설명/코드블록/추가 문장 금지).\r\n- 각 항목은 { \"type\":\"ox|multiple|short\", \"question\":\"...\", \"options\":[...], \"correctAnswer\":\"...|index\", \"score\":10 } 형태.\r\n  * multiple은 options 필수, correctAnswer는 0부터 시작하는 정답 index\r\n  * ox는 options 없이 correctAnswer는 \"O\" 또는 \"X\"\r\n  * short는 correctAnswer는 문자열 정답\r\n- 문자열 내 개행/따옴표는 이스케이프 처리\r\n- 반드시 length=${count} 정확히 맞추세요.`;\r\n\r\n  const user = `사용자 요청: ${prompt}\\n원하는 개수: ${count}\\n출력 형식: 위 JSON 배열만 반환`;\r\n\r\n  const body = {\r\n    contents: [{ role: 'user', parts: [{ text: `${sys}\\n\\n${user}` }]}]\r\n  } as any;\r\n\r\n  const res = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${encodeURIComponent(apiKey)}` , {\r\n    method: 'POST',\r\n    headers: { 'Content-Type':'application/json' },\r\n    body: JSON.stringify(body),\r\n  });\r\n  if (!res.ok) throw new Error('Gemini 호출 실패');\r\n  const data = await res.json();\r\n\r\n  let text: string = data?.candidates?.[0]?.content?.parts?.[0]?.text || '';\r\n  let jsonStart = text.indexOf('[');\r\n  let jsonEnd = text.lastIndexOf(']');\r\n  if (jsonStart === -1 || jsonEnd === -1) throw new Error('AI 응답 파싱 실패');\r\n  let json = text.slice(jsonStart, jsonEnd + 1);\r\n  let parsed = JSON.parse(json) as AiQuestion[];\r\n\r\n  // 1차 검증: 개수/형식 검증, 부족 시 1회 재시도\r\n  const isValidItem = (q: any) => q && ['ox','multiple','short'].includes(q.type) && typeof q.question === 'string' && (q.type !== 'multiple' || Array.isArray(q.options));\r\n  let items = (parsed || []).filter(isValidItem);\r\n  if (items.length !== count) {\r\n    const reinforce = `${sys}\\n\\n중요: 이전 응답의 개수는 ${items.length}였습니다. 반드시 정확히 ${count}개를 반환하세요.`;\r\n    const retryBody = { contents: [{ role: 'user', parts: [{ text: `${reinforce}\\n\\n${user}` }]}] } as any;\r\n    const retry = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${encodeURIComponent(apiKey)}` , {\r\n      method: 'POST',\r\n      headers: { 'Content-Type':'application/json' },\r\n      body: JSON.stringify(retryBody),\r\n    });\r\n    if (retry.ok) {\r\n      const rd = await retry.json();\r\n      text = rd?.candidates?.[0]?.content?.parts?.[0]?.text || '';\r\n      jsonStart = text.indexOf('[');\r\n      jsonEnd = text.lastIndexOf(']');\r\n      if (jsonStart !== -1 && jsonEnd !== -1) {\r\n        json = text.slice(jsonStart, jsonEnd + 1);\r\n        parsed = JSON.parse(json) as AiQuestion[];\r\n        items = (parsed || []).filter(isValidItem);\r\n      }\r\n    }\r\n  }\r\n\r\n  // 최종 보정: 개수 초과면 자르고, 부족하면 마지막 항목을 변형 복제하여 맞춤\r\n  if (items.length > count) items = items.slice(0, count);\r\n  while (items.length < count && items.length > 0) {\r\n    const base = items[items.length - 1];\r\n    items.push({ ...base, id: undefined, question: `${base.question} (변형 ${items.length + 1})` });\r\n  }\r\n\r\n  return items.map((q, i) => ({\r\n    id: q.id || `ai_${Date.now()}_${i}`,\r\n    type: q.type,\r\n    question: q.question,\r\n    options: q.options,\r\n    correctAnswer: q.correctAnswer,\r\n    score: typeof q.score === 'number' ? q.score : 10,\r\n  }));\r\n}\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}