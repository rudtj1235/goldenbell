{"ast":null,"code":"/**\n * 방 생명주기 관리자\n * 방 생성, 삭제, 자동 정리를 담당\n */import syncManager from'./SyncManager';// 단순화를 위해 공개방 목록 동기화는 localStorage 기반으로만 처리합니다.\nclass RoomManager{constructor(){this.rooms=new Map();this.publicRooms=new Map();this.hostSessions=new Map();this.cleanupInterval=null;this.deletionTimers=new Map();this.loadRoomsFromStorage();this.startCleanupTimer();this.setupSyncListeners();// debug: console.debug('RoomManager init')\n}loadRoomsFromStorage(){try{const savedRooms=localStorage.getItem('publicRooms');if(savedRooms){const roomData=JSON.parse(savedRooms);// 찌꺼기 정리: 마지막 활동 이후 10초 초과이면서 hostActive=false 인 방은 제거\nconst now=Date.now();const filtered=roomData.filter(r=>now-(r.lastHostActivity||r.createdAt)<10000);filtered.forEach(room=>{this.publicRooms.set(room.code,room);});if(filtered.length!==roomData.length){this.saveRoomsToStorage();}}}catch(e){console.error('방 데이터 로드 실패:',e);}}saveRoomsToStorage(){try{const roomArray=Array.from(this.publicRooms.values());localStorage.setItem('publicRooms',JSON.stringify(roomArray));// debug: console.debug('publicRooms saved:', roomArray.length)\n}catch(e){console.error('방 데이터 저장 실패:',e);}}setupSyncListeners(){// BroadcastChannel 기반 동기화 제거로 단순화\nsyncManager.addEventListener('HOST_ACTIVITY',data=>{this.updateHostActivity(data.roomCode,data.sessionId);});// ROOM_CREATED/DELETED 개별 이벤트는 사용하지 않고, ROOMS_UPDATED만 사용해 단순화\nsyncManager.addEventListener('ROOM_DELETED',roomCode=>{this.publicRooms.delete(roomCode);this.rooms.delete(roomCode);this.hostSessions.delete(roomCode);this.saveRoomsToStorage();});}startCleanupTimer(){// 명시적 삭제 외에는 자동 삭제하지 않음\nthis.cleanupInterval=null;}cleanupInactiveRooms(){}createRoom(subject,isPublic,hostId){const roomCode=this.generateRoomCode();const now=Date.now();const room={id:\"room_\".concat(now),code:roomCode,subject,isPublic,hostId,players:[],questions:[],currentQuestionIndex:0,gameState:'waiting',eliminationMode:false,eliminationThreshold:3,autoMode:true,answerRevealTime:5};this.rooms.set(roomCode,room);// debug: console.debug('createRoom:', { roomCode, subject, isPublic })\nif(isPublic){const publicRoom={id:room.id,code:roomCode,subject,isPublic:true,playerCount:0,hostActive:true,lastHostActivity:now,createdAt:now};this.publicRooms.set(roomCode,publicRoom);this.hostSessions.set(roomCode,{sessionId:hostId,lastActivity:now});// 저장만 수행(표시는 참여하기 탭이 localStorage에서 직접 로드)\nthis.saveRoomsToStorage();// 즉시 브로드캐스트하여 타 탭이 빠르게 감지\nsyncManager.broadcast('GAME_DATA_UPDATE',{room,players:[],questions:room.questions,gameState:'waiting',currentQuestionIndex:0});// debug: console.debug('public room stored:', publicRoom.code)\n}// debug: console.debug('room created:', roomCode)\nreturn room;}deleteRoom(roomCode){// 항상 삭제 시도하여 흔적 제거\nthis.publicRooms.delete(roomCode);this.rooms.delete(roomCode);this.hostSessions.delete(roomCode);this.saveRoomsToStorage();// 목록 동기화는 localStorage 기반 주기 로드로 처리(추가 브로드캐스트 불필요)\nsyncManager.broadcast('ROOM_DELETED',roomCode);// debug: console.debug('room deleted:', roomCode)\n}updateHostActivity(roomCode,sessionId){const room=this.publicRooms.get(roomCode);if(room){room.hostActive=true;room.lastHostActivity=Date.now();this.hostSessions.set(roomCode,{sessionId,lastActivity:Date.now()});this.saveRoomsToStorage();// 예정된 삭제 타이머가 있으면 취소\nconst t=this.deletionTimers.get(roomCode);if(t){clearTimeout(t);this.deletionTimers.delete(roomCode);}}}markHostInactive(roomCode){// 호스트 비활성: 10초 동안 활동 없으면 방 삭제\nconst room=this.publicRooms.get(roomCode);if(!room)return;room.hostActive=false;this.saveRoomsToStorage();if(this.deletionTimers.has(roomCode))return;const timer=setTimeout(()=>{const r=this.publicRooms.get(roomCode);if(!r)return;const now=Date.now();const inactiveForMs=now-(r.lastHostActivity||r.createdAt);if(!r.hostActive&&inactiveForMs>=10000){this.deleteRoom(roomCode);}this.deletionTimers.delete(roomCode);},10000);this.deletionTimers.set(roomCode,timer);}joinRoom(roomCode,player){let room=this.rooms.get(roomCode);try{console.info('[JOIN_TRACE] RM.enter',{at:new Date().toISOString(),roomCode,memoryHas:!!room,publicHas:this.publicRooms.has(roomCode)});}catch(_unused){}// 방이 메모리에 없으면 공개방 목록에서 찾아서 생성\nif(!room){let publicRoom=this.publicRooms.get(roomCode);// 스토리지 최신화 후 한 번 더 탐색 (탭 간 지연 보정)\nif(!publicRoom){try{const saved=localStorage.getItem('publicRooms');if(saved){const list=JSON.parse(saved);const now=Date.now();const filtered=list.filter(r=>now-(r.lastHostActivity||r.createdAt)<10000);this.publicRooms.clear();filtered.forEach(r=>this.publicRooms.set(r.code,r));publicRoom=this.publicRooms.get(roomCode);}}catch(_unused2){}}if(publicRoom){room={id:publicRoom.id,code:roomCode,subject:publicRoom.subject,isPublic:publicRoom.isPublic,hostId:'temp_host',players:[],questions:[],currentQuestionIndex:0,gameState:'waiting',eliminationMode:false,eliminationThreshold:3,autoMode:true,answerRevealTime:5};this.rooms.set(roomCode,room);try{console.info('[JOIN_TRACE] RM.stubCreated',{roomCode});}catch(_unused3){}}}if(!room){try{console.warn('[JOIN_TRACE] RM.noRoom',{roomCode});}catch(_unused4){}return null;}const already=room.players.find(p=>p.id===player.id);if(!already){room.players.push(player);const publicRoom=this.publicRooms.get(roomCode);if(publicRoom){publicRoom.playerCount=room.players.length;this.saveRoomsToStorage();}syncManager.addPlayer(player);}// 항상 최신 상태 브로드캐스트\nsyncManager.updateGameData({room,players:room.players});try{console.info('[JOIN_TRACE] RM.success',{roomCode,players:room.players.length});}catch(_unused5){}return room;}getRoom(roomCode){return this.rooms.get(roomCode)||null;}getPublicRooms(){// 항상 스토리지 최신화(탭 간 동기화 보정)\ntry{const saved=localStorage.getItem('publicRooms');if(saved){const list=JSON.parse(saved);const now=Date.now();const filtered=list.filter(r=>now-(r.lastHostActivity||r.createdAt)<10000);this.publicRooms.clear();filtered.forEach(r=>this.publicRooms.set(r.code,r));}}catch(_unused6){}return Array.from(this.publicRooms.values());}generateRoomCode(){const chars='ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';let result='';for(let i=0;i<4;i++){result+=chars.charAt(Math.floor(Math.random()*chars.length));}return result;}destroy(){if(this.cleanupInterval){clearInterval(this.cleanupInterval);this.cleanupInterval=null;}console.log('🏠 RoomManager 종료됨');}}// 싱글톤 인스턴스\nexport const roomManager=new RoomManager();export default roomManager;","map":{"version":3,"names":["syncManager","RoomManager","constructor","rooms","Map","publicRooms","hostSessions","cleanupInterval","deletionTimers","loadRoomsFromStorage","startCleanupTimer","setupSyncListeners","savedRooms","localStorage","getItem","roomData","JSON","parse","now","Date","filtered","filter","r","lastHostActivity","createdAt","forEach","room","set","code","length","saveRoomsToStorage","e","console","error","roomArray","Array","from","values","setItem","stringify","addEventListener","data","updateHostActivity","roomCode","sessionId","delete","cleanupInactiveRooms","createRoom","subject","isPublic","hostId","generateRoomCode","id","concat","players","questions","currentQuestionIndex","gameState","eliminationMode","eliminationThreshold","autoMode","answerRevealTime","publicRoom","playerCount","hostActive","lastActivity","broadcast","deleteRoom","get","t","clearTimeout","markHostInactive","has","timer","setTimeout","inactiveForMs","joinRoom","player","info","at","toISOString","memoryHas","publicHas","_unused","saved","list","clear","_unused2","_unused3","warn","_unused4","already","find","p","push","addPlayer","updateGameData","_unused5","getRoom","getPublicRooms","_unused6","chars","result","i","charAt","Math","floor","random","destroy","clearInterval","log","roomManager"],"sources":["C:/Users/9204r/.cursor/avatar/src/services/RoomManager.ts"],"sourcesContent":["/**\n * 방 생명주기 관리자\n * 방 생성, 삭제, 자동 정리를 담당\n */\n\nimport { Room, Player } from '../types/game';\nimport syncManager from './SyncManager';\n// 단순화를 위해 공개방 목록 동기화는 localStorage 기반으로만 처리합니다.\n\nexport interface PublicRoom {\n  id: string;\n  code: string;\n  subject: string;\n  isPublic: boolean;\n  playerCount: number;\n  hostActive: boolean;\n  lastHostActivity: number;\n  createdAt: number;\n}\n\nclass RoomManager {\n  private rooms: Map<string, Room> = new Map();\n  private publicRooms: Map<string, PublicRoom> = new Map();\n  private hostSessions: Map<string, { sessionId: string; lastActivity: number }> = new Map();\n  private cleanupInterval: NodeJS.Timeout | null = null;\n  private deletionTimers: Map<string, NodeJS.Timeout> = new Map();\n\n  constructor() {\n    this.loadRoomsFromStorage();\n    this.startCleanupTimer();\n    this.setupSyncListeners();\n    \n    // debug: console.debug('RoomManager init')\n  }\n\n  private loadRoomsFromStorage() {\n    try {\n      const savedRooms = localStorage.getItem('publicRooms');\n      if (savedRooms) {\n        const roomData = JSON.parse(savedRooms) as PublicRoom[];\n        // 찌꺼기 정리: 마지막 활동 이후 10초 초과이면서 hostActive=false 인 방은 제거\n        const now = Date.now();\n        const filtered = roomData.filter(r => (now - (r.lastHostActivity || r.createdAt)) < 10000);\n        filtered.forEach((room: PublicRoom) => {\n          this.publicRooms.set(room.code, room);\n        });\n        if (filtered.length !== roomData.length) {\n          this.saveRoomsToStorage();\n        }\n      }\n    } catch (e) {\n      console.error('방 데이터 로드 실패:', e);\n    }\n  }\n\n  private saveRoomsToStorage() {\n    try {\n      const roomArray = Array.from(this.publicRooms.values());\n      localStorage.setItem('publicRooms', JSON.stringify(roomArray));\n      // debug: console.debug('publicRooms saved:', roomArray.length)\n    } catch (e) {\n      console.error('방 데이터 저장 실패:', e);\n    }\n  }\n\n  private setupSyncListeners() {\n    // BroadcastChannel 기반 동기화 제거로 단순화\n\n    syncManager.addEventListener('HOST_ACTIVITY', (data: { roomCode: string; sessionId: string }) => {\n      this.updateHostActivity(data.roomCode, data.sessionId);\n    });\n\n    // ROOM_CREATED/DELETED 개별 이벤트는 사용하지 않고, ROOMS_UPDATED만 사용해 단순화\n\n    syncManager.addEventListener('ROOM_DELETED', (roomCode: string) => {\n      this.publicRooms.delete(roomCode);\n      this.rooms.delete(roomCode);\n      this.hostSessions.delete(roomCode);\n      this.saveRoomsToStorage();\n    });\n  }\n\n  private startCleanupTimer() {\n    // 명시적 삭제 외에는 자동 삭제하지 않음\n    this.cleanupInterval = null;\n  }\n\n  private cleanupInactiveRooms() {}\n\n  public createRoom(subject: string, isPublic: boolean, hostId: string): Room {\n    const roomCode = this.generateRoomCode();\n    const now = Date.now();\n    \n    const room: Room = {\n      id: `room_${now}`,\n      code: roomCode,\n      subject,\n      isPublic,\n      hostId,\n      players: [],\n      questions: [],\n      currentQuestionIndex: 0,\n      gameState: 'waiting',\n      eliminationMode: false,\n      eliminationThreshold: 3,\n      autoMode: true,\n      answerRevealTime: 5\n    };\n\n    this.rooms.set(roomCode, room);\n    // debug: console.debug('createRoom:', { roomCode, subject, isPublic })\n\n    if (isPublic) {\n      const publicRoom: PublicRoom = {\n        id: room.id,\n        code: roomCode,\n        subject,\n        isPublic: true,\n        playerCount: 0,\n        hostActive: true,\n        lastHostActivity: now,\n        createdAt: now\n      };\n\n      this.publicRooms.set(roomCode, publicRoom);\n      this.hostSessions.set(roomCode, { sessionId: hostId, lastActivity: now });\n      \n      // 저장만 수행(표시는 참여하기 탭이 localStorage에서 직접 로드)\n      this.saveRoomsToStorage();\n      // 즉시 브로드캐스트하여 타 탭이 빠르게 감지\n      syncManager.broadcast('GAME_DATA_UPDATE', { room, players: [], questions: room.questions, gameState: 'waiting', currentQuestionIndex: 0 });\n      // debug: console.debug('public room stored:', publicRoom.code)\n    }\n\n    // debug: console.debug('room created:', roomCode)\n    return room;\n  }\n\n  public deleteRoom(roomCode: string) {\n    // 항상 삭제 시도하여 흔적 제거\n    this.publicRooms.delete(roomCode);\n    this.rooms.delete(roomCode);\n    this.hostSessions.delete(roomCode);\n    this.saveRoomsToStorage();\n    // 목록 동기화는 localStorage 기반 주기 로드로 처리(추가 브로드캐스트 불필요)\n    syncManager.broadcast('ROOM_DELETED', roomCode);\n    // debug: console.debug('room deleted:', roomCode)\n  }\n\n  public updateHostActivity(roomCode: string, sessionId: string) {\n    const room = this.publicRooms.get(roomCode);\n    if (room) {\n      room.hostActive = true;\n      room.lastHostActivity = Date.now();\n      \n      this.hostSessions.set(roomCode, { sessionId, lastActivity: Date.now() });\n      this.saveRoomsToStorage();\n      // 예정된 삭제 타이머가 있으면 취소\n      const t = this.deletionTimers.get(roomCode);\n      if (t) {\n        clearTimeout(t);\n        this.deletionTimers.delete(roomCode);\n      }\n    }\n  }\n\n  public markHostInactive(roomCode: string) {\n    // 호스트 비활성: 10초 동안 활동 없으면 방 삭제\n    const room = this.publicRooms.get(roomCode);\n    if (!room) return;\n    room.hostActive = false;\n    this.saveRoomsToStorage();\n    if (this.deletionTimers.has(roomCode)) return;\n    const timer = setTimeout(() => {\n      const r = this.publicRooms.get(roomCode);\n      if (!r) return;\n      const now = Date.now();\n      const inactiveForMs = now - (r.lastHostActivity || r.createdAt);\n      if (!r.hostActive && inactiveForMs >= 10000) {\n        this.deleteRoom(roomCode);\n      }\n      this.deletionTimers.delete(roomCode);\n    }, 10000);\n    this.deletionTimers.set(roomCode, timer);\n  }\n\n  public joinRoom(roomCode: string, player: Player): Room | null {\n    let room = this.rooms.get(roomCode);\n    try {\n      console.info('[JOIN_TRACE] RM.enter', {\n        at: new Date().toISOString(),\n        roomCode,\n        memoryHas: !!room,\n        publicHas: this.publicRooms.has(roomCode)\n      });\n    } catch {}\n    \n    // 방이 메모리에 없으면 공개방 목록에서 찾아서 생성\n    if (!room) {\n      let publicRoom = this.publicRooms.get(roomCode);\n      // 스토리지 최신화 후 한 번 더 탐색 (탭 간 지연 보정)\n      if (!publicRoom) {\n        try {\n          const saved = localStorage.getItem('publicRooms');\n          if (saved) {\n            const list = JSON.parse(saved) as PublicRoom[];\n            const now = Date.now();\n            const filtered = list.filter(r => (now - (r.lastHostActivity || r.createdAt)) < 10000);\n            this.publicRooms.clear();\n            filtered.forEach(r => this.publicRooms.set(r.code, r));\n            publicRoom = this.publicRooms.get(roomCode);\n          }\n        } catch {}\n      }\n      if (publicRoom) {\n        room = {\n          id: publicRoom.id,\n          code: roomCode,\n          subject: publicRoom.subject,\n          isPublic: publicRoom.isPublic,\n          hostId: 'temp_host',\n          players: [],\n          questions: [],\n          currentQuestionIndex: 0,\n          gameState: 'waiting',\n          eliminationMode: false,\n          eliminationThreshold: 3,\n          autoMode: true,\n          answerRevealTime: 5\n        };\n        this.rooms.set(roomCode, room);\n        try { console.info('[JOIN_TRACE] RM.stubCreated', { roomCode }); } catch {}\n      }\n    }\n\n    if (!room) {\n      try { console.warn('[JOIN_TRACE] RM.noRoom', { roomCode }); } catch {}\n      return null;\n    }\n\n    const already = room.players.find(p => p.id === player.id);\n    if (!already) {\n      room.players.push(player);\n      const publicRoom = this.publicRooms.get(roomCode);\n      if (publicRoom) {\n        publicRoom.playerCount = room.players.length;\n      this.saveRoomsToStorage();\n      }\n      syncManager.addPlayer(player);\n    }\n    // 항상 최신 상태 브로드캐스트\n    syncManager.updateGameData({ room, players: room.players });\n    try { console.info('[JOIN_TRACE] RM.success', { roomCode, players: room.players.length }); } catch {}\n    return room;\n  }\n\n  public getRoom(roomCode: string): Room | null {\n    return this.rooms.get(roomCode) || null;\n  }\n\n  public getPublicRooms(): PublicRoom[] {\n    // 항상 스토리지 최신화(탭 간 동기화 보정)\n    try {\n      const saved = localStorage.getItem('publicRooms');\n      if (saved) {\n        const list = JSON.parse(saved) as PublicRoom[];\n        const now = Date.now();\n        const filtered = list.filter(r => (now - (r.lastHostActivity || r.createdAt)) < 10000);\n        this.publicRooms.clear();\n        filtered.forEach(r => this.publicRooms.set(r.code, r));\n      }\n    } catch {}\n    return Array.from(this.publicRooms.values());\n  }\n\n  private generateRoomCode(): string {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    let result = '';\n    for (let i = 0; i < 4; i++) {\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n  }\n\n  public destroy() {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n      this.cleanupInterval = null;\n    }\n    console.log('🏠 RoomManager 종료됨');\n  }\n}\n\n// 싱글톤 인스턴스\nexport const roomManager = new RoomManager();\nexport default roomManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}