{"ast":null,"code":"import _objectSpread from\"C:/Users/9204r/.cursor/avatar/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/**\n * 새로운 모듈 기반 게임 컨텍스트\n * SyncManager, RoomManager, EventBus를 활용한 독립적인 상태 관리\n */import React,{createContext,useContext,useEffect,useState,useRef}from'react';import syncManager from'../services/SyncManager';import roomManager from'../services/RoomManager';import eventBus from'../services/EventBus';import{jsx as _jsx}from\"react/jsx-runtime\";const GameContext=/*#__PURE__*/createContext(null);const initialGameSettings={timeLimit:5,answerRevealTime:5,eliminationMode:false,eliminationThreshold:3,autoMode:true};const initialState={room:null,players:[],questions:[],gameState:'waiting',currentQuestionIndex:0,gameSettings:initialGameSettings,hasStarted:false,phaseStartedAt:null,phaseDuration:null,paused:false,isLoading:true,error:null};export function NewGameProvider(_ref){var _state$gameSettings;let{children}=_ref;const[state,setState]=useState(initialState);const autoTickRef=useRef(null);const lastAutoKeyRef=useRef(null);const autoTimerRef=useRef(null);useEffect(()=>{// SyncManager에서 초기 데이터 로드\nconst gameData=syncManager.getGameData();setState(prev=>{var _phaseStartedAt,_phaseDuration,_paused;return _objectSpread(_objectSpread({},prev),{},{room:gameData.room,players:gameData.players,questions:gameData.questions,gameState:gameData.gameState,currentQuestionIndex:gameData.currentQuestionIndex,gameSettings:gameData.gameSettings||prev.gameSettings,hasStarted:typeof gameData.hasStarted==='boolean'?gameData.hasStarted:false,phaseStartedAt:(_phaseStartedAt=gameData.phaseStartedAt)!==null&&_phaseStartedAt!==void 0?_phaseStartedAt:null,phaseDuration:(_phaseDuration=gameData.phaseDuration)!==null&&_phaseDuration!==void 0?_phaseDuration:null,paused:(_paused=gameData.paused)!==null&&_paused!==void 0?_paused:false,isLoading:false});});// 이벤트 리스너 등록\nconst unsubscribers=[eventBus.on('PLAYER_JOIN',handlePlayerJoin),eventBus.on('PLAYER_LEAVE',handlePlayerLeave)];// SyncManager 리스너는 해제 함수가 없으므로 별도 관리\nconst syncListeners=[];const addSync=(type,cb)=>{syncManager.addEventListener(type,cb);syncListeners.push({type,cb});};addSync('GAME_DATA_UPDATE',handleSyncDataUpdate);addSync('PLAYER_JOIN',handleSyncPlayerJoin);addSync('PLAYER_LEAVE',handleSyncPlayerLeave);addSync('GAME_STATE_CHANGE',handleSyncGameStateChange);console.log('🎮 NewGameContext 초기화됨');return()=>{unsubscribers.forEach(unsub=>unsub());// SyncManager 리스너 해제\nsyncListeners.forEach(_ref2=>{let{type,cb}=_ref2;try{var _removeEventListener,_ref3;(_removeEventListener=(_ref3=syncManager).removeEventListener)===null||_removeEventListener===void 0?void 0:_removeEventListener.call(_ref3,type,cb);}catch(_unused){}});console.log('🎮 NewGameContext 정리됨');};},[]);// 단일 간단 타임아웃 체크 루프: 타이머가 끝나면 다음 단계로 전환\nuseEffect(()=>{if(autoTickRef.current){try{clearInterval(autoTickRef.current);}catch(_unused2){}autoTickRef.current=null;}autoTickRef.current=setInterval(()=>{var _s$gameSettings;const s=state;if(!(s!==null&&s!==void 0&&(_s$gameSettings=s.gameSettings)!==null&&_s$gameSettings!==void 0&&_s$gameSettings.autoMode))return;if(s.paused)return;if(!(s.gameState==='playing'||s.gameState==='showingAnswer'))return;if(!s.phaseStartedAt||!s.phaseDuration)return;const expired=(Date.now()-s.phaseStartedAt)/1000>=s.phaseDuration;if(!expired)return;const key=\"\".concat(s.gameState,\":\").concat(s.currentQuestionIndex);if(lastAutoKeyRef.current===key)return;lastAutoKeyRef.current=key;if(s.gameState==='playing')actions.showAnswer();else actions.nextQuestion();},300);return()=>{if(autoTickRef.current){try{clearInterval(autoTickRef.current);}catch(_unused3){}autoTickRef.current=null;}};},[(_state$gameSettings=state.gameSettings)===null||_state$gameSettings===void 0?void 0:_state$gameSettings.autoMode,state.gameState,state.phaseStartedAt,state.phaseDuration,state.paused,state.currentQuestionIndex]);const handleGameDataUpdate=data=>{console.log('🔄 게임 데이터 업데이트:',data);setState(prev=>_objectSpread(_objectSpread({},prev),data));};const handlePlayerJoin=player=>{setState(prev=>_objectSpread(_objectSpread({},prev),{},{players:prev.players.find(p=>p.id===player.id)?prev.players:[...prev.players,player]}));};const handlePlayerLeave=playerId=>{setState(prev=>_objectSpread(_objectSpread({},prev),{},{players:prev.players.filter(p=>p.id!==playerId)}));};const handleGameStateChange=data=>{setState(prev=>_objectSpread(_objectSpread({},prev),data));};const handleRoomCreated=room=>{console.log('🏠 방 생성됨:',room);};const handleRoomDeleted=roomCode=>{var _state$room;console.log('🗑️ 방 삭제됨:',roomCode);if(((_state$room=state.room)===null||_state$room===void 0?void 0:_state$room.code)===roomCode){setState(prev=>_objectSpread(_objectSpread({},prev),{},{room:null,players:[]}));}};// Sync 이벤트 핸들러들\nconst handleSyncDataUpdate=data=>{// 방어: 질문이 없는데 finished로 들어오는 등 비정상 상태 정규화\nsetState(prev=>{const next=_objectSpread(_objectSpread({},prev),data);if(!next.questions||next.questions.length===0){next.gameState='waiting';next.currentQuestionIndex=0;}else if(typeof next.currentQuestionIndex!=='number'||next.currentQuestionIndex<0||next.currentQuestionIndex>=next.questions.length){next.currentQuestionIndex=0;if(next.gameState==='finished')next.gameState='waiting';}if(!next.gameSettings)next.gameSettings=prev.gameSettings;if(typeof next.hasStarted!=='boolean')next.hasStarted=prev.hasStarted;return next;});};const handleSyncPlayerJoin=player=>{setState(prev=>_objectSpread(_objectSpread({},prev),{},{players:prev.players.find(p=>p.id===player.id)?prev.players:[...prev.players,player]}));};const handleSyncPlayerLeave=playerId=>{setState(prev=>_objectSpread(_objectSpread({},prev),{},{players:prev.players.filter(p=>p.id!==playerId)}));};const handleSyncGameStateChange=data=>{setState(prev=>_objectSpread(_objectSpread({},prev),data));};const actions={setAnswerDraft:(playerId,answer)=>{const updatedPlayers=state.players.map(player=>player.id===playerId?_objectSpread(_objectSpread({},player),{},{currentAnswer:String(answer)}):player);setState(prev=>_objectSpread(_objectSpread({},prev),{},{players:updatedPlayers}));syncManager.updateGameData({players:updatedPlayers});},createRoom:(subject,isPublic)=>{try{const hostId='host_'+Date.now();const room=roomManager.createRoom(subject,isPublic,hostId);// 기본 예시 문제 3개(OX/객관식/주관식)\nconst now=Date.now();const defaultQuestions=[{id:'q_'+now+'_ox',type:'ox',question:'태양은 서쪽에서 뜬다.',score:10,timeLimit:10,options:['O','X'],correctAnswer:'X'},{id:'q_'+now+'_mc',type:'multiple',question:'대한민국의 수도는?',score:20,timeLimit:15,options:['서울','부산','대구','인천'],correctAnswer:0},{id:'q_'+now+'_short',type:'short',question:'3 x 7 = ?',score:30,timeLimit:20,correctAnswer:'21'}];setState(prev=>_objectSpread(_objectSpread({},prev),{},{room,players:[],questions:defaultQuestions,gameState:'waiting',currentQuestionIndex:0,hasStarted:false,gameSettings:prev.gameSettings}));syncManager.updateGameData({room,players:[],questions:defaultQuestions,gameState:'waiting',currentQuestionIndex:0,hasStarted:false,gameSettings:state.gameSettings});eventBus.emit('ROOM_CREATED',room);console.log('🏠 방 생성 완료:',room.code);}catch(error){console.error('방 생성 실패:',error);setState(prev=>_objectSpread(_objectSpread({},prev),{},{error:'방 생성에 실패했습니다.'}));}},joinRoom:(roomCode,player)=>{try{// 상세 로그: 참여 시도 전 상태\ntry{const before={at:new Date().toISOString(),roomCode,localRoomExists:!!roomManager.getRoom(roomCode),publicRooms:roomManager.getPublicRooms().map(r=>r.code),playersCount:state.players.length};console.info('[JOIN_TRACE] before joinRoom',before);}catch(_unused4){}const room=roomManager.joinRoom(roomCode,player);if(room){setState(prev=>_objectSpread(_objectSpread({},prev),{},{room,players:room.players,error:null}));eventBus.emit('PLAYER_JOIN',player);console.info('[JOIN_TRACE] success',{roomCode,playersCount:room.players.length});return true;}else{setState(prev=>_objectSpread(_objectSpread({},prev),{},{error:'방을 찾을 수 없습니다.'}));try{const after={at:new Date().toISOString(),roomCode,localRoomExists:!!roomManager.getRoom(roomCode),publicRooms:roomManager.getPublicRooms().map(r=>r.code)};console.warn('[JOIN_TRACE] fail',after);}catch(_unused5){}return false;}}catch(error){console.error('방 참여 실패:',error);setState(prev=>_objectSpread(_objectSpread({},prev),{},{error:'방 참여에 실패했습니다.'}));return false;}},addQuestion:question=>{setState(prev=>{const normalizedGameState=prev.gameState==='finished'?'waiting':prev.gameState;const normalizedIndex=prev.gameState==='finished'?0:prev.currentQuestionIndex;const newQuestions=[...prev.questions,question];// 동기화는 prev 기준으로 정확히 반영\nsyncManager.updateGameData({questions:newQuestions,gameState:normalizedGameState,currentQuestionIndex:normalizedIndex,players:prev.players,room:prev.room});eventBus.emit('QUESTION_ADDED',question);return _objectSpread(_objectSpread({},prev),{},{questions:newQuestions,gameState:normalizedGameState,currentQuestionIndex:normalizedIndex});});},addQuestionsBulk:questionsToAdd=>{if(!questionsToAdd||questionsToAdd.length===0)return;setState(prev=>{const normalizedGameState=prev.gameState==='finished'?'waiting':prev.gameState;const normalizedIndex=prev.gameState==='finished'?0:prev.currentQuestionIndex;const newQuestions=[...prev.questions,...questionsToAdd];syncManager.updateGameData({questions:newQuestions,gameState:normalizedGameState,currentQuestionIndex:normalizedIndex,players:prev.players,room:prev.room});eventBus.emit('QUESTIONS_ADDED',{count:questionsToAdd.length});return _objectSpread(_objectSpread({},prev),{},{questions:newQuestions,gameState:normalizedGameState,currentQuestionIndex:normalizedIndex});});},deleteQuestion:questionId=>{const newQuestions=state.questions.filter(q=>q.id!==questionId);setState(prev=>_objectSpread(_objectSpread({},prev),{},{questions:newQuestions}));syncManager.updateGameData({questions:newQuestions});eventBus.emit('QUESTION_DELETED',questionId);},reorderQuestions:questions=>{setState(prev=>_objectSpread(_objectSpread({},prev),{},{questions}));syncManager.updateGameData({questions});eventBus.emit('QUESTIONS_REORDERED',questions);},startGame:()=>{var _state$questions$star;if(state.questions.length===0){setState(prev=>_objectSpread(_objectSpread({},prev),{},{error:'문제를 먼저 추가해주세요.'}));return;}const isFirstStart=!state.hasStarted;let startIndex=0;if(isFirstStart){startIndex=0;}else{const nextIndex=state.currentQuestionIndex+1;if(nextIndex>=state.questions.length){// 진행할 다음 문제가 없으면 대기 유지\nreturn;}startIndex=nextIndex;}const resetPlayers=state.players.map(player=>_objectSpread(_objectSpread({},player),{},{hasSubmitted:false,currentAnswer:undefined}));const nowMs=Date.now();const newState={gameState:'playing',currentQuestionIndex:startIndex,hasStarted:true,players:resetPlayers,phaseStartedAt:nowMs,phaseDuration:state.gameSettings.timeLimit,paused:false};console.info('[AUTO_FLOW] startGame',newState);setState(prev=>_objectSpread(_objectSpread({},prev),newState));syncManager.updateGameData({gameState:'playing',currentQuestionIndex:startIndex,questions:state.questions,players:resetPlayers,room:state.room,hasStarted:true,gameSettings:state.gameSettings,phaseStartedAt:newState.phaseStartedAt,phaseDuration:newState.phaseDuration,paused:false,activeQuestionId:((_state$questions$star=state.questions[startIndex])===null||_state$questions$star===void 0?void 0:_state$questions$star.id)||null,lastGradedQuestionId:null});// grade lock 초기화\ntry{if(state.room)localStorage.removeItem(\"grade_lock_\".concat(state.room.code));}catch(_unused6){}eventBus.emit('GAME_STARTED',newState);if(state.room){roomManager.updateHostActivity(state.room.code,'current_session');}},pauseGame:()=>{const newState={gameState:'paused',paused:true};setState(prev=>_objectSpread(_objectSpread({},prev),newState));syncManager.updateGameState(newState);eventBus.emit('GAME_PAUSED',newState);},resumeGame:()=>{const newState={gameState:'playing',paused:false};setState(prev=>_objectSpread(_objectSpread({},prev),newState));syncManager.updateGameState(newState);eventBus.emit('GAME_RESUMED',newState);},nextQuestion:()=>{var _state$questions$next;console.info('[AUTO_FLOW] nextQuestion called',{current:state.currentQuestionIndex,total:state.questions.length});const nextIndex=state.currentQuestionIndex+1;if(nextIndex>=state.questions.length){// 자동 종료하지 않고 대기 상태로 전환. 인덱스는 마지막 문제에서 유지\nconst newState={gameState:'waiting'};console.info('[AUTO_FLOW] no more questions → waiting',{lastIndex:state.currentQuestionIndex});setState(prev=>_objectSpread(_objectSpread(_objectSpread({},prev),newState),{},{currentQuestionIndex:Math.max(0,prev.currentQuestionIndex)}));syncManager.updateGameData({gameState:'waiting',currentQuestionIndex:state.currentQuestionIndex,hasStarted:true});return;}const resetPlayers=state.players.map(player=>_objectSpread(_objectSpread({},player),{},{hasSubmitted:false,currentAnswer:undefined}));const nowMs=Date.now();const newState={gameState:'playing',currentQuestionIndex:nextIndex,players:resetPlayers,phaseStartedAt:nowMs,phaseDuration:state.gameSettings.timeLimit,paused:false};console.info('[AUTO_FLOW] move to next playing',newState);setState(prev=>_objectSpread(_objectSpread({},prev),newState));syncManager.updateGameData({gameState:'playing',currentQuestionIndex:nextIndex,players:resetPlayers,questions:state.questions,room:state.room,phaseStartedAt:newState.phaseStartedAt,phaseDuration:newState.phaseDuration,paused:false,activeQuestionId:((_state$questions$next=state.questions[nextIndex])===null||_state$questions$next===void 0?void 0:_state$questions$next.id)||null,lastGradedQuestionId:null});// grade lock 초기화\ntry{if(state.room)localStorage.removeItem(\"grade_lock_\".concat(state.room.code));}catch(_unused7){}eventBus.emit('NEXT_QUESTION',newState);},showAnswer:()=>{const newState={gameState:'showingAnswer'};console.info('[AUTO_FLOW] showAnswer called',{index:state.currentQuestionIndex});// 최신 데이터로 채점(브로드캐스트 지연 보정)\nconst latest=syncManager.getGameData();const q=latest.questions.find(qq=>qq.id===latest.activeQuestionId)||latest.questions[latest.currentQuestionIndex];if(q){console.debug('[AUTO_FLOW] grading begin',{qid:q.id,score:q.score});// 로컬 grade lock (탭 간 중복 방지)\ntry{const lockKey=state.room?\"grade_lock_\".concat(state.room.code):null;if(lockKey){const locked=localStorage.getItem(lockKey);if(locked===q.id){console.warn('[AUTO_FLOW] grade locked by other tab',{qid:q.id});}else{localStorage.setItem(lockKey,q.id);}}}catch(_unused8){}const gradedPlayers=latest.players.map(p=>{var _p$currentAnswer;const answerStr=String((_p$currentAnswer=p.currentAnswer)!==null&&_p$currentAnswer!==void 0?_p$currentAnswer:'').trim();let isCorrect=false;if(q.type==='multiple'){isCorrect=String(q.correctAnswer)===answerStr;}else{isCorrect=String(q.correctAnswer).toString().trim()===answerStr;}return isCorrect?_objectSpread(_objectSpread({},p),{},{score:p.score+q.score}):p;});setState(prev=>_objectSpread(_objectSpread({},prev),{},{players:gradedPlayers}));syncManager.updateGameData({players:gradedPlayers,lastGradedQuestionId:q.id});// 정오 결과를 즉시 브로드캐스트해 참여자 UI가 동일하게 반영\nsyncManager.broadcast('FINALIZE_ANSWERS',{questionId:q.id,players:gradedPlayers});console.debug('[AUTO_FLOW] grading done + broadcast',{qid:q.id});}const nowMs=Date.now();setState(prev=>_objectSpread(_objectSpread(_objectSpread({},prev),newState),{},{phaseStartedAt:nowMs,phaseDuration:state.gameSettings.answerRevealTime,paused:false}));syncManager.updateGameState(_objectSpread(_objectSpread({},newState),{},{phaseStartedAt:nowMs,phaseDuration:state.gameSettings.answerRevealTime,paused:false}));eventBus.emit('ANSWER_SHOWN',newState);},endGame:()=>{const newState={gameState:'finished'};setState(prev=>_objectSpread(_objectSpread({},prev),newState));syncManager.updateGameState(newState);eventBus.emit('GAME_ENDED',newState);},eliminatePlayer:playerId=>{const updatedPlayers=state.players.map(player=>player.id===playerId?_objectSpread(_objectSpread({},player),{},{isEliminated:true}):player);setState(prev=>_objectSpread(_objectSpread({},prev),{},{players:updatedPlayers}));syncManager.updateGameData({players:updatedPlayers});eventBus.emit('PLAYER_ELIMINATED',{playerId,players:updatedPlayers});},revivePlayer:playerId=>{const updatedPlayers=state.players.map(player=>player.id===playerId?_objectSpread(_objectSpread({},player),{},{isEliminated:false}):player);setState(prev=>_objectSpread(_objectSpread({},prev),{},{players:updatedPlayers}));syncManager.updateGameData({players:updatedPlayers});eventBus.emit('PLAYER_REVIVED',{playerId,players:updatedPlayers});},submitAnswer:(playerId,answer)=>{const updatedPlayers=state.players.map(player=>player.id===playerId?_objectSpread(_objectSpread({},player),{},{hasSubmitted:true,currentAnswer:String(answer)}):player);setState(prev=>_objectSpread(_objectSpread({},prev),{},{players:updatedPlayers}));syncManager.updateGameData({players:updatedPlayers});eventBus.emit('ANSWER_SUBMITTED',{playerId,answer,players:updatedPlayers});},gradeCurrentQuestion:()=>{},updateGameSettings:settings=>{const newSettings=_objectSpread(_objectSpread({},state.gameSettings),settings);setState(prev=>_objectSpread(_objectSpread({},prev),{},{gameSettings:newSettings}));// 설정은 전파/영구화 되어야 함\nsyncManager.updateGameData({gameSettings:newSettings});eventBus.emit('SETTINGS_UPDATED',newSettings);},resetGame:()=>{setState(initialState);syncManager.updateGameState({room:null,players:[],questions:[],gameState:'waiting',currentQuestionIndex:0});eventBus.emit('GAME_RESET');},updateHostActivity:roomCode=>{roomManager.updateHostActivity(roomCode,'current_session');syncManager.broadcast('HOST_ACTIVITY',{roomCode,sessionId:'current_session'});}};const value={state,actions};return/*#__PURE__*/_jsx(GameContext.Provider,{value:value,children:children});}export function useNewGameContext(){const context=useContext(GameContext);if(!context){throw new Error('useNewGameContext must be used within a NewGameProvider');}return context;}export default GameContext;","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useRef","syncManager","roomManager","eventBus","jsx","_jsx","GameContext","initialGameSettings","timeLimit","answerRevealTime","eliminationMode","eliminationThreshold","autoMode","initialState","room","players","questions","gameState","currentQuestionIndex","gameSettings","hasStarted","phaseStartedAt","phaseDuration","paused","isLoading","error","NewGameProvider","_ref","_state$gameSettings","children","state","setState","autoTickRef","lastAutoKeyRef","autoTimerRef","gameData","getGameData","prev","_phaseStartedAt","_phaseDuration","_paused","_objectSpread","unsubscribers","on","handlePlayerJoin","handlePlayerLeave","syncListeners","addSync","type","cb","addEventListener","push","handleSyncDataUpdate","handleSyncPlayerJoin","handleSyncPlayerLeave","handleSyncGameStateChange","console","log","forEach","unsub","_ref2","_removeEventListener","_ref3","removeEventListener","call","_unused","current","clearInterval","_unused2","setInterval","_s$gameSettings","s","expired","Date","now","key","concat","actions","showAnswer","nextQuestion","_unused3","handleGameDataUpdate","data","player","find","p","id","playerId","filter","handleGameStateChange","handleRoomCreated","handleRoomDeleted","roomCode","_state$room","code","next","length","setAnswerDraft","answer","updatedPlayers","map","currentAnswer","String","updateGameData","createRoom","subject","isPublic","hostId","defaultQuestions","question","score","options","correctAnswer","emit","joinRoom","before","at","toISOString","localRoomExists","getRoom","publicRooms","getPublicRooms","r","playersCount","info","_unused4","after","warn","_unused5","addQuestion","normalizedGameState","normalizedIndex","newQuestions","addQuestionsBulk","questionsToAdd","count","deleteQuestion","questionId","q","reorderQuestions","startGame","_state$questions$star","isFirstStart","startIndex","nextIndex","resetPlayers","hasSubmitted","undefined","nowMs","newState","activeQuestionId","lastGradedQuestionId","localStorage","removeItem","_unused6","updateHostActivity","pauseGame","updateGameState","resumeGame","_state$questions$next","total","lastIndex","Math","max","_unused7","index","latest","qq","debug","qid","lockKey","locked","getItem","setItem","_unused8","gradedPlayers","_p$currentAnswer","answerStr","trim","isCorrect","toString","broadcast","endGame","eliminatePlayer","isEliminated","revivePlayer","submitAnswer","gradeCurrentQuestion","updateGameSettings","settings","newSettings","resetGame","sessionId","value","Provider","useNewGameContext","context","Error"],"sources":["C:/Users/9204r/.cursor/avatar/src/contexts/NewGameContext.tsx"],"sourcesContent":["/**\n * 새로운 모듈 기반 게임 컨텍스트\n * SyncManager, RoomManager, EventBus를 활용한 독립적인 상태 관리\n */\n\nimport React, { createContext, useContext, useEffect, useState, ReactNode, useRef } from 'react';\nimport { Room, Player, Question, GameState, GameSettings } from '../types/game';\nimport syncManager from '../services/SyncManager';\nimport roomManager from '../services/RoomManager';\nimport eventBus from '../services/EventBus';\n\ninterface GameContextState {\n  room: Room | null;\n  players: Player[];\n  questions: Question[];\n  gameState: GameState;\n  currentQuestionIndex: number;\n  gameSettings: GameSettings;\n  hasStarted: boolean;\n  phaseStartedAt: number | null;\n  phaseDuration: number | null;\n  paused: boolean;\n  isLoading: boolean;\n  error: string | null;\n}\n\ninterface GameContextValue {\n  state: GameContextState;\n  actions: {\n    createRoom: (subject: string, isPublic: boolean) => void;\n    joinRoom: (roomCode: string, player: Player) => boolean;\n    addQuestion: (question: Question) => void;\n    addQuestionsBulk: (questions: Question[]) => void;\n    deleteQuestion: (questionId: string) => void;\n    reorderQuestions: (questions: Question[]) => void;\n    startGame: () => void;\n    pauseGame: () => void;\n    resumeGame: () => void;\n    nextQuestion: () => void;\n    showAnswer: () => void;\n    endGame: () => void;\n    eliminatePlayer: (playerId: string) => void;\n    revivePlayer: (playerId: string) => void;\n    setAnswerDraft: (playerId: string, answer: string | number) => void;\n    submitAnswer: (playerId: string, answer: string | number) => void;\n    gradeCurrentQuestion: () => void;\n    updateGameSettings: (settings: Partial<GameSettings>) => void;\n    resetGame: () => void;\n    updateHostActivity: (roomCode: string) => void;\n  };\n}\n\nconst GameContext = createContext<GameContextValue | null>(null);\n\nconst initialGameSettings: GameSettings = {\n  timeLimit: 5,\n  answerRevealTime: 5,\n  eliminationMode: false,\n  eliminationThreshold: 3,\n  autoMode: true\n};\n\nconst initialState: GameContextState = {\n  room: null,\n  players: [],\n  questions: [],\n  gameState: 'waiting',\n  currentQuestionIndex: 0,\n  gameSettings: initialGameSettings,\n  hasStarted: false,\n  phaseStartedAt: null,\n  phaseDuration: null,\n  paused: false,\n  isLoading: true,\n  error: null\n};\n\nexport function NewGameProvider({ children }: { children: ReactNode }) {\n  const [state, setState] = useState<GameContextState>(initialState);\n  const autoTickRef = useRef<any>(null);\n  const lastAutoKeyRef = useRef<string | null>(null);\n  const autoTimerRef = useRef<any>(null);\n\n  useEffect(() => {\n    // SyncManager에서 초기 데이터 로드\n    const gameData = syncManager.getGameData();\n    setState(prev => ({\n      ...prev,\n      room: gameData.room,\n      players: gameData.players,\n      questions: gameData.questions,\n      gameState: gameData.gameState,\n      currentQuestionIndex: gameData.currentQuestionIndex,\n      gameSettings: gameData.gameSettings || prev.gameSettings,\n      hasStarted: typeof (gameData as any).hasStarted === 'boolean' ? (gameData as any).hasStarted : false,\n      phaseStartedAt: (gameData as any).phaseStartedAt ?? null,\n      phaseDuration: (gameData as any).phaseDuration ?? null,\n      paused: (gameData as any).paused ?? false,\n      isLoading: false\n    }));\n\n    // 이벤트 리스너 등록\n    const unsubscribers: Array<() => void> = [\n      eventBus.on('PLAYER_JOIN', handlePlayerJoin),\n      eventBus.on('PLAYER_LEAVE', handlePlayerLeave),\n    ];\n\n    // SyncManager 리스너는 해제 함수가 없으므로 별도 관리\n    const syncListeners: Array<{type: string; cb: Function}> = [];\n    const addSync = (type: string, cb: Function) => {\n      syncManager.addEventListener(type, cb);\n      syncListeners.push({ type, cb });\n    };\n    addSync('GAME_DATA_UPDATE', handleSyncDataUpdate);\n    addSync('PLAYER_JOIN', handleSyncPlayerJoin);\n    addSync('PLAYER_LEAVE', handleSyncPlayerLeave);\n    addSync('GAME_STATE_CHANGE', handleSyncGameStateChange);\n\n    console.log('🎮 NewGameContext 초기화됨');\n\n    return () => {\n      unsubscribers.forEach(unsub => unsub());\n      // SyncManager 리스너 해제\n      syncListeners.forEach(({ type, cb }) => {\n        try {\n          (syncManager as any).removeEventListener?.(type, cb);\n        } catch {}\n      });\n      console.log('🎮 NewGameContext 정리됨');\n    };\n  }, []);\n\n  // 단일 간단 타임아웃 체크 루프: 타이머가 끝나면 다음 단계로 전환\n  useEffect(() => {\n    if (autoTickRef.current) {\n      try { clearInterval(autoTickRef.current); } catch {}\n      autoTickRef.current = null;\n    }\n    autoTickRef.current = setInterval(() => {\n      const s = state as any;\n      if (!s?.gameSettings?.autoMode) return;\n      if (s.paused) return;\n      if (!(s.gameState === 'playing' || s.gameState === 'showingAnswer')) return;\n      if (!s.phaseStartedAt || !s.phaseDuration) return;\n      const expired = (Date.now() - s.phaseStartedAt) / 1000 >= s.phaseDuration;\n      if (!expired) return;\n      const key = `${s.gameState}:${s.currentQuestionIndex}`;\n      if (lastAutoKeyRef.current === key) return;\n      lastAutoKeyRef.current = key;\n      if (s.gameState === 'playing') actions.showAnswer();\n      else actions.nextQuestion();\n    }, 300);\n    return () => {\n      if (autoTickRef.current) {\n        try { clearInterval(autoTickRef.current); } catch {}\n        autoTickRef.current = null;\n      }\n    };\n  }, [state.gameSettings?.autoMode, state.gameState, state.phaseStartedAt, state.phaseDuration, state.paused, state.currentQuestionIndex]);\n\n  const handleGameDataUpdate = (data: any) => {\n    console.log('🔄 게임 데이터 업데이트:', data);\n    setState(prev => ({ ...prev, ...data }));\n  };\n\n  const handlePlayerJoin = (player: Player) => {\n    setState(prev => ({\n      ...prev,\n      players: prev.players.find(p => p.id === player.id) \n        ? prev.players \n        : [...prev.players, player]\n    }));\n  };\n\n  const handlePlayerLeave = (playerId: string) => {\n    setState(prev => ({\n      ...prev,\n      players: prev.players.filter(p => p.id !== playerId)\n    }));\n  };\n\n  const handleGameStateChange = (data: any) => {\n    setState(prev => ({ ...prev, ...data }));\n  };\n\n  const handleRoomCreated = (room: any) => {\n    console.log('🏠 방 생성됨:', room);\n  };\n\n  const handleRoomDeleted = (roomCode: string) => {\n    console.log('🗑️ 방 삭제됨:', roomCode);\n    if (state.room?.code === roomCode) {\n      setState(prev => ({ ...prev, room: null, players: [] }));\n    }\n  };\n\n  // Sync 이벤트 핸들러들\n  const handleSyncDataUpdate = (data: any) => {\n    // 방어: 질문이 없는데 finished로 들어오는 등 비정상 상태 정규화\n    setState(prev => {\n      const next = { ...prev, ...data } as any;\n      if (!next.questions || next.questions.length === 0) {\n        next.gameState = 'waiting';\n        next.currentQuestionIndex = 0;\n      } else if (\n        typeof next.currentQuestionIndex !== 'number' ||\n        next.currentQuestionIndex < 0 ||\n        next.currentQuestionIndex >= next.questions.length\n      ) {\n        next.currentQuestionIndex = 0;\n        if (next.gameState === 'finished') next.gameState = 'waiting';\n      }\n      if (!next.gameSettings) next.gameSettings = prev.gameSettings;\n      if (typeof next.hasStarted !== 'boolean') next.hasStarted = prev.hasStarted;\n      return next;\n    });\n  };\n\n  const handleSyncPlayerJoin = (player: Player) => {\n    setState(prev => ({\n      ...prev,\n      players: prev.players.find(p => p.id === player.id) \n        ? prev.players \n        : [...prev.players, player]\n    }));\n  };\n\n  const handleSyncPlayerLeave = (playerId: string) => {\n    setState(prev => ({\n      ...prev,\n      players: prev.players.filter(p => p.id !== playerId)\n    }));\n  };\n\n  const handleSyncGameStateChange = (data: any) => {\n    setState(prev => ({ ...prev, ...data }));\n  };\n\n  const actions = {\n    setAnswerDraft: (playerId: string, answer: string | number) => {\n      const updatedPlayers = state.players.map(player =>\n        player.id === playerId \n          ? { ...player, currentAnswer: String(answer) }\n          : player\n      );\n      setState(prev => ({ ...prev, players: updatedPlayers }));\n      syncManager.updateGameData({ players: updatedPlayers });\n    },\n    createRoom: (subject: string, isPublic: boolean) => {\n      try {\n        const hostId = 'host_' + Date.now();\n        const room = roomManager.createRoom(subject, isPublic, hostId);\n        // 기본 예시 문제 3개(OX/객관식/주관식)\n        const now = Date.now();\n        const defaultQuestions: Question[] = [\n          {\n            id: 'q_' + now + '_ox',\n            type: 'ox',\n            question: '태양은 서쪽에서 뜬다.',\n            score: 10,\n            timeLimit: 10,\n            options: ['O', 'X'],\n            correctAnswer: 'X'\n          },\n          {\n            id: 'q_' + now + '_mc',\n            type: 'multiple',\n            question: '대한민국의 수도는?',\n            score: 20,\n            timeLimit: 15,\n            options: ['서울', '부산', '대구', '인천'],\n            correctAnswer: 0\n          },\n          {\n            id: 'q_' + now + '_short',\n            type: 'short',\n            question: '3 x 7 = ?',\n            score: 30,\n            timeLimit: 20,\n            correctAnswer: '21'\n          }\n        ];\n\n        setState(prev => ({ \n          ...prev, \n          room, \n          players: [], \n          questions: defaultQuestions,\n          gameState: 'waiting',\n          currentQuestionIndex: 0,\n          hasStarted: false,\n          gameSettings: prev.gameSettings\n        }));\n        syncManager.updateGameData({ \n          room, \n          players: [], \n          questions: defaultQuestions,\n          gameState: 'waiting',\n          currentQuestionIndex: 0,\n          hasStarted: false,\n          gameSettings: state.gameSettings\n        });\n        eventBus.emit('ROOM_CREATED', room);\n        \n        console.log('🏠 방 생성 완료:', room.code);\n      } catch (error) {\n        console.error('방 생성 실패:', error);\n        setState(prev => ({ ...prev, error: '방 생성에 실패했습니다.' }));\n      }\n    },\n\n    joinRoom: (roomCode: string, player: Player) => {\n      try {\n        // 상세 로그: 참여 시도 전 상태\n        try {\n          const before = {\n            at: new Date().toISOString(),\n            roomCode,\n            localRoomExists: !!roomManager.getRoom(roomCode),\n            publicRooms: roomManager.getPublicRooms().map(r => r.code),\n            playersCount: state.players.length\n          };\n          console.info('[JOIN_TRACE] before joinRoom', before);\n        } catch {}\n\n        const room = roomManager.joinRoom(roomCode, player);\n        \n        if (room) {\n          setState(prev => ({ \n            ...prev, \n            room, \n            players: room.players,\n            error: null \n          }));\n          \n          eventBus.emit('PLAYER_JOIN', player);\n          console.info('[JOIN_TRACE] success', { roomCode, playersCount: room.players.length });\n          return true;\n        } else {\n          setState(prev => ({ ...prev, error: '방을 찾을 수 없습니다.' }));\n          try {\n            const after = {\n              at: new Date().toISOString(),\n              roomCode,\n              localRoomExists: !!roomManager.getRoom(roomCode),\n              publicRooms: roomManager.getPublicRooms().map(r => r.code)\n            };\n            console.warn('[JOIN_TRACE] fail', after);\n          } catch {}\n          return false;\n        }\n      } catch (error) {\n        console.error('방 참여 실패:', error);\n        setState(prev => ({ ...prev, error: '방 참여에 실패했습니다.' }));\n        return false;\n      }\n    },\n\n    addQuestion: (question: Question) => {\n      setState(prev => {\n        const normalizedGameState = prev.gameState === 'finished' ? 'waiting' : prev.gameState;\n        const normalizedIndex = prev.gameState === 'finished' ? 0 : prev.currentQuestionIndex;\n        const newQuestions = [...prev.questions, question];\n        // 동기화는 prev 기준으로 정확히 반영\n        syncManager.updateGameData({\n          questions: newQuestions,\n          gameState: normalizedGameState,\n          currentQuestionIndex: normalizedIndex,\n          players: prev.players,\n          room: prev.room\n        } as any);\n        eventBus.emit('QUESTION_ADDED', question);\n        return { ...prev, questions: newQuestions, gameState: normalizedGameState, currentQuestionIndex: normalizedIndex };\n      });\n    },\n\n    addQuestionsBulk: (questionsToAdd: Question[]) => {\n      if (!questionsToAdd || questionsToAdd.length === 0) return;\n      setState(prev => {\n        const normalizedGameState = prev.gameState === 'finished' ? 'waiting' : prev.gameState;\n        const normalizedIndex = prev.gameState === 'finished' ? 0 : prev.currentQuestionIndex;\n        const newQuestions = [...prev.questions, ...questionsToAdd];\n        syncManager.updateGameData({\n          questions: newQuestions,\n          gameState: normalizedGameState,\n          currentQuestionIndex: normalizedIndex,\n          players: prev.players,\n          room: prev.room\n        } as any);\n        eventBus.emit('QUESTIONS_ADDED', { count: questionsToAdd.length });\n        return { ...prev, questions: newQuestions, gameState: normalizedGameState, currentQuestionIndex: normalizedIndex };\n      });\n    },\n\n    deleteQuestion: (questionId: string) => {\n      const newQuestions = state.questions.filter(q => q.id !== questionId);\n      setState(prev => ({ ...prev, questions: newQuestions }));\n      syncManager.updateGameData({ questions: newQuestions });\n      eventBus.emit('QUESTION_DELETED', questionId);\n    },\n\n    reorderQuestions: (questions: Question[]) => {\n      setState(prev => ({ ...prev, questions }));\n      syncManager.updateGameData({ questions });\n      eventBus.emit('QUESTIONS_REORDERED', questions);\n    },\n\n    startGame: () => {\n      if (state.questions.length === 0) {\n        setState(prev => ({ ...prev, error: '문제를 먼저 추가해주세요.' }));\n        return;\n      }\n\n      const isFirstStart = !state.hasStarted;\n      let startIndex = 0;\n      if (isFirstStart) {\n        startIndex = 0;\n      } else {\n        const nextIndex = state.currentQuestionIndex + 1;\n        if (nextIndex >= state.questions.length) {\n          // 진행할 다음 문제가 없으면 대기 유지\n          return;\n        }\n        startIndex = nextIndex;\n      }\n\n      const resetPlayers = state.players.map(player => ({\n        ...player,\n        hasSubmitted: false,\n        currentAnswer: undefined\n      }));\n\n      const nowMs = Date.now();\n      const newState = { gameState: 'playing' as const, currentQuestionIndex: startIndex, hasStarted: true, players: resetPlayers, phaseStartedAt: nowMs, phaseDuration: state.gameSettings.timeLimit, paused: false } as const;\n      console.info('[AUTO_FLOW] startGame', newState);\n      setState(prev => ({ ...prev, ...newState }));\n      syncManager.updateGameData({\n        gameState: 'playing',\n        currentQuestionIndex: startIndex,\n        questions: state.questions,\n        players: resetPlayers,\n        room: state.room,\n        hasStarted: true,\n        gameSettings: state.gameSettings,\n        phaseStartedAt: newState.phaseStartedAt,\n        phaseDuration: newState.phaseDuration,\n        paused: false,\n        activeQuestionId: state.questions[startIndex]?.id || null,\n        lastGradedQuestionId: null\n      } as any);\n      // grade lock 초기화\n      try {\n        if (state.room) localStorage.removeItem(`grade_lock_${state.room.code}`);\n      } catch {}\n      eventBus.emit('GAME_STARTED', newState);\n      \n      if (state.room) {\n        roomManager.updateHostActivity(state.room.code, 'current_session');\n      }\n    },\n\n    pauseGame: () => {\n      const newState = { gameState: 'paused' as const, paused: true } as const;\n      setState(prev => ({ ...prev, ...newState }));\n      syncManager.updateGameState(newState as any);\n      eventBus.emit('GAME_PAUSED', newState);\n    },\n\n    resumeGame: () => {\n      const newState = { gameState: 'playing' as const, paused: false } as const;\n      setState(prev => ({ ...prev, ...newState }));\n      syncManager.updateGameState(newState as any);\n      eventBus.emit('GAME_RESUMED', newState);\n    },\n\n    nextQuestion: () => {\n      console.info('[AUTO_FLOW] nextQuestion called', { current: state.currentQuestionIndex, total: state.questions.length });\n      const nextIndex = state.currentQuestionIndex + 1;\n      \n      if (nextIndex >= state.questions.length) {\n        // 자동 종료하지 않고 대기 상태로 전환. 인덱스는 마지막 문제에서 유지\n        const newState = { gameState: 'waiting' as const };\n        console.info('[AUTO_FLOW] no more questions → waiting', { lastIndex: state.currentQuestionIndex });\n        setState(prev => ({ ...prev, ...newState, currentQuestionIndex: Math.max(0, prev.currentQuestionIndex) }));\n        syncManager.updateGameData({ gameState: 'waiting', currentQuestionIndex: state.currentQuestionIndex, hasStarted: true });\n        return;\n      }\n\n      const resetPlayers = state.players.map(player => ({\n        ...player,\n        hasSubmitted: false,\n        currentAnswer: undefined\n      }));\n\n      const nowMs = Date.now();\n      const newState = { gameState: 'playing' as const, currentQuestionIndex: nextIndex, players: resetPlayers, phaseStartedAt: nowMs, phaseDuration: state.gameSettings.timeLimit, paused: false } as const;\n\n      console.info('[AUTO_FLOW] move to next playing', newState);\n      setState(prev => ({ ...prev, ...newState }));\n      syncManager.updateGameData({\n        gameState: 'playing',\n        currentQuestionIndex: nextIndex,\n        players: resetPlayers,\n        questions: state.questions,\n        room: state.room,\n        phaseStartedAt: newState.phaseStartedAt,\n        phaseDuration: newState.phaseDuration,\n        paused: false,\n        activeQuestionId: state.questions[nextIndex]?.id || null,\n        lastGradedQuestionId: null\n      } as any);\n      // grade lock 초기화\n      try {\n        if (state.room) localStorage.removeItem(`grade_lock_${state.room.code}`);\n      } catch {}\n      eventBus.emit('NEXT_QUESTION', newState);\n    },\n\n    showAnswer: () => {\n      const newState = { gameState: 'showingAnswer' as const };\n      console.info('[AUTO_FLOW] showAnswer called', { index: state.currentQuestionIndex });\n      // 최신 데이터로 채점(브로드캐스트 지연 보정)\n      const latest = syncManager.getGameData();\n      const q = latest.questions.find((qq: any) => qq.id === (latest as any).activeQuestionId) || latest.questions[latest.currentQuestionIndex];\n      if (q) {\n        console.debug('[AUTO_FLOW] grading begin', { qid: q.id, score: q.score });\n        // 로컬 grade lock (탭 간 중복 방지)\n        try {\n          const lockKey = state.room ? `grade_lock_${state.room.code}` : null;\n          if (lockKey) {\n            const locked = localStorage.getItem(lockKey);\n            if (locked === q.id) {\n              console.warn('[AUTO_FLOW] grade locked by other tab', { qid: q.id });\n            } else {\n              localStorage.setItem(lockKey, q.id);\n            }\n          }\n        } catch {}\n        const gradedPlayers = latest.players.map(p => {\n          const answerStr = String(p.currentAnswer ?? '').trim();\n          let isCorrect = false;\n          if (q.type === 'multiple') {\n            isCorrect = String(q.correctAnswer) === answerStr;\n          } else {\n            isCorrect = String(q.correctAnswer).toString().trim() === answerStr;\n          }\n          return isCorrect ? { ...p, score: p.score + q.score } : p;\n        });\n        setState(prev => ({ ...prev, players: gradedPlayers }));\n        syncManager.updateGameData({ players: gradedPlayers, lastGradedQuestionId: q.id } as any);\n        // 정오 결과를 즉시 브로드캐스트해 참여자 UI가 동일하게 반영\n        syncManager.broadcast('FINALIZE_ANSWERS', { questionId: q.id, players: gradedPlayers });\n        console.debug('[AUTO_FLOW] grading done + broadcast', { qid: q.id });\n      }\n      const nowMs = Date.now();\n      setState(prev => ({ ...prev, ...newState, phaseStartedAt: nowMs, phaseDuration: state.gameSettings.answerRevealTime, paused: false }));\n      syncManager.updateGameState({ ...newState, phaseStartedAt: nowMs, phaseDuration: state.gameSettings.answerRevealTime, paused: false } as any);\n      eventBus.emit('ANSWER_SHOWN', newState);\n    },\n\n    endGame: () => {\n      const newState = { gameState: 'finished' as const };\n      setState(prev => ({ ...prev, ...newState }));\n      syncManager.updateGameState(newState);\n      eventBus.emit('GAME_ENDED', newState);\n    },\n\n    eliminatePlayer: (playerId: string) => {\n      const updatedPlayers = state.players.map(player =>\n        player.id === playerId ? { ...player, isEliminated: true } : player\n      );\n      setState(prev => ({ ...prev, players: updatedPlayers }));\n      syncManager.updateGameData({ players: updatedPlayers });\n      eventBus.emit('PLAYER_ELIMINATED', { playerId, players: updatedPlayers });\n    },\n\n    revivePlayer: (playerId: string) => {\n      const updatedPlayers = state.players.map(player =>\n        player.id === playerId ? { ...player, isEliminated: false } : player\n      );\n      setState(prev => ({ ...prev, players: updatedPlayers }));\n      syncManager.updateGameData({ players: updatedPlayers });\n      eventBus.emit('PLAYER_REVIVED', { playerId, players: updatedPlayers });\n    },\n\n    submitAnswer: (playerId: string, answer: string | number) => {\n      const updatedPlayers = state.players.map(player =>\n        player.id === playerId \n          ? { ...player, hasSubmitted: true, currentAnswer: String(answer) }\n          : player\n      );\n      setState(prev => ({ ...prev, players: updatedPlayers }));\n      syncManager.updateGameData({ players: updatedPlayers });\n      eventBus.emit('ANSWER_SUBMITTED', { playerId, answer, players: updatedPlayers });\n    },\n\n    gradeCurrentQuestion: () => {},\n\n    updateGameSettings: (settings: Partial<GameSettings>) => {\n      const newSettings = { ...state.gameSettings, ...settings };\n      setState(prev => ({ ...prev, gameSettings: newSettings }));\n      // 설정은 전파/영구화 되어야 함\n      syncManager.updateGameData({ gameSettings: newSettings });\n      eventBus.emit('SETTINGS_UPDATED', newSettings);\n    },\n\n    resetGame: () => {\n      setState(initialState);\n      syncManager.updateGameState({\n        room: null,\n        players: [],\n        questions: [],\n        gameState: 'waiting',\n        currentQuestionIndex: 0,\n      });\n      eventBus.emit('GAME_RESET');\n    },\n\n    updateHostActivity: (roomCode: string) => {\n      roomManager.updateHostActivity(roomCode, 'current_session');\n      syncManager.broadcast('HOST_ACTIVITY', { roomCode, sessionId: 'current_session' });\n    }\n  };\n\n  const value: GameContextValue = {\n    state,\n    actions\n  };\n\n  return (\n    <GameContext.Provider value={value}>\n      {children}\n    </GameContext.Provider>\n  );\n}\n\nexport function useNewGameContext(): GameContextValue {\n  const context = useContext(GameContext);\n  if (!context) {\n    throw new Error('useNewGameContext must be used within a NewGameProvider');\n  }\n  return context;\n}\n\nexport default GameContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}