{"ast":null,"code":"/**\n * 독립적인 동기화 매니저\n * 브라우저 간, 탭 간 실시간 동기화를 담당\n */\n\nclass SyncManager {\n  constructor() {\n    this.channel = void 0;\n    this.sessionId = void 0;\n    this.listeners = new Map();\n    this.gameData = void 0;\n    this.sessionId = 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n    this.channel = new BroadcastChannel('golden_bell_sync');\n    this.gameData = this.getInitialGameData();\n    this.setupChannelListener();\n    this.startHeartbeat();\n    console.log('🔄 SyncManager 초기화됨 - SessionID:', this.sessionId);\n  }\n  getInitialGameData() {\n    const saved = localStorage.getItem('gameData');\n    if (saved) {\n      try {\n        const parsed = JSON.parse(saved);\n        // 방어 로직: 저장된 데이터가 이전 세션의 종료 상태거나 방 정보가 없으면 초기 상태로 정규화\n        if (!parsed || !parsed.room) {\n          return {\n            room: null,\n            players: [],\n            questions: [],\n            gameState: 'waiting',\n            currentQuestionIndex: 0,\n            lastUpdated: Date.now()\n          };\n        }\n        // 질문이 없거나 인덱스가 범위를 벗어나면 항상 대기 상태로 초기화\n        if (!Array.isArray(parsed.questions) || parsed.questions.length === 0) {\n          parsed.questions = [];\n          parsed.gameState = 'waiting';\n          parsed.currentQuestionIndex = 0;\n        } else if (typeof parsed.currentQuestionIndex !== 'number' || parsed.currentQuestionIndex < 0 || parsed.currentQuestionIndex >= parsed.questions.length) {\n          parsed.currentQuestionIndex = 0;\n          if (parsed.gameState === 'finished') parsed.gameState = 'waiting';\n        }\n        return parsed;\n      } catch (e) {\n        console.warn('저장된 게임 데이터 파싱 실패:', e);\n      }\n    }\n    return {\n      room: null,\n      players: [],\n      questions: [],\n      gameState: 'waiting',\n      currentQuestionIndex: 0,\n      lastUpdated: Date.now()\n    };\n  }\n  setupChannelListener() {\n    this.channel.addEventListener('message', event => {\n      const syncEvent = event.data;\n\n      // 자신이 보낸 이벤트는 무시\n      if (syncEvent.source === this.sessionId) return;\n      console.log('📡 동기화 이벤트 수신:', syncEvent.type, syncEvent.payload);\n      this.handleSyncEvent(syncEvent);\n    });\n  }\n  handleSyncEvent(event) {\n    switch (event.type) {\n      case 'GAME_DATA_UPDATE':\n        this.updateGameData(event.payload, false);\n        break;\n      case 'ROOM_DELETED':\n        {\n          const deletedCode = event.payload;\n          if (this.gameData.room && this.gameData.room.code === deletedCode) {\n            // 현재 방이 삭제되면 게임 데이터 초기화\n            this.gameData = this.getInitialGameData();\n            this.saveGameData();\n            this.notifyListeners('GAME_DATA_UPDATE', this.gameData);\n            console.log('🧹 방 삭제로 게임 데이터 초기화:', deletedCode);\n          }\n          break;\n        }\n      case 'PLAYER_JOIN':\n        this.handlePlayerJoin(event.payload);\n        break;\n      case 'PLAYER_LEAVE':\n        this.handlePlayerLeave(event.payload);\n        break;\n      case 'GAME_STATE_CHANGE':\n        this.handleGameStateChange(event.payload);\n        break;\n      case 'HEARTBEAT':\n        this.handleHeartbeat(event.payload);\n        break;\n    }\n    this.notifyListeners(event.type, event.payload);\n  }\n  handlePlayerJoin(player) {\n    if (!this.gameData.players.find(p => p.id === player.id)) {\n      this.gameData.players.push(player);\n      this.gameData.lastUpdated = Date.now();\n      this.saveGameData();\n      console.log('👤 플레이어 참여:', player.nickname);\n    }\n  }\n  handlePlayerLeave(playerId) {\n    this.gameData.players = this.gameData.players.filter(p => p.id !== playerId);\n    this.gameData.lastUpdated = Date.now();\n    this.saveGameData();\n    console.log('👤 플레이어 퇴장:', playerId);\n  }\n  handleGameStateChange(newState) {\n    Object.assign(this.gameData, newState);\n    this.gameData.lastUpdated = Date.now();\n    this.saveGameData();\n    console.log('🎮 게임 상태 변경:', newState);\n  }\n  handleHeartbeat(data) {\n    // 하트비트 처리 (필요시 구현)\n  }\n  startHeartbeat() {\n    // 불필요한 하트비트 제거로 트래픽 감소\n  }\n  broadcast(type, payload) {\n    const event = {\n      type,\n      payload,\n      timestamp: Date.now(),\n      source: this.sessionId\n    };\n    this.channel.postMessage(event);\n    console.log('📤 동기화 이벤트 전송:', type, payload);\n  }\n  updateGameData(newData, broadcast = true) {\n    Object.assign(this.gameData, newData);\n    this.gameData.lastUpdated = Date.now();\n    this.saveGameData();\n    if (broadcast) {\n      this.broadcast('GAME_DATA_UPDATE', newData);\n    }\n    this.notifyListeners('GAME_DATA_UPDATE', this.gameData);\n  }\n  getGameData() {\n    return {\n      ...this.gameData\n    };\n  }\n  addPlayer(player) {\n    if (!this.gameData.players.find(p => p.id === player.id)) {\n      this.gameData.players.push(player);\n      this.gameData.lastUpdated = Date.now();\n      this.saveGameData();\n      this.broadcast('PLAYER_JOIN', player);\n      this.notifyListeners('PLAYER_JOIN', player);\n    }\n  }\n  removePlayer(playerId) {\n    this.gameData.players = this.gameData.players.filter(p => p.id !== playerId);\n    this.gameData.lastUpdated = Date.now();\n    this.saveGameData();\n    this.broadcast('PLAYER_LEAVE', playerId);\n    this.notifyListeners('PLAYER_LEAVE', playerId);\n  }\n  updateGameState(changes) {\n    Object.assign(this.gameData, changes);\n    this.gameData.lastUpdated = Date.now();\n    this.saveGameData();\n    this.broadcast('GAME_STATE_CHANGE', changes);\n    this.notifyListeners('GAME_STATE_CHANGE', this.gameData);\n  }\n  saveGameData() {\n    try {\n      localStorage.setItem('gameData', JSON.stringify(this.gameData));\n    } catch (e) {\n      console.error('게임 데이터 저장 실패:', e);\n    }\n  }\n  addEventListener(eventType, callback) {\n    if (!this.listeners.has(eventType)) {\n      this.listeners.set(eventType, new Set());\n    }\n    this.listeners.get(eventType).add(callback);\n  }\n  removeEventListener(eventType, callback) {\n    if (this.listeners.has(eventType)) {\n      this.listeners.get(eventType).delete(callback);\n    }\n  }\n  notifyListeners(eventType, data) {\n    if (this.listeners.has(eventType)) {\n      this.listeners.get(eventType).forEach(callback => {\n        try {\n          callback(data);\n        } catch (e) {\n          console.error('리스너 콜백 에러:', e);\n        }\n      });\n    }\n  }\n  destroy() {\n    this.channel.close();\n    this.listeners.clear();\n    console.log('🔄 SyncManager 종료됨');\n  }\n}\n\n// 싱글톤 인스턴스\nexport const syncManager = new SyncManager();\nexport default syncManager;","map":{"version":3,"names":["SyncManager","constructor","channel","sessionId","listeners","Map","gameData","Date","now","Math","random","toString","substr","BroadcastChannel","getInitialGameData","setupChannelListener","startHeartbeat","console","log","saved","localStorage","getItem","parsed","JSON","parse","room","players","questions","gameState","currentQuestionIndex","lastUpdated","Array","isArray","length","e","warn","addEventListener","event","syncEvent","data","source","type","payload","handleSyncEvent","updateGameData","deletedCode","code","saveGameData","notifyListeners","handlePlayerJoin","handlePlayerLeave","handleGameStateChange","handleHeartbeat","player","find","p","id","push","nickname","playerId","filter","newState","Object","assign","broadcast","timestamp","postMessage","newData","getGameData","addPlayer","removePlayer","updateGameState","changes","setItem","stringify","error","eventType","callback","has","set","Set","get","add","removeEventListener","delete","forEach","destroy","close","clear","syncManager"],"sources":["C:/Users/9204r/.cursor/avatar/src/services/SyncManager.ts"],"sourcesContent":["/**\n * 독립적인 동기화 매니저\n * 브라우저 간, 탭 간 실시간 동기화를 담당\n */\n\nimport { Room, Player, Question, GameState } from '../types/game';\n\nexport interface SyncEvent {\n  type: string;\n  payload: any;\n  timestamp: number;\n  source: string;\n}\n\nexport interface GameSyncData {\n  room: Room | null;\n  players: Player[];\n  questions: Question[];\n  gameState: GameState;\n  currentQuestionIndex: number;\n  lastUpdated: number;\n}\n\nclass SyncManager {\n  private channel: BroadcastChannel;\n  private sessionId: string;\n  private listeners: Map<string, Set<Function>> = new Map();\n  private gameData: GameSyncData;\n\n  constructor() {\n    this.sessionId = 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n    this.channel = new BroadcastChannel('golden_bell_sync');\n    this.gameData = this.getInitialGameData();\n    \n    this.setupChannelListener();\n    this.startHeartbeat();\n    \n    console.log('🔄 SyncManager 초기화됨 - SessionID:', this.sessionId);\n  }\n\n  private getInitialGameData(): GameSyncData {\n    const saved = localStorage.getItem('gameData');\n    if (saved) {\n      try {\n        const parsed = JSON.parse(saved);\n        // 방어 로직: 저장된 데이터가 이전 세션의 종료 상태거나 방 정보가 없으면 초기 상태로 정규화\n        if (!parsed || !parsed.room) {\n          return {\n            room: null,\n            players: [],\n            questions: [],\n            gameState: 'waiting',\n            currentQuestionIndex: 0,\n            lastUpdated: Date.now()\n          };\n        }\n        // 질문이 없거나 인덱스가 범위를 벗어나면 항상 대기 상태로 초기화\n        if (!Array.isArray(parsed.questions) || parsed.questions.length === 0) {\n          parsed.questions = [];\n          parsed.gameState = 'waiting';\n          parsed.currentQuestionIndex = 0;\n        } else if (\n          typeof parsed.currentQuestionIndex !== 'number' ||\n          parsed.currentQuestionIndex < 0 ||\n          parsed.currentQuestionIndex >= parsed.questions.length\n        ) {\n          parsed.currentQuestionIndex = 0;\n          if (parsed.gameState === 'finished') parsed.gameState = 'waiting';\n        }\n        return parsed;\n      } catch (e) {\n        console.warn('저장된 게임 데이터 파싱 실패:', e);\n      }\n    }\n    \n    return {\n      room: null,\n      players: [],\n      questions: [],\n      gameState: 'waiting',\n      currentQuestionIndex: 0,\n      lastUpdated: Date.now()\n    };\n  }\n\n  private setupChannelListener() {\n    this.channel.addEventListener('message', (event) => {\n      const syncEvent: SyncEvent = event.data;\n      \n      // 자신이 보낸 이벤트는 무시\n      if (syncEvent.source === this.sessionId) return;\n      \n      console.log('📡 동기화 이벤트 수신:', syncEvent.type, syncEvent.payload);\n      \n      this.handleSyncEvent(syncEvent);\n    });\n  }\n\n  private handleSyncEvent(event: SyncEvent) {\n    switch (event.type) {\n      case 'GAME_DATA_UPDATE':\n        this.updateGameData(event.payload, false);\n        break;\n      case 'ROOM_DELETED': {\n        const deletedCode = event.payload as string;\n        if (this.gameData.room && this.gameData.room.code === deletedCode) {\n          // 현재 방이 삭제되면 게임 데이터 초기화\n          this.gameData = this.getInitialGameData();\n          this.saveGameData();\n          this.notifyListeners('GAME_DATA_UPDATE', this.gameData);\n          console.log('🧹 방 삭제로 게임 데이터 초기화:', deletedCode);\n        }\n        break;\n      }\n      case 'PLAYER_JOIN':\n        this.handlePlayerJoin(event.payload);\n        break;\n      case 'PLAYER_LEAVE':\n        this.handlePlayerLeave(event.payload);\n        break;\n      case 'GAME_STATE_CHANGE':\n        this.handleGameStateChange(event.payload);\n        break;\n      case 'HEARTBEAT':\n        this.handleHeartbeat(event.payload);\n        break;\n    }\n    \n    this.notifyListeners(event.type, event.payload);\n  }\n\n  private handlePlayerJoin(player: Player) {\n    if (!this.gameData.players.find(p => p.id === player.id)) {\n      this.gameData.players.push(player);\n      this.gameData.lastUpdated = Date.now();\n      this.saveGameData();\n      \n      console.log('👤 플레이어 참여:', player.nickname);\n    }\n  }\n\n  private handlePlayerLeave(playerId: string) {\n    this.gameData.players = this.gameData.players.filter(p => p.id !== playerId);\n    this.gameData.lastUpdated = Date.now();\n    this.saveGameData();\n    \n    console.log('👤 플레이어 퇴장:', playerId);\n  }\n\n  private handleGameStateChange(newState: Partial<GameSyncData>) {\n    Object.assign(this.gameData, newState);\n    this.gameData.lastUpdated = Date.now();\n    this.saveGameData();\n    \n    console.log('🎮 게임 상태 변경:', newState);\n  }\n\n  private handleHeartbeat(data: { sessionId: string; timestamp: number }) {\n    // 하트비트 처리 (필요시 구현)\n  }\n\n  private startHeartbeat() {\n    // 불필요한 하트비트 제거로 트래픽 감소\n  }\n\n  public broadcast(type: string, payload: any) {\n    const event: SyncEvent = {\n      type,\n      payload,\n      timestamp: Date.now(),\n      source: this.sessionId\n    };\n    \n    this.channel.postMessage(event);\n    console.log('📤 동기화 이벤트 전송:', type, payload);\n  }\n\n  public updateGameData(newData: Partial<GameSyncData>, broadcast = true) {\n    Object.assign(this.gameData, newData);\n    this.gameData.lastUpdated = Date.now();\n    this.saveGameData();\n    \n    if (broadcast) {\n      this.broadcast('GAME_DATA_UPDATE', newData);\n    }\n    \n    this.notifyListeners('GAME_DATA_UPDATE', this.gameData);\n  }\n\n  public getGameData(): GameSyncData {\n    return { ...this.gameData };\n  }\n\n  public addPlayer(player: Player) {\n    if (!this.gameData.players.find(p => p.id === player.id)) {\n      this.gameData.players.push(player);\n      this.gameData.lastUpdated = Date.now();\n      this.saveGameData();\n      \n      this.broadcast('PLAYER_JOIN', player);\n      this.notifyListeners('PLAYER_JOIN', player);\n    }\n  }\n\n  public removePlayer(playerId: string) {\n    this.gameData.players = this.gameData.players.filter(p => p.id !== playerId);\n    this.gameData.lastUpdated = Date.now();\n    this.saveGameData();\n    \n    this.broadcast('PLAYER_LEAVE', playerId);\n    this.notifyListeners('PLAYER_LEAVE', playerId);\n  }\n\n  public updateGameState(changes: Partial<GameSyncData>) {\n    Object.assign(this.gameData, changes);\n    this.gameData.lastUpdated = Date.now();\n    this.saveGameData();\n    \n    this.broadcast('GAME_STATE_CHANGE', changes);\n    this.notifyListeners('GAME_STATE_CHANGE', this.gameData);\n  }\n\n  private saveGameData() {\n    try {\n      localStorage.setItem('gameData', JSON.stringify(this.gameData));\n    } catch (e) {\n      console.error('게임 데이터 저장 실패:', e);\n    }\n  }\n\n  public addEventListener(eventType: string, callback: Function) {\n    if (!this.listeners.has(eventType)) {\n      this.listeners.set(eventType, new Set());\n    }\n    this.listeners.get(eventType)!.add(callback);\n  }\n\n  public removeEventListener(eventType: string, callback: Function) {\n    if (this.listeners.has(eventType)) {\n      this.listeners.get(eventType)!.delete(callback);\n    }\n  }\n\n  private notifyListeners(eventType: string, data: any) {\n    if (this.listeners.has(eventType)) {\n      this.listeners.get(eventType)!.forEach(callback => {\n        try {\n          callback(data);\n        } catch (e) {\n          console.error('리스너 콜백 에러:', e);\n        }\n      });\n    }\n  }\n\n  public destroy() {\n    this.channel.close();\n    this.listeners.clear();\n    console.log('🔄 SyncManager 종료됨');\n  }\n}\n\n// 싱글톤 인스턴스\nexport const syncManager = new SyncManager();\nexport default syncManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}